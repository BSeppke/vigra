/** \mainpage VIGRA Reference Manual

    <DL>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref Concepts
        <DD><em>generic interface definitions</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref Utilities
        <DD><em>Basic helper functionality needed throughout</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ErrorReporting
        <DD><em>Exceptions and assertions</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref NumericPromotionTraits
        <DD><em>Meta-information about arithmetic types</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref PixelTypes
        <DD><em>Non-scalar types such as RGBValue and TinyVector</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ImageDataStructures
        <DD> <em>Images, image iterators, and supporting types and functions</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref MultiDimensionalArrays
        <DD> <em>Arrays, iterators, and supporting types and functions
             for arbitrary dimensions</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ImportExport
        <DD> <em>Conversion from and to other image data types</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ColorConversions
        <DD><em>Convert between RGB and other color spaces, such as L*u*v*, Y'PbPr</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ImageProcessing
        <DD> <em>Point operators, image arithmetic, convolution, morphology</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ImageAnalysis
        <DD> <em>Segmentation and feature extraction algorithms</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref Examples
        <DD> <em>Demonstration programs for VIGRA's usage </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref CreditsChangelog
        <DD> <em>Who contributed what?</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref Installation
        <DD>
    </DL>
    
    \anchor _details
    <CENTER>
    \section Main VIGRA - Vision with Generic Algorithms
    Version VERSION_VERSION_VERSION
    by <a href="http://kogs-www.informatik.uni-hamburg.de/~koethe/">Ullrich K&ouml;the</a>
    </CENTER>
    
    VIGRA  is a computer vision library that puts its main emphasize on
    <em>flexible algorithms</em>, because
    algorithms represent the principle know-how of this field.
    The library was consequently built
    using <em>generic programming</em> as introduced by Stepanov
    and Musser  and exemplified in the C++
    <a href="WWW_STL_DOCU">Standard Template Library</a>.
    By writing a few adapters (image iterators and accessors)
    you can use VIGRA's algorithms on top of
    <em>your</em> data structures, within <em>your</em> environment. Alternatively,
    you can also use the data structures provided within VIGRA, which can
    be easily adapted to a wide range of applications. VIGRA's flexibility
    comes almost for free: Since the design uses compile-time polymorphism
    (templates), performance of the compiled program approaches that
    of a traditional, hand tuned, inflexible, solution.
    
    VIGRA's design is documented in the chapter <em>"Reusable Software in
    Computer Vision"</em> by
    <a href="http://kogs-www.informatik.uni-hamburg.de/~koethe/">Ullrich K&ouml;the</a>,
    in: B. J&auml;hne, H. Hau&szlig;ecker, P. Gei&szlig;ler: "Handbook on
    Computer Vision and  Applications", volume 3, Acadamic Press, 1999.
    If you don't have the book,  you may read a
    <a href="documents/GenericProg2D.ps">draft of this article</a>. A shorter
    article <em>"<a href="http://kogs-www.informatik.uni-hamburg.de/~koethe/papers/GenericProg2DC++Report.ps.gz">STL Style Generic Programming with Images</a>"</em>
    describing some of the
    ideas has appeared in the January 2000 issue of
    <a href="http://www.creport.com/">C++ Report Magazine</a>. The most comprehensive source of information is
    U. K&ouml;the's PhD thesis <em>"<a href="http://kogs-www.informatik.uni-hamburg.de/~koethe/papers/index.html#PhD>Generische Programmierung f&uuml;r die Bildverarbeitung</a>"</em>.
    However, this is written in German.
        
    VIGRA is subject to this <a href="LICENSE">LICENSE</a>.
    
    
    \section Documentation Documentation
    
    The documentation can be found in \p @docdir@, the start file is
    \p @docdir@/index.html (this file).
    
    
    
*/

/** \page Concepts Concepts

    <DL>
    <DT>
    Description of the generic interface concepts used within VIGRA.
    <p>
    <DD>
        <DL>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref AlgebraicConcepts
            <DD> <em>Requirements for types that implement arithmetic operations</em>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref ImageIterators
            <DD> <em>Requirements for 2D iterators</em>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref MultiIteratorPage
            <DD> <em>Iterators for multi-dimensional arrays</em>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref DataAccessors
            <DD> <em>Requirements for data accessors</em>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref CrackEdgeImage
            <DD>
        </DL>
    </DL>
*/

/** \page PixelTypes Pixel Types

    <DL>
    <DT>
    <b>RGB colors and related functionality</b>
    <p>
    <DD>
        <DL>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref vigra::RGBValue
            <DD>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref RGBValueTraits
            <DD>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref RGBValueOperators
            <DD>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref RGBValueAccessors
            <DD>
        </DL>
        <p>
    <DT>
    <b>Fixed-size vectors and related functionality</b>
    <p>
    <DD>
        <DL>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref vigra::TinyVector
            <DD>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref TinyVectorTraits
            <DD>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref TinyVectorOperators
            <DD>
        </DL>
        <p>
    <DT>
    <b>Complex Numbers</b>
    <p>
    <DD>
        <DL>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref vigra::FFTWComplex
            <DD>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref FFTWComplexTraits
            <DD>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref FFTWComplexOperators
            <DD>
        <DT>
            <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
            \ref FFTWComplexAccessors
            <DD>
        </DL>
    </DL>
*/

/** \page ImageDataStructures Image Data Structures and Iterators

    <DL>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref vigra::BasicImage
        <DD> <em>Fundamental class template for images </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif"> 
        \ref vigra::BasicImageView
        <DD> <em>Class template for images that use external memory</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif"> 
        \ref StandardImageTypes
        <DD> <em>The most common instanciations of \ref vigra::BasicImage</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif"> 
        \ref VigraImpex
        <DD> <em>Image import/export</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ImageContainers
        <DD> <em>Classes to manage multiple images (ImageArray..)</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ImageIterators
        <DD> <em>Basic image iterator implementations </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ImageIteratorAdapters
        <DD> <em>Iterate over rows, columns, and other image subsets </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref DataAccessors
        <DD> <em>Basic templates to encapsulate access to the data of an iterator</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref ArgumentObjectFactories
        <DD> <em>Factory functions to create argument objects which simplify long argument lists </em>
    </DL>
*/

/** \page MultiDimensionalArrays Multi-Dimensional Arrays and Iterators

    <DL>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref vigra::MultiArrayView
        <DD> <em>Interface for multi-dimensional arrays </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif"> 
        \ref vigra::MultiArray
        <DD> <em>Array class that holds the actual memory</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif"> 
        \ref VolumeImpex
        <DD> <em>Import/export of volume data.</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref MultiArrayTags
        <DD> <em>Meta-programming tags to mark array's as strided or unstrided.</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref MultiIteratorPage
        <DD> <em>Iterators for multi-dimensional arrays</em>
    </DL>
*/

/** \page ImportExport Image Import and Export

    Conversion from and to other image data types
    
    <DL>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref VigraImpex
        <DD> <em>VIGRA's highlevel image import/export interface</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref VolumeImpex
        <DD> <em>Import/export interface for volume data.</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref TIFFImpex
        <DD> <em>image import/export interface if you want to call libtiff functions directly</em>
    </DL>
    
    \anchor _details
    There are two fundamentally different approaches to interfacing between VIGRA and the rest of the world.

    <b>If you already have an image data type in your system:</b>

    Then I recommend using VIGRA's algorithms directly on top of your data type.
    To do this, you have to provide image iterators and accessors. In many cases,
    the standard implementations \ref vigra::ImageIterator and
    \ref vigra::StandardAccessor coming with VIGRA will be applicable. Otherwise,
    you have to write your own versions which isn't very difficult (look at the code
    of the above implementations for guidance).

    Alternatively, you may use the Image Data Structures provided within VIGRA
    and convert your data type into one of them. Take a look at \ref tiffToScalarImage() and
    \ref createScalarTiffImage() to see how this might be done.

    <b>If you don't have an image data type in your system:</b>

    Use the Image Data Structures provided within VIGRA and use one of the import/export facilities above.

*/

/** \page ImageProcessing Image Processing

    <DL>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref PointOperators
        <DD><em>algorithms and functors for image arithmetic, inspection, transformations etc.</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref FunctorExpressions
        <DD><em>Expression templates for automated functor creation</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref GeometricTransformations
        <DD><em>image resize and interpolation</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref Convolution
        <DD> <em>1D and 2D filters, including separable and recursive convolution, and non-linear diffusion</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref FourierTransform
        <DD> <em>forward and backward FFT, FFT plan generation, and related
                 functionality</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref GaborFilter
        <DD> <em>Gabor filter generation and related
                 functionality</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref Morphology
        <DD> <em>erosion, dilation, and median with disc structuring functions</em>
    </DL>
*/

/** \page ImageAnalysis Image Analysis

    <DL>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref InspectAlgo and \ref InspectFunctor
        <DD> <em>Statistical analysis of images and regions</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref vigra::Threshold
        <DD><em>Good old thresholding</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref Labeling
        <DD><em>Connected components labeling using 4 or 8 connectivity </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref LocalMinMax
        <DD><em>Including extremal plateaus larger than 1 pixel</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref DistanceTransform
        <DD><em>Distance transform using Euclidean, Manhattan, or chessboard metrics </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref EdgeDetection
        <DD> <em>Edge detectors based on first and second derivatives</em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref CornerDetection
        <DD> <em>Measure the 'cornerness' at each pixel </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref SymmetryDetection
        <DD> <em>Measure the local symmetry at each pixel </em>
    <DT>
        <IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">
        \ref SeededRegionGrowing
        <DD> <em>Region segmentation and voronoi tesselation</em>
    </DL>
*/

/** \page AlgebraicConcepts Algebraic Concepts

The algebraic concepts decribe requirements for algebraic types, that is
for types that support arithmetic operations. The built-in types are concepts
of \ref AlgebraicField and \ref DivisionAlgebra.

\anchor AlgebraicRing

<h3>Algebraic Ring</h3>

<ul>
    <li>A model of Algebraic Ring implements <tt>Assignable</TT>, <tt>Default Constructible</TT>,
        <tt>Equality Comparable</TT> and <tt>Strict Weakly Comparable</TT>
        as defined in the C++ standard (cf. the
        <a href="WWW_STL_DOCU">Standard Template Library documentation</a>).
        
    <li>A model of Algebraic Ring implements addition, subtraction and unary negation. The associated
    \link NumericTraits NumericTraits \endlink define a 'zero' element, the type of the
    result of addition and subtraction, and a type conversion function.
    Addition must be commutative.
    
    \code
    ModelOfAlgebraicRing a, b;
    NumericTraits<ModelOfAlgebraicRing>::Promote c;
    
    ModelOfAlgebraicRing zero = NumericTraits<ModelOfAlgebraicRing>::zero();
    
    b += a;
    b -= a;
    b = -a;
    c = a + b;
    c = a - b;
    c = a;
    a = NumericTraits<ModelOfAlgebraicRing>::fromPromote(c);
    
    assert(a + zero == a);
    assert(a + b == b + a);
    assert(a - b == a + (-b));
    \endcode

    <li>If mixed-type addition and subtraction are supported,
    \link PromoteTraits PromoteTraits \endlink define the result type:
        
    \code
    ModelOfAlgebraicRing1 a;
    ModelOfAlgebraicRing2 b;
    
    PromoteTraits<ModelOfAlgebraicRing1, ModelOfAlgebraicRing2>::Promote c;
         
    c = a + b;
    \endcode
    
    <li>A model of Algebraic Ring implements multiplication. The associated
    \link NumericTraits NumericTraits \endlink define a 'one' element, the type of the
    result of multiplication, and a type conversion function.
    
    \code
    ModelOfAlgebraicRing a, b;
    NumericTraits<ModelOfAlgebraicRing>::RealPromote c;
    
    ModelOfAlgebraicRing one = NumericTraits<ModelOfAlgebraicRing>::one();
    
    b *= a;
    c = a * b;
    c = a;
    a = NumericTraits<ModelOfAlgebraicRing>::fromRealPromote(c);
    
    assert(a * one == a);
    \endcode
</ul>

\anchor AlgebraicField
<h3>Algebraic Field</h3>

<ul>
    <li>A model of Algebraic Field implements \ref AlgebraicRing as defined above.
    
    <li>A model of Algebraic Field implements division. Division is undefined if
    and only if the right operand is 'zero'.
    
    \code
    ModelOfAlgebraicField a, b;
    typename NumericTraits<ModelOfAlgebraicField>::RealPromote c;
    
    ModelOfAlgebraicField zero = NumericTraits<ModelOfAlgebraicField>::zero();
    
    if(a != zero) b /= a;
    if(a != zero) c = b / a;
    \endcode
       
</ul>


\anchor LinearSpace

<h3>Linear Space</h3>

<ul>
    <li>A model of Linear Space implements <tt>Assignable</TT>, <tt>Default Constructible</TT>
        and <tt>Equality Comparable</TT>
        as defined in the C++ standard (cf. the
        <a href="WWW_STL_DOCU">Standard Template Library documentation</a>).
        
    <li>A model of Algebraic Ring implements addition, subtraction and unary negation. The associated
    \link NumericTraits NumericTraits \endlink define a 'zero' element, the type of the
    result of addition and subtraction, and a type conversion function.
    Addition must be commutative. (This part of the requirements is identical to
    \ref AlgebraicRing above.)
    
    \code
    ModelOfAlgebraicRing a, b;
    NumericTraits<ModelOfAlgebraicRing>::Promote c;
    
    ModelOfAlgebraicRing zero = NumericTraits<ModelOfAlgebraicRing>::zero();
    
    b += a;
    b -= a;
    b = -a;
    c = a + b;
    c = a - b;
    c = a;
    a = NumericTraits<ModelOfAlgebraicRing>::fromPromote(c);
    
    assert(a + zero == a);
    assert(a + b == b + a);
    assert(a - b == a + (-b));
    \endcode

    <li>If mixed-type addition and subtraction are supported,
    \link PromoteTraits PromoteTraits \endlink define the result type:
        
    \code
    ModelOfAlgebraicRing1 a;
    ModelOfAlgebraicRing2 b;
    
    PromoteTraits<ModelOfAlgebraicRing1, ModelOfAlgebraicRing2>::Promote c;
         
    c = a + b;
    \endcode
    
    <li>A model of Algebraic Ring implements multiplication and division with 'double'.
      (Note that the outer product could be defined with an arbitrary model of
      \ref AlgebraicField. For simplicity, VIGRA restricts this to only 'double'.)
      The associated \link NumericTraits NumericTraits \endlink define the type of the
      results, and a type conversion function.
    
    \code
    ModelOfAlgebraicRing a;
    double f;
    NumericTraits<ModelOfAlgebraicRing>::RealPromote c;
    
    
    a *= f;
    c = a * f;
    c = f * a;
    
    if(f != 0.0) a /= f;
    if(f != 0.0) c = a / f;
    
    c = a;
    a = NumericTraits<ModelOfAlgebraicRing>::fromRealPromote(c);
    \endcode
</ul>

\anchor LinearAlgebra
<h3>Linear Algebra</h3>

<ul>
    <li>A model of Linear Algebra implements \ref LinearSpace and
        \ref AlgebraicRing as defined above.
       
</ul>

\anchor DivisionAlgebra
<h3>Division Algebra</h3>

<ul>
    <li>A model of Division Algebra implements \ref LinearSpace and
        \ref AlgebraicField as defined above.
       
</ul>

*/

/** \namespace vigra
    all VIGRA functionality is located in namespace vigra
*/

#if 0
//@{


//Include: ../include/vigra/morphological_appropriate_scale.hxx
//Include: ../include/vigra/feature_adjacency_graph.hxx

//@}

#endif
