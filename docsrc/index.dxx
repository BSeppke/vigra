/** @name VIGRA Reference Manual 

    \begin{center}
    {\LARGE {\bf VIGRA - Vision with Generic Algorithms}} \\
    {\bf Version VERSION_VERSION_VERSION}
    {\bf by \URL[Ullrich K&ouml;the]{http://kogs-www.informatik.uni-hamburg.de/~koethe/}}
    \end{center}
    
    VIGRA  is a computer vision library that puts its main emphasize on 
    {\em flexible algorithms}, because
    algorithms represent the principle know-how of this field.
    The library was consequently built
    using {\em generic programming} as introduced by Stepanov
    and Musser  and exemplified in the C++ 
    \URL[Standard Template Library]{WWW_STL_DOCU/}.
    By writing a few adapters (image iterators and accessors) 
    you can use VIGRA's algorithms on top of 
    {\em your} data structures, within {\em your} environment. Alternatively,
    you can also use the data structures provided within VIGRA, which can
    be easily adapted to a wide range of applications. VIGRA's flexibility 
    comes almost for free: Since the design uses compile-time polymorphism
    (templates), performance of the compiled program approaches that 
    of a traditional, hand tuned, inflexible, solution.
    
    VIGRA's design is documented in the chapter {\em "Reusable Software in 
    Computer Vision"} by 
    \URL[Ullrich K&ouml;the]{http://kogs-www.informatik.uni-hamburg.de/~koethe/}, 
    in: B. J&auml;hne, H. Hau&szlig;ecker, P. Gei&szlig;ler: "Handbook on 
    Computer Vision and  Applications", volume 3, Acadamic Press, 1999. 
    If you don't have the book,  you may read a 
    \URL[draft of this article]{documents/GenericProg2D.ps}. A shorter article 
    {\em "STL Style Generic Programming with Images"} describing some of the 
    ideas has appeared in the January 2000 issue of
    \URL[C++ Report Magazine]{http://www.creport.com/}.
        
    VIGRA is subject to this \URL[LICENSE]{../LICENSE}. 
    
    <a name="installation">
    {\large {\bf Installation}}
    
    VIGRA can be downloaded from \URL[http://kogs-www.informatik.uni-hamburg.de/~koethe/vigra/vigraVERSION_VERSION_VERSION.tar.gz]{http://kogs-www.informatik.uni-hamburg.de/~koethe/vigra/vigraVERSION_VERSION_VERSION.tar.gz}.
    
    VIGRA is known to work with the following compilers:
    
    \begin{itemize}
    \item SGI C++ 7.2 and 7.3 (CC -n32)
    \item \URL[GNU g++ 2.95.1 and newer]{http://gcc.gnu.org/} 
          (formerly EGCS 1.1)
    \item Microsoft Visual C++ 5.0, patchlevel 3
    \end{itemize}

    VIGRA is known NOT to work with the following compilers:

    \begin{itemize}
    \item GNU g++ 2.8.x and earlier
    \item SUN C++ 4.2 (Sun's old compiler, a new version exists, 
        but has not been tried yet)
    \end{itemize}

    VIGRA should work with any standard conforming C++ compiler

    {\bf Unix:}
    
    \begin{itemize}
    \item uncompress and unpack the source distribution
    \item set the following environment variables:
    
    \begin{itemize}
    \item tell the system where the VIGRA sources reside 
    \begin{verbatim}
    > setenv VIGRA_PATH [some path]/vigraVERSION_VERSION_VERSION
    \end{verbatim}
    
    \item specify which compiler and makefile will be used 
    (currently supported values:     
    \begin{itemize}
         \item "GCC" for \URL[GNU g++]{http://gcc.gnu.org/} (2.95.1 and 
         newer) and EGCS 1.1, 
         \item "IRIXCC7.2.0" for SGI C++ 7.2.0, 
         \item "IRIXCC7.2.1" for SGI C++ 7.2.1,
         \item "IRIXCC" for SGI C++ 7.3,
         \item "COMPILER" for any compiler not in this list)
    \end{itemize}
    \begin{verbatim}
    > setenv VIGRA_COMPILER GCC       
    \end{verbatim}
    
    To add support for a new compiler, edit the file 
    #$VIGRA_PATH/config/COMPILER.mak# in order to tell VIGRA how your 
    compiler is invoked. In this case, you'll have to specify 
    #setenv VIGRA_COMPILER COMPILER#. If your compiler does not conform to
    the C++ standard, you may also need to add compiler specific settings
    in the file #$VIGRA_PATH/include/vigra/config.hxx#.

    \item specify the subdirectory where binaries go (for example, libraries 
     will be installed at
     #$VIGRA_PATH/lib/$VIGRA_PLATFORM#)
    \begin{verbatim}
    > setenv VIGRA_PLATFORM Solaris       
    \end{verbatim}

     This variable can be empty.
    
    \end{itemize}
    
    \item specify if and where JPEG and TIFF libraries are installed: \\
    
    \begin{itemize}
    \item edit #$VIGRA_PATH/src/impex/Makefile#: \\
     {\em either} update the 
     paths to the include files for \URL[libjpeg]{http://www.ijg.org/} and 
    \URL[libtiff]{http://www.libtiff.org/} on your 
    system \\
    {\em or} comment out the lines #HAS_JPEG# and #HAS_TIFF#.
    
    \item edit the LIB macro in #$VIGRA_PATH/src/examples/Makefile#: \\
    {\em either} add the 
    paths to the library files \URL[libjpeg.a]{http://www.ijg.org/} and 
    \URL[libtiff.a]{http://www.libtiff.org/} on your 
    system \\
    {\em or} remove -ljpeg and -ltiff.
    
    \end{itemize}
    
    \item build the library and the \Ref{Examples}:
    
    \begin{verbatim}
    > cd $VIGRA_PATH
    > make
    \end{verbatim}
    \end{itemize}
    
    {\bf Windows:}
    
    \begin{itemize}
    \item uncompress and unpack the source distribution
    \item go into the directory #[some path]/vigra/src/#
    \item load the workspace #vigra.dsw# into VisualC++
    \item set #impex# as active project and
    
    \begin{itemize}
    \item specify if and where JPEG and TIFF libraries are installed: \\
    open the dialog Project:Settings:C++:Preprocessor and {\em either} update 
    the paths to the
    include files for \URL[jpeg.lib]{http://www.ijg.org/} and 
    \URL[tiff.lib]{http://www.libtiff.org/} on your 
    system - {\em or} - remove the defines #HasJPEG# and #HasTIFF#.
    
    \item likewise, enter the path to jpeg.lib and tiff.lib in the dialog
    Project:Settings:Link or remove these libraries from the library list (do this for 
    all projects at once)
    
    \item build the project #impex# (that is, the library #vigraimpex.lib#)
    
    \end{itemize}
    \item build the other projects containing the \Ref{Examples} (These programs can be 
    invoked from the command line.)
    \end{itemize}
    
    {\large {\bf Documentation}}
    
    The documentation can be found in #$VIGRA_PATH/doc/#, the start file is 
    #$VIGRA_PATH/doc/index.html# (this file).
    
*/
//@{

//@Include: ../include/vigra/utilities.hxx ../include/vigra/numerictraits.hxx 

//@Include: ../include/vigra/stdimage.hxx 

/** @name Import and Export
    There are two fundamentally different approaches to interfacing between 
    VIGRA and the rest of the world.
    
    {\bf If you already have an image data type in your system:}
    
    Then I recommend using VIGRA's algorithms directly on top of your
    data type. To do this, you have to provide image iterators and 
    accessors. In many cases, the standard implementations \Ref{ImageIterator}
    and \Ref{StandardAccessor} coming with VIGRA will be applicable. Otherwise,
    you have to write your own versions which isn't very difficult 
    (look at the code of the above implementations for guidance). 
    
    Alternatively, you may use the \Ref{Image Data Structures} provided within 
    VIGRA and convert your data type into one of them. Take a look at
    \Ref{viffToScalarImage} and \Ref{createScalarViffImage} to see how this 
    might be done.
    
    {\bf If you don't have an image data type in your system:}
    
    Use the \Ref{Image Data Structures} provided within VIGRA and use one of the
    import/export facilities above.
    
    @memo Conversion from and to other image data types
*/
//@{

//@Include: ../include/vigra/impex.hxx 
//@Include: ../include/vigra/lug.hxx 
//@Include: ../include/vigra/viff.hxx 

//@}


/** @name Image processing
    @memo Including image arithmetic, convolution, morphology 
*/
//@{

//@Include: ../include/vigra/stdimagefunctions.hxx
//@Include: ../include/vigra/convolution.hxx 
//@Include: ../include/vigra/flatmorphology.hxx

//@}

/** @name Image analysis

    {\bf See also:} \Ref{Functors To Inspect Images} and \Ref{Threshold}

    @memo Segmentation and feature extraction 
*/
//@{

//@Include: ../include/vigra/labelimage.hxx ../include/vigra/localminmax.hxx 
//@Include: ../include/vigra/distancetransform.hxx 
//@Include: ../include/vigra/edgedetection.hxx 

//@Include: ../include/vigra/cornerdetection.hxx 
//@Include: ../include/vigra/seededregiongrowing.hxx 
//Include: ../include/vigra/morphological_appropriate_scale.hxx
//Include: ../include/vigra/feature_adjacency_graph.hxx

//@}

//Include: index_extensions.dxx
//@Include: examples.dxx

/** @name \URL[Installation]{#installation}
*/


//@}
