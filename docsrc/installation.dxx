/** \page Installation Installation

    VIGRA can be downloaded from <a href="http://hci.iwr.uni-heidelberg.de/vigra/">http://hci.iwr.uni-heidelberg.de/vigra/</a>. It should work with any standard conforming C++ compiler on both 32-bit and 64-bit machines.
    
    VIGRA is mainly a header library, i.e. much of its functionality can be accessed by simply copying the include files to a convenient location. A more involved build process is necessary for image file import and export, for the VIGRA Python bindings, and for the test suite and examples. VIGRA can take advantage of the following external libraries:
    
    <ul>
    <li> <a href="http://www.ijg.org/">libjpeg</a>, <a href="http://www.libtiff.org/">libtiff</a>,
         <a href="http://www.libpng.org/">libpng</a> for reading and writing JPEG, TIFF, and PNG 
         images.
    <li> <a href="http://www.hdfgroup.org/HDF5/">HDF5</a> for reading and writing HDF5 files (storage of MultiArray and RandomForest)
    <li> <a href="http://www.fftw.org/">libfftw</a> for fast Fourier transforms
    <li> <a href="http://www.python.org/">Python</a>, <a href="http://www.boost.org/">boost_python</a>, and <a href="http://numpy.scipy.org/">numpy</a> for the VIGRA Python bindings.
    </ul>

    These dependencies are optional - the functionality will simply be unavailable if the libraries cannot be found.
    
    VIGRA installation is based on <a href="http://www.cmake.org/">cmake</a>. In order to configure the build and installation process, execute the following on the command line:

    
    \code
    > mkdir <vigra_build_path>       
    > cd <vigra_build_path>       
    > cmake [options] <vigra_source_path>
    > make          # build (Linux/Unix and MinGW only)
    > make check    # compile and run tests (optional, Linux/Unix and MinGW only)
    > make doc      # generate documentation (Linux/Unix and MinGW only)
    > make install  # install (Linux/Unix and MinGW only)
    > make examples # build examples (optional, Linux/Unix and MinGW only)
    \endcode
    
    If you use Microsoft Visual C++, you just execute cmake (not make) which creates a solution file '<vigra_build_path>/vigra.sln'. This file must be opened in Visual Studio, and the projects 'ALL_BUILD', 'check', 'doc', 'INSTALL', and 'examples' should be generated. <b>Important note</b>: If you include <b>"windows.h"</b> in your projects: there are some name clashes with VIGRA -- always include <b>"vigra/windows.h"</b> instead.
    
    cmake [options] customize installation directories and guide cmake in its search for the VIGRA dependencies. On a Linux system, it is often possible to configure without any options. The most commonly used options are:
    
    <DL>
    <DT> -DCMAKE_INSTALL_PREFIX=&lt;path&gt;
         <DD> where to install VIGRA (binaries will be installed in &lt;path&gt;/bin, libraries in 
         &lt;path&gt;/lib, headers in &lt;path&gt;/include/vigra, and documentation in 
         &lt;path&gt;/doc/vigra and &lt;path&gt;/doc/vigranumpy, default is platform dependent)
    <DT> -DDEPENDENCY_SEARCH_PREFIX=&lt;path1&gt;[;&lt;path2&gt;...]
         <DD> where to look for VIGRA dependencies (for every given path, cmake will search for 
         libraries in &lt;path&gt;/lib and for headers in &lt;path&gt;/include)
    <DT> -DDOCDIR=&lt;path&gt;
         <DD> where to generate VIGRA decumentation (default: &lt;vigra_source_path&gt;/doc)
    <DT> -DWITH_VIGRANUMPY=1
         <DD> build VIGRA Python bindings (default: 1). Pass -DWITH_VIGRANUMPY=0 to suppress 
         vigranumpy.
    </DL>

    More fine-grained customization (e.g. specification of explicit paths for all dependencies, customization of compiler flags) is possible by editing the file &lt;vigra_build_path&gt;/CMakeCache.txt. This is best done by means of the interactive programs <b>ccmake</b> or <b>cmake-gui</b>. Consult the <a href="http://www.cmake.org/cmake/help/documentation.html">cmake documentation</a> for more detailed help.
*/
