import re
import glob
import sys

if len(sys.argv) != 3:
    print 'usage: python post.py directory versionNumber'
    sys.exit(1)

# compile the regex patterns needed for heading modification
heading = re.compile(r'<H2>(.*?)</H2>', re.M)
headingArrow = re.compile(r'<A HREF ="#DOC.DOCU" > <IMG BORDER=0 SRC=down.gif></A>')
headingTypedef = re.compile(r'typedef')
headingTemplateClass = re.compile(r'&gt; *class')
headingInheritance = re.compile(r': *(?:private\s*|public\s*).*(\s*)</font>')
headingTemplateSpecialization = re.compile(r'template\s*?&lt;\s*?&gt;')
headingTemplateParameters = re.compile(r'&lt;.*?&gt;')
headingFunctionArguments = re.compile(r'\(.*?\)(\s*)</font>')

# compile the regex patterns needed in the body of the document
body = re.compile(r'<body>', re.I)
callOperator = re.compile(r'operator\)')
tag = re.compile(r'&lt;(math|/math|sup|/sup|sub|/sub)&gt;')
atag = re.compile(r'&lt;[aA] name="(.*?)"&gt;')
umlaut = re.compile(r'&amp;(auml|Auml|ouml|Ouml|uuml|Uuml|szlig|copy);')
squared = re.compile(r'\^{2}')
cube = re.compile(r'\^{3}')
footer = re.compile(r'<P Align=right><I>generated by.*')
stlLink = re.compile(r'WWW_STL_DOCU')
ruler = re.compile(r'<hr>')
docu = re.compile(r' *<h2> (Documentation |Inheritance:)</h2>')
public = re.compile(r'<DT><h3>Public')
arrow = re.compile(r'<IMG BORDER=0 SRC=icon1.gif></A>')

def findHeading(text):
    result = heading.search(text, 1)
    if result == None: 
        return ''
    matchPos = result.regs
    return text[matchPos[0][0]:matchPos[0][1]]

def convertHeading(text):
    # create a table for the heading (with down arrow at left and VIGRA logo at right)
    text = heading.sub(
                  r'<table cellpadding=5 bgcolor="#e0d090">\n<tr>\n\1\n' +
                  r'</font></th>\n' +
                  r'<th align=right ><a href="index.html"><IMG border=0 SRC="documents/vigra3.gif"></a>' +
                  r'</th></tr>\n</table>\n', text)
    text = headingArrow.sub(
                  r'<th align=right valign=top>\n' + 
                  r'<br><A HREF ="#DOC.DOCU" >' +
                  r'<IMG BORDER=0 width=30 height=20 SRC="documents/next_down3.gif"></A>\n' +
                  r'</th>\n<th width=100%><font size="+2">', text)
    
    # simplify heading
    if headingTypedef.search(text): 
        return text   # don't simplify typedef
    if headingTemplateSpecialization.search(text): 
        return text   # don't simplify explicitly specialized templates
    if headingTemplateClass.search(text):
        text = headingInheritance.sub(r'\1</font>', text)   # remove inheritance
        return text                                         # don't further simplify classes
    text = headingTemplateParameters.sub(r'&lt;...&gt', text)  # remove template parameters
    text = headingFunctionArguments.sub(r'(...)\1</font>', text) # remove function arguments
    return text

def convertBody(text):
    text = body.sub(r'<body  bgcolor="#f8f0e0" link="#0040b0" vlink="#a00040">', text, 1)
    text = callOperator.sub(r'operator()', text)
    text = tag.sub(r'<\1>', text)
    text = atag.sub(r'<a name="\1">', text)
    text = umlaut.sub(r'&\1;', text)
    text = squared.sub(r'&#178', text)
    text = cube.sub(r'&#179', text)
    text = footer.sub(r'', text, 1)
    text = stlLink.sub(r'http://www.sgi.com/Technology/STL', text)
    text = ruler.sub(r'<br>', text)
    text = docu.sub(r'<table  bgcolor="#e0d090" width=100% cellpadding=5>\n<tr>\n' +
                    r'<th align=left ><font size=+2> \1 </font></th>\n' +
                    r'<tr>\n</table>', text)
    text = public.sub(r'</DL></DL>\n' +
                  r'<table  bgcolor="#e0d090" width=100% cellpadding=5>\n<tr>\n' +
                  r'<th align=left ><font size=+2> Members </font></th>\n' +
                  r'<tr>\n</table>\n' +
                  r'<DL><DL>\n<DT><h3>Public', text, 1)
    text = arrow.sub(r'<IMG BORDER=0 SRC="documents/next_down3.gif" width=15 height=15></A>', text)
    return text

def convertAIndex(text):
    return re.sub(r'<H2>Variables</H2>', r'<H2>typedefs</H2>', text)
  
def convertIndex(text, version):
    return re.sub(r'VERSION_VERSION_VERSION', version, text)
  
def processFile(fileName):
    print fileName
    f = open(fileName)
    text = f.read()
    f.close()
    
    headingText = findHeading(text)
    newHeadingText = convertHeading(headingText)
    text = heading.sub(newHeadingText, text)
    text = convertBody(text)
    if fileName == str(sys.argv[1]) + '/aindex.html':
        text = convertAIndex(text)
    if fileName == str(sys.argv[1]) + '/index.html':
        text = convertIndex(text, str(sys.argv[2]))
    
    f = open(fileName, 'w+')
    f.write(text)
    f.close()
    

files = glob.glob(str(sys.argv[1]) + '/*.html')
#files = glob.glob('ImageIterator.html')

for file in files:
    processFile(file)


