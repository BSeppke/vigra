import re
import glob
import sys

if len(sys.argv) != 3:
    print 'usage: python post.py directory versionNumber'
    sys.exit(1)

# compile the regex patterns needed for heading modification
heading = re.compile(r'<H2>(.*?)</H2>', re.M)
headingArrow = re.compile(r'<A HREF ="#DOC.DOCU" > <IMG BORDER=0 SRC=down.gif></A>')
headingInline = re.compile(r'\sinline\s+')
headingTypedef = re.compile(r'typedef')
headingTemplateClass = re.compile(r'&gt; *class')
headingLongTemplate = re.compile(r'(template\s&lt;.*?&gt;)(.*?\s*</font>)', re.M)
headingInheritance = re.compile(r': *(?:private\s*|public\s*).*(\s*)</font>')
headingTemplateSpecialization = re.compile(r'template\s*?&lt;\s*?&gt;')
headingTemplateParameters = re.compile(r'&lt;.*?&gt;')
headingFunctionArguments = re.compile(r'\(.*?\)(\s*)</font>')

# compile the regex patterns needed in the body of the document
body = re.compile(r'<body>', re.I)
callOperator = re.compile(r'operator\)')
tag = re.compile(r'&lt;(math|/math|sup|/sup|sub|/sub)&gt;')
atag = re.compile(r'&lt;[aA] name="(.*?)"&gt;')
command = re.compile(r'&amp;(auml|Auml|ouml|Ouml|uuml|Uuml|szlig|copy|nbsp);')
squared = re.compile(r'\^{2}')
cube = re.compile(r'\^{3}')
footer = re.compile(r'<P Align=right><I>generated by.*')
stlLink = re.compile(r'WWW_STL_DOCU')
ruler = re.compile(r'<hr>')
docu = re.compile(r' *<h2> (Documentation|Inheritance) </h2>')
public = re.compile(r'<DL>\s*?<DT><B><BR>Public')
arrow = re.compile(r'<IMG BORDER=0 SRC=icon1.gif></A>')
bullet = re.compile(r'<IMG BORDER=0 SRC=icon[12].gif>')
bullet2 = re.compile(r'<IMG SRC=icon2.gif>')
links = re.compile(r'<I><A HREF="aindex.html"> alphabetic index.*?<br>')
anchor = re.compile(r'(<A NAME=.*?>)\n(<A NAME =.*?>)\n<DT><br>(<IMG.*?>)(.*)\n', re.I)
docanchor = re.compile(r'(<A NAME="DOC.DOCU">\n<br>)', re.I)
href = re.compile(r'<a href=\s*?([^"].*?)>', re.I)

# images
vigraLogo = r'<IMG border=0 ALT="VIGRA" SRC="documents/vigra.gif">'

# some longish replacement strings
tableHeader = r'<table border=0 cellspacing=0 bgcolor="#e0d090" width="100%" cellpadding=5>'
headingTableReplacement = tableHeader + r'\n<tr>\n\1\n' \
               r'</font></th>\n' \
               r'<th align=right ><a href="http://kogs-www.informatik.uni-hamburg.de/~koethe/vigra/">' + vigraLogo + \
               r'</a></th></tr>\n</table>\n'
headingArrowReplacement = r'<th align=left valign=top>\n' \
               r'<A HREF ="#DOC.DOCU" >' \
               r'<IMG BORDER=0 ALT="details" SRC="documents/pfeilGross.gif"></A>\n' \
               r'</th>\n<th><font size="+2">'
docuReplacement = tableHeader + r'\n<tr>\n' \
                  r'<th align=left ><font size="+2"> \1 </font></th>\n' \
                  r'</tr>\n</table>'
publicReplacement = tableHeader + r'\n<tr>\n' \
                    r'<th align=left ><font size="+2"> Member Index </font></th>\n' \
                    r'<td align=right>(click on <IMG ALT="+" SRC="documents/pfeil.gif"> to get details)\n</td>\n' \
                    r'</tr>\n</table>\n' \
                    r'<DL>\n<DT><B><BR>Public'
linkReplacement = r'<p align=right>\n[ <a href="http://kogs-www.informatik.uni-hamburg.de/~koethe/vigra/">VIGRA Homepage</a> |\n' \
                  r' <a href="index.html">Documentation</a> |\n'\
                  r' <a href="aindex.html">Alphabetic Index</a> |\n'\
                  r' <a href="HIER.html">Class Hierarchy</a> ]\n</p>'
bodyReplacement = r'<body  bgcolor="#f8f0e0" link="#0040b0" vlink="#a00040">\n'\
                  r'<basefont face="Helvetica,Arial" size=3>\n' + linkReplacement

def findHeading(text):
    result = heading.search(text, 1)
    if result == None: 
        return ''
    matchPos = result.regs
    return text[matchPos[0][0]:matchPos[0][1]]

def convertHeading(text):
    # create a table for the heading (with down arrow at left and VIGRA logo at right)
    text = heading.sub(headingTableReplacement, text)
    text = headingArrow.sub(headingArrowReplacement, text)
    text = headingInline.sub(' ', text) # don't put inline keyword in headings
    
    # simplify heading
    if headingTypedef.search(text): 
        return text   # don't simplify typedef
    if headingTemplateSpecialization.search(text): 
        return text   # don't simplify explicitly specialized templates
    if headingTemplateClass.search(text):
        text = headingInheritance.sub(r'\1</font>', text)   # remove inheritance
        isTemplate = headingLongTemplate.search(text, 1)
        if isTemplate != None:
          if (isTemplate.regs[0][1] - isTemplate.regs[0][0]) > 80:
            #insert a page break for long templates
            text = headingLongTemplate.sub(r'\1<br>\2', text)
        return text                                         # don't further simplify classes
    text = headingTemplateParameters.sub(r'&lt;...&gt', text)  # remove template parameters
    text = headingFunctionArguments.sub(r'(...)\1</font>', text) # remove function arguments
    return text

def fixDocBaselinkSection(text):
    matchPos = re.match(r'<H3>Inherited from <A HREF=".*?"', text).regs
    end = matchPos[0][1]
    link = re.sub(r'<H3>Inherited from <A HREF="(.*?)"', r'\1', text[0:end])
    text = re.sub(r'<A HREF="(#DOC.*?)">', r'<A HREF="' + link + r'\1">', text)
    return text

def fixDocBaselinkBug(text):
    res = re.search(r'<H3>Inherited from <A HREF=.*?(?=<H3>Inherited from <A HREF=|<A NAME="DOC.DOCU">)', text, re.S)
    if res != None:
        newText = ''
        lastEnd = 0
        start = 0
        end = 0
        for matchPos in res.regs:
            start = matchPos[0]
            end = matchPos[1]
            newText = newText + text[lastEnd:start]
            section = text[start:end]
            newSection = fixDocBaselinkSection(section)
            newText = newText + newSection
            lastEnd = end
        text = newText + text[lastEnd:]
    return text

def convertBody(text):
    text = body.sub(bodyReplacement, text, 1)
    text = callOperator.sub(r'operator()', text)
    text = tag.sub(r'<\1>', text)
    text = atag.sub(r'<a name="\1">', text)
    text = command.sub(r'&\1;', text)
    text = squared.sub(r'&#178', text)
    text = cube.sub(r'&#179', text)
    text = footer.sub(r'', text, 1)
    text = stlLink.sub(r'http://www.sgi.com/Technology/STL', text)
    text = ruler.sub(r'<br>', text)
    text = docu.sub(docuReplacement, text)
    text = public.sub(publicReplacement, text, 1)
    text = arrow.sub(r'<IMG BORDER=0 ALT="+" SRC="documents/pfeil.gif"></A>', text)
    text = bullet.sub(r'<IMG BORDER=0 ALT="-" SRC="documents/bullet.gif">', text)
    text = bullet2.sub('', text)
    text = links.sub(r'<p align=center>\n' + linkReplacement, text)
    text = anchor.sub(r'<DT>\2<br></a>\n\1\3</A>\4\n', text)
    text = docanchor.sub(r'\1</A>', text, 1)
    text = href.sub(r'<A HREF="\1">', text)

    text = fixDocBaselinkBug(text)
    return text
    
def convertAIndex(text):
    text = re.sub(r'<A HREF.*?>(<A HREF.*?</A>)</A>', r'\1', text)
    text = re.sub(r'<A HREF="#installation">', r'<A HREF="index.html#installation">', text)
    text = re.sub(r'<UL>\s.?</UL>', r'', text)
    text = re.sub(r'<H2>Variables</H2>', r'<H2>Typedefs</H2>', text)
    text = re.sub(r'<H2>Functions, Macros</H2>', r'<H2>Functions</H2>', text)
    text = re.sub(r'<H2>Enums, Unions, Structs</H2>', r'<H2>Enums</H2>', text)
    text = re.sub(r'<H1>Table of contents</H1>', 
                   tableHeader + r'\n<tr>\n' \
                   r'<th align=left><font size="+3">Table of Contents</font></th>\n' \
                   r'<th align=right ><a href="index.html">' + vigraLogo + \
                   r'</a>\n</tr>\n</table>' \
                   r'<p align=right>\n[ <A href="#General">General</A> | ' \
                   r'<A href="#Classes">Classes</A> | ' \
                   r'<A href="#Functions">Functions</A> | ' \
                   r'<A href="#Typedefs">Typedefs</A> | ' \
                   r'<A href="#Enums">Enums</A> ]\n</p>\n',
                   text)
    text = re.sub(r'<H2>(.*?)</H2>', r'<A NAME="\1"><br></A>\n' + docuReplacement, text)
    return text
  
def convertHIER(text):
    text = re.sub(r'<H1>(.*?)</H1>', 
                   tableHeader + r'\n<tr>\n' \
                   r'<th align=left><font size="+3">\1</font></th>\n' \
                   r'<th align=right ><a href="index.html">' + vigraLogo + \
                   r'</a>\n</tr>\n</table>',
                   text)
    return text
  
def convertVersion(text, version):
    return re.sub(r'VERSION_VERSION_VERSION', version, text)
  
def processFile(fileName):
    print fileName
    f = open(fileName)
    text = f.read()
    f.close()
    
    text = convertBody(text)
    text = convertVersion(text, str(sys.argv[2]))
        
    if fileName == str(sys.argv[1]) + '/aindex.html':
        text = convertAIndex(text)
    elif fileName == str(sys.argv[1]) + '/HIER.html':
        text = convertHIER(text)
    else:
        headingText = findHeading(text)
        newHeadingText = convertHeading(headingText)
        text = heading.sub(newHeadingText, text)  
#    print text  
    f = open(fileName, 'w+')
    f.write(r'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">')
    f.write(text)
    f.close()
    

files = glob.glob(str(sys.argv[1]) + '/*.html')
#files = glob.glob(str(sys.argv[1]) + '/ImageIterator.html')
#files = glob.glob('K.html')

for file in files:
    processFile(file)


