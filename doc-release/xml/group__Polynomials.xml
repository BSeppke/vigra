<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="group__Polynomials" kind="group">
    <compoundname>Polynomials</compoundname>
    <title>Polynomials and root determination</title>
    <innerclass refid="classvigra_1_1Polynomial" prot="public">vigra::Polynomial</innerclass>
    <innerclass refid="classvigra_1_1PolynomialView" prot="public">vigra::PolynomialView</innerclass>
    <innerclass refid="classvigra_1_1StaticPolynomial" prot="public">vigra::StaticPolynomial</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Polynomials_1gafdc4f470cee357d53e7db7d40450fde5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class POLYNOMIAL</type>
          </param>
          <param>
            <type>class VECTOR</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vigra::polynomialRealRoots</definition>
        <argsstring>(POLYNOMIAL const &amp;p, VECTOR &amp;roots, bool polishRoots)</argsstring>
        <name>polynomialRealRoots</name>
        <param>
          <type>POLYNOMIAL const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>VECTOR &amp;</type>
          <declname>roots</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>polishRoots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the real roots of the polynomial <computeroutput>p</computeroutput>.</para><para>This function simply calls <ref refid="group__Polynomials_1gaf46ab7ff907f8abcaccdb43990c4df6b" kindref="member">polynomialRoots()</ref> and than throws away all complex roots. Accordingly, <computeroutput>VECTOR</computeroutput> must be compatible to <computeroutput>std::vector</computeroutput> with a <computeroutput>value_type</computeroutput> compatible to the type <computeroutput>POLYNOMIAL::Real</computeroutput>.</para><para><bold> Declaration:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>POLYNOMIAL,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VECTOR&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__Polynomials_1gafdc4f470cee357d53e7db7d40450fde5" kindref="member">polynomialRealRoots</ref>(POLYNOMIAL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>p,<sp/>VECTOR<sp/>&amp;<sp/>roots,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>polishRoots<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold> <verbatim>&lt;b&gt;\#include&lt;/b&gt; \&lt;vigra/polynomial.hxx\&gt;&lt;br&gt;
Namespace: vigra
</verbatim></para><para><programlisting><codeline><highlight class="comment">//<sp/>encode<sp/>the<sp/>polynomial<sp/><sp/>x^4<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Polynomial&lt;double&gt;<sp/>poly(4);</highlight></codeline>
<codeline><highlight class="normal">poly[0]<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline><highlight class="normal">poly[4]<sp/>=<sp/><sp/>1.0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ArrayVector&lt;double&gt;<sp/>roots;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__Polynomials_1gafdc4f470cee357d53e7db7d40450fde5" kindref="member">polynomialRealRoots</ref>(poly,<sp/>roots);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="group__MatrixAlgebra_1gab5d356993a9ed3f962643029709b40c2" kindref="member">polynomialRealRootsEigenvalueMethod()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/polynomial.hxx" line="1078" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/polynomial.hxx" bodystart="1077" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="group__Polynomials_1ga934c5c4b3be9d4f1374e924d89730f60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class POLYNOMIAL</type>
          </param>
          <param>
            <type>class VECTOR</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vigra::polynomialRealRoots</definition>
        <argsstring>(POLYNOMIAL const &amp;poriginal, VECTOR &amp;roots)</argsstring>
        <name>polynomialRealRoots</name>
        <param>
          <type>POLYNOMIAL const &amp;</type>
          <declname>poriginal</declname>
        </param>
        <param>
          <type>VECTOR &amp;</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/polynomial.hxx" line="1092" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/polynomial.hxx" bodystart="1091" bodyend="1094"/>
      </memberdef>
      <memberdef kind="function" id="group__Polynomials_1gaf46ab7ff907f8abcaccdb43990c4df6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class POLYNOMIAL</type>
          </param>
          <param>
            <type>class VECTOR</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vigra::polynomialRoots</definition>
        <argsstring>(POLYNOMIAL const &amp;poriginal, VECTOR &amp;roots, bool polishRoots)</argsstring>
        <name>polynomialRoots</name>
        <param>
          <type>POLYNOMIAL const &amp;</type>
          <declname>poriginal</declname>
        </param>
        <param>
          <type>VECTOR &amp;</type>
          <declname>roots</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>polishRoots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine the roots of the polynomial <computeroutput>poriginal</computeroutput>.</para><para>The roots are appended to the vector <computeroutput>roots</computeroutput>, with optional root polishing as specified by <computeroutput>polishRoots</computeroutput> (default: do polishing). The function uses an improved version of Laguerre&apos;s algorithm. The improvements are as follows:</para><para><itemizedlist>
<listitem>
<para>It uses a clever initial guess for the iteration, according to a proposal by Tien Chen </para></listitem>
<listitem>
<para>It estimates each root&apos;s multiplicity, again according to Tien Chen, and reduces multiplicity by switching to the polynomial&apos;s derivative (which has the same root, with multiplicity reduced by one), as proposed by C. Bond. </para></listitem>
</itemizedlist>
</para><para>The algorithm has been successfully used for polynomials up to order 80. The function stops and returns <computeroutput>false</computeroutput> if an iteration fails to converge within 80 steps. The type <computeroutput>POLYNOMIAL</computeroutput> must be compatible to <ref refid="classvigra_1_1PolynomialView" kindref="compound">vigra::PolynomialView</ref>, <computeroutput>VECTOR</computeroutput> must be compatible to <computeroutput>std::vector</computeroutput> with a <computeroutput>value_type</computeroutput> compatible to the type <computeroutput>POLYNOMIAL::Complex</computeroutput>.</para><para><bold> Declaration:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>POLYNOMIAL,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VECTOR&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__Polynomials_1gaf46ab7ff907f8abcaccdb43990c4df6b" kindref="member">polynomialRoots</ref>(POLYNOMIAL<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>poriginal,<sp/>VECTOR<sp/>&amp;<sp/>roots,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>polishRoots<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold> <verbatim>&lt;b&gt;\#include&lt;/b&gt; \&lt;vigra/polynomial.hxx\&gt;&lt;br&gt;
Namespace: vigra
</verbatim></para><para><programlisting><codeline><highlight class="comment">//<sp/>encode<sp/>the<sp/>polynomial<sp/><sp/>x^4<sp/>-<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Polynomial&lt;double&gt;<sp/>poly(4);</highlight></codeline>
<codeline><highlight class="normal">poly[0]<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline><highlight class="normal">poly[4]<sp/>=<sp/><sp/>1.0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ArrayVector&lt;std::complex&lt;double&gt;<sp/>&gt;<sp/>roots;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__Polynomials_1gaf46ab7ff907f8abcaccdb43990c4df6b" kindref="member">polynomialRoots</ref>(poly,<sp/>roots);</highlight></codeline>
</programlisting></para><para><simplesect kind="see"><para><ref refid="group__MatrixAlgebra_1ga8beeff7149550f26996388e3450ab402" kindref="member">polynomialRootsEigenvalueMethod()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/polynomial.hxx" line="940" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/polynomial.hxx" bodystart="939" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="group__Polynomials_1ga583d430084a2054b766355f8d8539f7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class POLYNOMIAL</type>
          </param>
          <param>
            <type>class VECTOR</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool vigra::polynomialRoots</definition>
        <argsstring>(POLYNOMIAL const &amp;poriginal, VECTOR &amp;roots)</argsstring>
        <name>polynomialRoots</name>
        <param>
          <type>POLYNOMIAL const &amp;</type>
          <declname>poriginal</declname>
        </param>
        <param>
          <type>VECTOR &amp;</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/polynomial.hxx" line="1037" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/polynomial.hxx" bodystart="1036" bodyend="1039"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Classes to represent polynomials and functions to find polynomial roots. </para>    </detaileddescription>
  </compounddef>
</doxygen>
