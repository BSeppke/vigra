<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="functorexpression_8hxx" kind="file">
    <compoundname>functorexpression.hxx</compoundname>
    <includedby refid="axistags_8hxx" local="yes">vigra/axistags.hxx</includedby>
    <includedby refid="resampling__convolution_8hxx" local="yes">vigra/resampling_convolution.hxx</includedby>
    <includedby refid="edgedetection_8hxx" local="yes">vigra/edgedetection.hxx</includedby>
    <includedby refid="multi__convolution_8hxx" local="yes">vigra/multi_convolution.hxx</includedby>
    <includedby refid="multi__distance_8hxx" local="yes">vigra/multi_distance.hxx</includedby>
    <includedby refid="multi__morphology_8hxx" local="yes">vigra/multi_morphology.hxx</includedby>
    <includedby refid="noise__normalization_8hxx" local="yes">vigra/noise_normalization.hxx</includedby>
    <includedby refid="rf__decisionTree_8hxx" local="yes">vigra/random_forest/rf_decisionTree.hxx</includedby>
    <includedby refid="rf__nodeproxy_8hxx" local="yes">vigra/random_forest/rf_nodeproxy.hxx</includedby>
    <includedby refid="rf__region_8hxx" local="yes">vigra/random_forest/rf_region.hxx</includedby>
    <includedby refid="rf__split_8hxx" local="yes">vigra/random_forest/rf_split.hxx</includedby>
    <includedby refid="regression_8hxx" local="yes">vigra/regression.hxx</includedby>
    <includedby refid="random__forest_8hxx" local="yes">vigra/random_forest.hxx</includedby>
    <includedby refid="random__forest__deprec_8hxx" local="yes">vigra/random_forest_deprec.hxx</includedby>
    <includedby refid="slanted__edge__mtf_8hxx" local="yes">vigra/slanted_edge_mtf.hxx</includedby>
    <includedby refid="watersheds_8hxx" local="yes">vigra/watersheds.hxx</includedby>
    <invincdepgraph>
      <node id="2360">
        <label>vigra/symmetry.hxx</label>
        <link refid="symmetry_8hxx_source"/>
      </node>
      <node id="2351">
        <label>vigra/resizeimage.hxx</label>
        <link refid="resizeimage_8hxx_source"/>
        <childnode refid="2352" relation="include">
        </childnode>
        <childnode refid="2366" relation="include">
        </childnode>
      </node>
      <node id="2370">
        <label>vigra/noise_normalization.hxx</label>
        <link refid="noise__normalization_8hxx_source"/>
      </node>
      <node id="2377">
        <label>vigra/random_forest/rf_region.hxx</label>
        <link refid="rf__region_8hxx_source"/>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
      <node id="2346">
        <label>vigra/numpy_array_taggedshape.hxx</label>
        <link refid="numpy__array__taggedshape_8hxx_source"/>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
      </node>
      <node id="2366">
        <label>vigra/multi_resize.hxx</label>
        <link refid="multi__resize_8hxx_source"/>
      </node>
      <node id="2375">
        <label>vigra/random_forest/rf_split.hxx</label>
        <link refid="rf__split_8hxx_source"/>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
      <node id="2373">
        <label>vigra/random_forest_hdf5_impex.hxx</label>
        <link refid="random__forest__hdf5__impex_8hxx_source"/>
      </node>
      <node id="2352">
        <label>vigra/stdimagefunctions.hxx</label>
        <link refid="stdimagefunctions_8hxx_source"/>
        <childnode refid="2353" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2362" relation="include">
        </childnode>
        <childnode refid="2363" relation="include">
        </childnode>
      </node>
      <node id="2364">
        <label>vigra/watersheds3d.hxx</label>
        <link refid="watersheds3d_8hxx_source"/>
      </node>
      <node id="2355">
        <label>vigra/boundarytensor.hxx</label>
        <link refid="boundarytensor_8hxx_source"/>
      </node>
      <node id="2357">
        <label>vigra/edgedetection.hxx</label>
        <link refid="edgedetection_8hxx_source"/>
        <childnode refid="2358" relation="include">
        </childnode>
      </node>
      <node id="2354">
        <label>vigra/convolution.hxx</label>
        <link refid="convolution_8hxx_source"/>
        <childnode refid="2355" relation="include">
        </childnode>
        <childnode refid="2356" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2359" relation="include">
        </childnode>
        <childnode refid="2360" relation="include">
        </childnode>
        <childnode refid="2361" relation="include">
        </childnode>
      </node>
      <node id="2353">
        <label>vigra/nonlineardiffusion.hxx</label>
        <link refid="nonlineardiffusion_8hxx_source"/>
        <childnode refid="2354" relation="include">
        </childnode>
      </node>
      <node id="2349">
        <label>vigra/numpy_array_converters.hxx</label>
        <link refid="numpy__array__converters_8hxx_source"/>
      </node>
      <node id="2350">
        <label>vigra/resampling_convolution.hxx</label>
        <link refid="resampling__convolution_8hxx_source"/>
        <childnode refid="2351" relation="include">
        </childnode>
      </node>
      <node id="2358">
        <label>vigra/slanted_edge_mtf.hxx</label>
        <link refid="slanted__edge__mtf_8hxx_source"/>
      </node>
      <node id="2367">
        <label>vigra/multi_convolution.hxx</label>
        <link refid="multi__convolution_8hxx_source"/>
      </node>
      <node id="2379">
        <label>vigra/random_forest_deprec.hxx</label>
        <link refid="random__forest__deprec_8hxx_source"/>
      </node>
      <node id="2376">
        <label>vigra/random_forest/rf_ridge_split.hxx</label>
        <link refid="rf__ridge__split_8hxx_source"/>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
      <node id="2374">
        <label>vigra/random_forest/rf_nodeproxy.hxx</label>
        <link refid="rf__nodeproxy_8hxx_source"/>
        <childnode refid="2371" relation="include">
        </childnode>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
      <node id="2372">
        <label>vigra/random_forest.hxx</label>
        <link refid="random__forest_8hxx_source"/>
        <childnode refid="2373" relation="include">
        </childnode>
      </node>
      <node id="2378">
        <label>vigra/regression.hxx</label>
        <link refid="regression_8hxx_source"/>
        <childnode refid="2376" relation="include">
        </childnode>
      </node>
      <node id="2345">
        <label>vigra/axistags.hxx</label>
        <link refid="axistags_8hxx_source"/>
        <childnode refid="2346" relation="include">
        </childnode>
      </node>
      <node id="2371">
        <label>vigra/random_forest/rf_decisionTree.hxx</label>
        <link refid="rf__decisionTree_8hxx_source"/>
        <childnode refid="2372" relation="include">
        </childnode>
      </node>
      <node id="2368">
        <label>vigra/multi_distance.hxx</label>
        <link refid="multi__distance_8hxx_source"/>
        <childnode refid="2369" relation="include">
        </childnode>
      </node>
      <node id="2361">
        <label>vigra/tv_filter.hxx</label>
        <link refid="tv__filter_8hxx_source"/>
      </node>
      <node id="2369">
        <label>vigra/multi_morphology.hxx</label>
        <link refid="multi__morphology_8hxx_source"/>
      </node>
      <node id="2362">
        <label>vigra/seededregiongrowing.hxx</label>
        <link refid="seededregiongrowing_8hxx_source"/>
        <childnode refid="2363" relation="include">
        </childnode>
        <childnode refid="2365" relation="include">
        </childnode>
      </node>
      <node id="2363">
        <label>vigra/seededregiongrowing3d.hxx</label>
        <link refid="seededregiongrowing3d_8hxx_source"/>
        <childnode refid="2364" relation="include">
        </childnode>
      </node>
      <node id="2359">
        <label>vigra/gradient_energy_tensor.hxx</label>
        <link refid="gradient__energy__tensor_8hxx_source"/>
      </node>
      <node id="2347">
        <label>vigra/numpy_array_traits.hxx</label>
        <link refid="numpy__array__traits_8hxx_source"/>
        <childnode refid="2348" relation="include">
        </childnode>
      </node>
      <node id="2365">
        <label>vigra/watersheds.hxx</label>
        <link refid="watersheds_8hxx_source"/>
        <childnode refid="2364" relation="include">
        </childnode>
      </node>
      <node id="2344">
        <label>vigra/functorexpression.hxx</label>
        <link refid="functorexpression.hxx"/>
        <childnode refid="2345" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2367" relation="include">
        </childnode>
        <childnode refid="2368" relation="include">
        </childnode>
        <childnode refid="2369" relation="include">
        </childnode>
        <childnode refid="2370" relation="include">
        </childnode>
        <childnode refid="2371" relation="include">
        </childnode>
        <childnode refid="2374" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
        <childnode refid="2379" relation="include">
        </childnode>
        <childnode refid="2358" relation="include">
        </childnode>
        <childnode refid="2365" relation="include">
        </childnode>
      </node>
      <node id="2356">
        <label>vigra/cornerdetection.hxx</label>
        <link refid="cornerdetection_8hxx_source"/>
      </node>
      <node id="2348">
        <label>vigra/numpy_array.hxx</label>
        <link refid="numpy__array_8hxx_source"/>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>1998-2002<sp/>by<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_FUNCTOREXPRESSION_HXX<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_FUNCTOREXPRESSION_HXX<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">/**<sp/>\page<sp/>FunctorExpressions<sp/>Functor<sp/>Expressions<sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>Simple<sp/>automatic<sp/>functor<sp/>creation<sp/>by<sp/>means<sp/>of<sp/>expression<sp/>templates</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>(also<sp/>known<sp/>as<sp/>a<sp/>&quot;lambda<sp/>library&quot;).<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/functorexpression.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra::functor</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;<sp/>Motivation&lt;/b&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>Many<sp/>generic<sp/>algorithms<sp/>are<sp/>made<sp/>more<sp/>flexible<sp/>by<sp/>means<sp/>of<sp/>functors</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>which<sp/>define<sp/>part<sp/>of<sp/>the<sp/>algorithms&apos;<sp/>behavior<sp/>according<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>needs<sp/>of<sp/>a<sp/>specific<sp/>situation.<sp/>For<sp/>example,<sp/>we<sp/>can<sp/>apply<sp/>an<sp/>exponential</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>each<sp/>pixel<sp/>by<sp/>passing<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>&lt;TT&gt;exp&lt;/TT&gt;<sp/>function<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>&lt;TT&gt;transformImage()&lt;/TT&gt;:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::FImage<sp/>src(w,h),<sp/>dest(w,h);</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>...<sp/>//<sp/>fill<sp/>src</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::transformImage(srcImageRange(src),<sp/>destImage(dest),<sp/>&amp;exp);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>However,<sp/>this<sp/>only<sp/>works<sp/>for<sp/>simple<sp/>operations.<sp/>If<sp/>we<sp/>wanted<sp/>to<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>apply<sp/>the<sp/>exponential<sp/>to<sp/>a<sp/>scaled<sp/>pixel<sp/>value<sp/>(i.e.<sp/>we<sp/>want<sp/>to<sp/>execute</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;TT&gt;exp(-beta*v)&lt;/TT&gt;),<sp/>we<sp/>first<sp/>need<sp/>to<sp/>implement<sp/>a<sp/>new<sp/>functor:</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Exponential</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exponential(double<sp/>b)</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>beta(b)</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>PixelType&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PixelType<sp/>operator()(PixelType<sp/>const&amp;<sp/>v)<sp/>const</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>exp(-beta*v);</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>beta;</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>functor<sp/>would<sp/>be<sp/>used<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>beta<sp/>=<sp/><sp/>...;</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::transformImage(srcImageRange(src),<sp/>destImage(dest),<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exponential(beta));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/>However,<sp/>this<sp/>approach<sp/>has<sp/>some<sp/>disadvantages:</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;UL&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>Writing<sp/>a<sp/>functor<sp/>is<sp/>more<sp/>work<sp/>then<sp/>simply<sp/>program<sp/>the<sp/>loop</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directly,<sp/>i.e.<sp/>non-generically.<sp/>Programmers<sp/>will<sp/>tend<sp/>to</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avoid<sp/>generic<sp/>constructs,<sp/>if<sp/>they<sp/>require<sp/>so<sp/>much<sp/>writing.<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>Often,<sp/>functors<sp/>are<sp/>only<sp/>needed<sp/>for<sp/>a<sp/>single<sp/>expression.<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>is<sp/>not<sp/>desirable<sp/>to<sp/>get<sp/>into<sp/>the<sp/>trouble<sp/>of<sp/>introducing<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>documenting<sp/>a<sp/>new<sp/>class<sp/>if<sp/>that<sp/>class<sp/>is<sp/>used<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>Functors<sp/>cannot<sp/>be<sp/>implemented<sp/>directly<sp/>at<sp/>the<sp/>point<sp/>of<sp/>use.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thus,<sp/>to<sp/>find<sp/>out<sp/>exactly<sp/>what<sp/>a<sp/>functor<sp/>is<sp/>doing,<sp/>one<sp/>needs</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>look<sp/>somewhere<sp/>else.<sp/>This<sp/>complicates<sp/>use<sp/>and<sp/>maintenance</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ot<sp/>generic<sp/>code.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/UL&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/>Therefore,<sp/>it<sp/>is<sp/>necessary<sp/>to<sp/>provide<sp/>a<sp/>means<sp/>to<sp/>generate<sp/>functors<sp/>on<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>fly<sp/>where<sp/>they<sp/>are<sp/>needed.<sp/>The<sp/>C++<sp/>standard<sp/>library<sp/>contains<sp/>so<sp/>called</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/>&quot;functor<sp/>combinators&quot;<sp/>that<sp/>allow<sp/>to<sp/>construct<sp/>complicated<sp/>functors<sp/>from<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/>simpler<sp/>ones.<sp/>The<sp/>above<sp/>problem<sp/>&quot;apply<sp/>&lt;TT&gt;exp(-beta*v)&lt;/TT&gt;<sp/>to<sp/>every<sp/>pixel&quot;</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/>would<sp/>be<sp/>solved<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>beta<sp/>=<sp/>...;</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::transformImage(srcImageRange(src),<sp/>destImage(dest),<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::compose1(std::ptr_fun(exp),</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::bind1st(std::multiplies&lt;float&gt;(),<sp/>-beta)));</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/>I<sp/>won&apos;t<sp/>go<sp/>into<sp/>details<sp/>on<sp/>how<sp/>this<sp/>works.<sp/>Suffice<sp/>it<sp/>to<sp/>say<sp/>that</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/>this<sp/>technique<sp/>requires<sp/>a<sp/>functional<sp/>programming<sp/>style<sp/>that<sp/>is<sp/>unfamiliar</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>many<sp/>programmers,<sp/>and<sp/>thus<sp/>leads<sp/>to<sp/>code<sp/>that<sp/>is<sp/>difficult<sp/>to<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/>understand.<sp/>Moreover,<sp/>this<sp/>technique<sp/>has<sp/>some<sp/>limitations<sp/>that<sp/>prevent<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/>certain<sp/>expressions<sp/>from<sp/>being<sp/>implementable<sp/>this<sp/>way.<sp/>Therefore,<sp/>VIGRA</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/>provides<sp/>a<sp/>better<sp/>and<sp/>simpler<sp/>means<sp/>to<sp/>create<sp/>functors<sp/>on<sp/>the<sp/>fly.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;<sp/>Automatic<sp/>Functor<sp/>Creation&lt;/b&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>Automatic<sp/>functor<sp/>creation<sp/>in<sp/>VIGRA<sp/>is<sp/>based<sp/>on<sp/>a<sp/>technique<sp/>called</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://extreme.indiana.edu/~tveldhui/papers/Expression-Templates/exprtmpl.html&quot;&gt;Expression<sp/>Templates&lt;/a&gt;.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>means<sp/>that<sp/>C++<sp/>operators<sp/>are</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/>overloaded<sp/>so<sp/>that<sp/>they<sp/>don&apos;t<sp/>execute<sp/>the<sp/>specified<sp/>operation<sp/>directly,<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>instead<sp/>produce<sp/>a<sp/>functor<sp/>which<sp/>will<sp/>later<sp/>calculate<sp/>the<sp/>result.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>technique<sp/>has<sp/>the<sp/>big<sp/>advantage<sp/>that<sp/>the<sp/>familiar<sp/>operator<sp/>notation</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/>can<sp/>be<sp/>used,<sp/>while<sp/>all<sp/>the<sp/>flexibility<sp/>of<sp/>generic<sp/>programming<sp/>is<sp/>preserved.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>above<sp/>problem<sp/>&quot;apply<sp/>&lt;TT&gt;exp(-beta*v)&lt;/TT&gt;<sp/>to<sp/>every<sp/>pixel&quot;<sp/>will<sp/>be<sp/>solved</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::functor;</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>beta<sp/>=<sp/>...;</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/>transformImage(srcImageRange(src),<sp/>destImage(dest),<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp(Param(-beta)*Arg1()));</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/>Here,<sp/>four<sp/>expression<sp/>templates<sp/>have<sp/>been<sp/>used<sp/>to<sp/>create<sp/>the<sp/>desired</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>functor:</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DL&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;&lt;TT&gt;Param(-beta):&lt;/TT&gt;&lt;/b&gt;&lt;DD&gt;<sp/>creates<sp/>a<sp/>functor<sp/>that<sp/>represents<sp/>a<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/>(&lt;TT&gt;-beta&lt;/TT&gt;<sp/>in<sp/>this<sp/>case)</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;&lt;TT&gt;Arg1():&lt;/TT&gt;&lt;/b&gt;&lt;DD&gt;<sp/>represents<sp/>the<sp/>first<sp/>argument<sp/>of<sp/>the<sp/>expression<sp/>(i.e.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>pixels<sp/>of<sp/>image<sp/>&lt;TT&gt;src&lt;/TT&gt;<sp/>in<sp/>the<sp/>example).<sp/>Likewise,<sp/>&lt;TT&gt;Arg2()&lt;/TT&gt;<sp/>and</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;TT&gt;Arg3()&lt;/TT&gt;<sp/>are<sp/>defined<sp/>to<sp/>represent<sp/>more<sp/>arguments.<sp/>These<sp/>are<sp/>needed</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>algorithms<sp/>that<sp/>have<sp/>multiple<sp/>input<sp/>images,<sp/>such<sp/>as</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\ref<sp/>combineTwoImages()<sp/>and<sp/>\ref<sp/>combineThreeImages().</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;*<sp/>(multiplication):&lt;/b&gt;&lt;DD&gt;<sp/>creates<sp/>a<sp/>functor<sp/>that<sp/>returns<sp/>the<sp/>product<sp/>of</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>its<sp/>arguments.<sp/>Likewise,<sp/>the<sp/>other<sp/>C++<sp/>operators<sp/>(i.e.<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;TT&gt;+,<sp/>-,<sp/>*,<sp/>/,<sp/>%,<sp/>==,<sp/>!=,<sp/>&lt;,<sp/>&lt;=,<sp/>&gt;,<sp/>&gt;=,<sp/>&amp;&amp;,<sp/>||,<sp/>&amp;,<sp/>|,<sp/>^,<sp/>!,<sp/>~&lt;/TT&gt;)<sp/></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>overloaded.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;&lt;TT&gt;exp():&lt;/TT&gt;&lt;/b&gt;&lt;DD&gt;<sp/>creates<sp/>a<sp/>functor<sp/>that<sp/>takes<sp/>the<sp/>exponential<sp/>of<sp/>its<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument.<sp/>Likewise,<sp/>the<sp/>other<sp/>algebraic<sp/>functions</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i.e.<sp/>&lt;TT&gt;sq,<sp/>sqrt,<sp/>exp,<sp/>log,<sp/>log10,<sp/>sin,<sp/>asin,<sp/>cos,<sp/>acos,<sp/>tan,<sp/></highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atan,<sp/>abs,<sp/>floor,<sp/>ceil,<sp/>pow,<sp/>atan2,<sp/>fmod,<sp/>min,<sp/>max&lt;/TT&gt;)<sp/></highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>overloaded.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/DL&gt;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>We<sp/>will<sp/>explain<sp/>additional<sp/>capabilities<sp/>of<sp/>the<sp/>functor<sp/>creation<sp/>mechanism<sp/></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/>by<sp/>means<sp/>of<sp/>examples.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>same<sp/>argument<sp/>can<sp/>be<sp/>used<sp/>several<sp/>times<sp/>in<sp/>the<sp/>expression.<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>to<sp/>calculate<sp/>the<sp/>gradient<sp/>magnitude<sp/>from<sp/>the<sp/>components</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>the<sp/>gradient<sp/>vector,<sp/>you<sp/>may<sp/>write:</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::functor;</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::FImage<sp/>gradient_x(w,h),<sp/>gradient_y(w,h),<sp/>magnitude(w,h);</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/>...<sp/>//<sp/>calculate<sp/>gradient_x<sp/>and<sp/>gradient_y</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/>combineTwoImages(srcImageRange(gradient_x),<sp/>srcImage(gradient_y),</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destImage(magnitude),</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqrt(Arg1()*Arg1()<sp/>+<sp/>Arg2()*Arg2()));</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/>It<sp/>is<sp/>also<sp/>possible<sp/>to<sp/>build<sp/>other<sp/>functions<sp/>into<sp/>functor<sp/>expressions.<sp/>Suppose<sp/></highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/>you<sp/>want<sp/>to<sp/>apply<sp/>&lt;TT&gt;my_complicated_function()&lt;/TT&gt;<sp/>to<sp/>the<sp/>sum<sp/>of<sp/>two<sp/>images:</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::functor;</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::FImage<sp/>src1(w,h),<sp/>src2(w,h),<sp/>dest(w,h);</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>my_complicated_function(double);</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>combineTwoImages(srcImageRange(src1),<sp/>srcImage(src2),<sp/>destImage(dest),</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applyFct(&amp;my_complicated_function,<sp/>Arg1()+Arg2()));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/>[Note<sp/>that<sp/>the<sp/>arguments<sp/>of<sp/>the<sp/>wrapped<sp/>function<sp/>are<sp/>passed<sp/>as<sp/>additional</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/>arguments<sp/>to<sp/>&lt;TT&gt;applyFct()&lt;/TT&gt;]</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>can<sp/>implement<sp/>conditional<sp/>expression<sp/>by<sp/>means<sp/>of<sp/>the<sp/>&lt;TT&gt;ifThenElse()&lt;/TT&gt;<sp/></highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/>functor.<sp/>It<sp/>corresponds<sp/>to<sp/>the<sp/>&quot;?<sp/>:&quot;<sp/>operator<sp/>that<sp/>cannot<sp/>be<sp/>overloaded.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;TT&gt;ifThenElse()&lt;/TT&gt;<sp/>can<sp/>be<sp/>used,<sp/>for<sp/>example,<sp/>to<sp/>threshold<sp/>an<sp/>image:</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::functor;</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::FImage<sp/>src(w,h),<sp/>thresholded(w,h);</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/>...//<sp/>fill<sp/>src</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>threshold<sp/>=<sp/>...;</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/>transformImage(srcImageRange(src),<sp/>destImage(thresholded),</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifThenElse(Arg1()<sp/>&lt;<sp/>Param(threshold),</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param(0.0),<sp/><sp/><sp/><sp/>//<sp/>yes<sp/>branch</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Param(1.0))<sp/><sp/><sp/><sp/>//<sp/>no<sp/><sp/>branch</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="232"><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>can<sp/>use<sp/>the<sp/>&lt;TT&gt;Var()&lt;/TT&gt;<sp/>functor<sp/>to<sp/>assign<sp/>values<sp/>to<sp/>a<sp/>variable<sp/></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/>(&lt;TT&gt;=,<sp/>+=,<sp/>-=,<sp/>*=,<sp/>/=&lt;/TT&gt;&amp;nbsp;<sp/>are<sp/>supported).<sp/>For<sp/>example,<sp/>the<sp/>average<sp/>gray</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/>value<sp/>of<sp/>the<sp/>image<sp/>is<sp/>calculated<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::functor;</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::FImage<sp/>src(w,h);</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/>...//<sp/>fill<sp/>src</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/>inspectImage(srcImageRange(src),<sp/>Var(sum)<sp/>+=<sp/>Arg1());</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Average:<sp/>&quot;<sp/>&lt;&lt;<sp/>(sum<sp/>/<sp/>(w*h))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/>For<sp/>use<sp/>in<sp/>\ref<sp/>inspectImage()<sp/>and<sp/>its<sp/>relatives,<sp/>there<sp/>is<sp/>a<sp/>second</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/>conditional<sp/>functor<sp/>&lt;TT&gt;ifThen()&lt;/TT&gt;<sp/>that<sp/>emulates<sp/>the<sp/>&lt;TT&gt;if()&lt;/TT&gt;<sp/>statement</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>does<sp/>not<sp/>return<sp/>a<sp/>value.<sp/>Using<sp/>&lt;TT&gt;ifThen()&lt;/TT&gt;,<sp/>we<sp/>can<sp/>calculate<sp/>the<sp/>size</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>an<sp/>image<sp/>region:</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::functor;</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::IImage<sp/>label_image(w,h);</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/>...//<sp/>mark<sp/>regions<sp/>by<sp/>labels<sp/>in<sp/>label_image</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>region_label<sp/>=<sp/>...;<sp/>//<sp/>the<sp/>region<sp/>we<sp/>want<sp/>to<sp/>inspect</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>inspectImage(srcImageRange(label_image),</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifThen(Arg1()<sp/>==<sp/>Param(region_label),</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Var(size)<sp/>+=<sp/>Param(1)));</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Size<sp/>of<sp/>region<sp/>&quot;<sp/>&lt;&lt;<sp/>region_label<sp/>&lt;&lt;<sp/>&quot;:<sp/>&quot;<sp/>&lt;&lt;<sp/>size<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/>Often,<sp/>we<sp/>want<sp/>to<sp/>execute<sp/>several<sp/>commands<sp/>in<sp/>one<sp/>functor.<sp/>This<sp/>can<sp/>be<sp/>done</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/>by<sp/>means<sp/>of<sp/>the<sp/>overloaded<sp/>&lt;TT&gt;operator,()&lt;/TT&gt;<sp/>(&quot;operator<sp/>comma&quot;).<sp/>Expressions</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/>separated<sp/>by<sp/>a<sp/>comma<sp/>will<sp/>be<sp/>executed<sp/>in<sp/>succession.<sp/>We<sp/>can<sp/>thus<sp/></highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/>simultaneously<sp/>find<sp/>the<sp/>size<sp/>and<sp/>the<sp/>average<sp/>gray<sp/>value<sp/>of<sp/>a<sp/>region:</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::functor;</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::FImage<sp/>src(w,h);</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::IImage<sp/>label_image(w,h);</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/>...//<sp/>segment<sp/>src<sp/>and<sp/>mark<sp/>regions<sp/>in<sp/>label_image</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>region_label<sp/>=<sp/>...;<sp/>//<sp/>the<sp/>region<sp/>we<sp/>want<sp/>to<sp/>inspect</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/>inspectTwoImages(srcImageRange(src),<sp/>srcImage(label_image),</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifThen(Arg2()<sp/>==<sp/>Param(region_label),</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Var(size)<sp/>+=<sp/>Param(1),<sp/>//<sp/>the<sp/>comma<sp/>operator<sp/>is<sp/>invoked</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Var(sum)<sp/>+=<sp/>Arg1()</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)));</highlight></codeline>
<codeline lineno="293"><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Region<sp/>&quot;<sp/>&lt;&lt;<sp/>region_label<sp/>&lt;&lt;<sp/>&quot;:<sp/>size<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>size<sp/>&lt;&lt;<sp/></highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;,<sp/>average<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>sum<sp/>/<sp/>size<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/>[Note<sp/>that<sp/>the<sp/>list<sp/>of<sp/>comma-separated<sp/>expressions<sp/>must<sp/>be<sp/>enclosed<sp/>in<sp/>parentheses.]</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/>A<sp/>comma<sp/>separated<sp/>list<sp/>of<sp/>expressions<sp/>can<sp/>also<sp/>be<sp/>applied<sp/>in<sp/>the<sp/>context<sp/>of</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/>\ref<sp/>transformImage()<sp/>and<sp/>its<sp/>cousins.<sp/>Here,<sp/>a<sp/>general<sp/>rule<sp/>of<sp/>C++<sp/>applies:<sp/>The<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>value<sp/>of<sp/>a<sp/>comma<sp/>expression<sp/>is<sp/>the<sp/>value<sp/>of<sp/>its<sp/>last<sp/>subexpression.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/>For<sp/>example,<sp/>we<sp/>can<sp/>initialize<sp/>an<sp/>image<sp/>so<sp/>that<sp/>each<sp/>pixel<sp/>contains<sp/>its<sp/></highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/>address<sp/>in<sp/>scan<sp/>order:</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::functor;</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/>vigra::IImage<sp/>img(w,h);</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>count<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/>initImageWithFunctor(destImageRange(img),</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Var(count)<sp/>+=<sp/>Param(1),<sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Var(count)<sp/><sp/><sp/><sp/><sp/>//<sp/>this<sp/>is<sp/>the<sp/>result<sp/>of<sp/>the<sp/>comma<sp/>expression</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>));</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/>Further<sp/>information<sp/>about<sp/>how<sp/>this<sp/>mechanism<sp/>works<sp/>can<sp/>be<sp/>found<sp/>in</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;documents/FunctorFactory.ps&quot;&gt;this<sp/>paper&lt;/a&gt;<sp/>(sorry,<sp/>slightly<sp/>out<sp/>of<sp/>date).</highlight></codeline>
<codeline lineno="322"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOXYGEN</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NO_PARTIAL_TEMPLATE_SPECIALIZATION)</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;numerictraits.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mathutil.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;functortraits.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">functor<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unary<sp/>functor<sp/>base<sp/>template<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ErrorType;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Operation&gt;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Operation,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T1<sp/>Res;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">};</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Operation,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;T1,<sp/>T2&gt;::Promote<sp/>Res;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Operation,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;T1,<sp/>T2&gt;::Promote<sp/>P1;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;P1,<sp/>T3&gt;::Promote<sp/>Res;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR&gt;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryFunctor</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor(EXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expr_(e)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>typename<sp/>ResultTraits0&lt;EXPR&gt;::Res<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;EXPR&gt;::Res<sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="379"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr_();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;EXPR,<sp/>T1&gt;::Res<sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="386"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr_(v);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;EXPR,<sp/>T1,<sp/>T2&gt;::Res<sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="393"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr_(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;EXPR,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="400"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr_(v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:<sp/><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR<sp/>expr_;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor<sp/>&amp;<sp/>operator=(UnaryFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr&gt;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;UnaryFunctor&lt;Expr&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;Expr&gt;::Res<sp/>Res;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;UnaryFunctor&lt;Expr&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;Expr,<sp/>T1&gt;::Res<sp/>Res;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;UnaryFunctor&lt;Expr&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;Expr,<sp/>T1,<sp/>T2&gt;::Res<sp/>Res;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">};</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;UnaryFunctor&lt;Expr&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;Expr,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>Res;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">};</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unary<sp/>functors<sp/>for<sp/>arguments<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ArgumentFunctor1;<sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ArgumentFunctor2;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ArgumentFunctor3;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryFunctor&lt;ArgumentFunctor1&gt;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor()</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="453"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="459"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="465"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor<sp/>&amp;<sp/>operator=(UnaryFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">};</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;ArgumentFunctor1&gt;<sp/>Identity;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;UnaryFunctor&lt;ArgumentFunctor1&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ErrorType<sp/>Res;</highlight></codeline>
<codeline lineno="479"><highlight class="normal">};</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;UnaryFunctor&lt;ArgumentFunctor1&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T1<sp/>Res;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;UnaryFunctor&lt;ArgumentFunctor1&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T1<sp/>Res;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">};</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;UnaryFunctor&lt;ArgumentFunctor1&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T1<sp/>Res;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">};</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">UnaryFunctor&lt;ArgumentFunctor1&gt;<sp/></highlight></codeline>
<codeline lineno="503"><highlight class="normal">Arg1()</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;ArgumentFunctor1&gt;();</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryFunctor&lt;ArgumentFunctor2&gt;</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor()</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="518"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v2;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="524"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v2;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor<sp/>&amp;<sp/>operator=(UnaryFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">};</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;UnaryFunctor&lt;ArgumentFunctor2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ErrorType<sp/>Res;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">};</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;UnaryFunctor&lt;ArgumentFunctor2&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ErrorType<sp/>Res;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">};</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;UnaryFunctor&lt;ArgumentFunctor2&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T2<sp/>Res;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">};</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;UnaryFunctor&lt;ArgumentFunctor2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T2<sp/>Res;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">};</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">UnaryFunctor&lt;ArgumentFunctor2&gt;<sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal">Arg2()</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;ArgumentFunctor2&gt;();</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryFunctor&lt;ArgumentFunctor3&gt;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor()</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="575"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v3;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor<sp/>&amp;<sp/>operator=(UnaryFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;UnaryFunctor&lt;ArgumentFunctor3&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ErrorType<sp/>Res;</highlight></codeline>
<codeline lineno="587"><highlight class="normal">};</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;UnaryFunctor&lt;ArgumentFunctor3&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ErrorType<sp/>Res;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;UnaryFunctor&lt;ArgumentFunctor3&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ErrorType<sp/>Res;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">};</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;UnaryFunctor&lt;ArgumentFunctor3&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T3<sp/>Res;</highlight></codeline>
<codeline lineno="605"><highlight class="normal">};</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">UnaryFunctor&lt;ArgumentFunctor3&gt;<sp/></highlight></codeline>
<codeline lineno="611"><highlight class="normal">Arg3()</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;ArgumentFunctor3&gt;();</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constant<sp/>parameters<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ParameterFunctor</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterFunctor(T<sp/>v)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value_(v)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="630"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U1&gt;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(U1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="636"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U2&gt;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(U1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>U2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="642"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U3&gt;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(U1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>U2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>U3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="648"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterFunctor<sp/>&amp;<sp/>operator=(ParameterFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">};</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;ParameterFunctor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">};</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;ParameterFunctor&lt;T&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="669"><highlight class="normal">};</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;ParameterFunctor&lt;T&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="675"><highlight class="normal">};</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;ParameterFunctor&lt;T&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">};</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;ParameterFunctor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="685"><highlight class="normal">Param(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="686"><highlight class="normal">{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>ParameterFunctor&lt;T&gt;<sp/>fv(v);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;ParameterFunctor&lt;T&gt;<sp/>&gt;(fv);</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unary<sp/>analyser<sp/>base<sp/>template<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR&gt;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnaryAnalyser</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryAnalyser(EXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expr_(e)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="707"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr_();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="713"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr_(v);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="719"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr_(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="725"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr_(v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR<sp/>expr_;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryAnalyser<sp/>&amp;<sp/>operator=(UnaryAnalyser<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">};</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>assignment<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VarFunctor;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryFunctor&lt;VarFunctor&lt;T&gt;<sp/>&gt;;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_ASSIGNMENT_FUNCTOR(name,<sp/>op)<sp/>\</highlight></codeline>
<codeline lineno="751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>V,<sp/>class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>AssignmentFunctor_##name<sp/>\</highlight></codeline>
<codeline lineno="753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignmentFunctor_##name(UnaryFunctor&lt;VarFunctor&lt;V&gt;<sp/>&gt;<sp/>v,<sp/><sp/>\</highlight></codeline>
<codeline lineno="755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR&gt;<sp/>const<sp/>&amp;<sp/>e)<sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(v.value_),<sp/>expr_(e)<sp/>\</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}<sp/>\</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>&amp;<sp/>operator()()<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;V<sp/>&amp;&gt;(value_)<sp/>op<sp/>expr_();<sp/>\</highlight></codeline>
<codeline lineno="762"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;V<sp/>&amp;&gt;(value_);<sp/>\</highlight></codeline>
<codeline lineno="763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1&gt;<sp/><sp/>\</highlight></codeline>
<codeline lineno="766"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>&amp;<sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="767"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;V<sp/>&amp;&gt;(value_)<sp/>op<sp/>expr_(v1);<sp/>\</highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;V<sp/>&amp;&gt;(value_);<sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/><sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>&amp;<sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="774"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;V<sp/>&amp;&gt;(value_)<sp/>op<sp/>expr_(v1,<sp/>v2);<sp/>\</highlight></codeline>
<codeline lineno="776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;V<sp/>&amp;&gt;(value_);<sp/>\</highlight></codeline>
<codeline lineno="777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/><sp/>\</highlight></codeline>
<codeline lineno="780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>&amp;<sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2,<sp/>T3<sp/>const<sp/>&amp;<sp/>v3)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const_cast&lt;V<sp/>&amp;&gt;(value_)<sp/>op<sp/>expr_(v1,<sp/>v2,<sp/>v3);<sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>const_cast&lt;V<sp/>&amp;&gt;(value_);<sp/>\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>private:<sp/>\</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/>&amp;<sp/>value_;<sp/>\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR&gt;<sp/>expr_;<sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignmentFunctor_##name<sp/>&amp;<sp/>operator=(AssignmentFunctor_##name<sp/>const<sp/>&amp;);\</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/></highlight></codeline>
<codeline lineno="792"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">MAKE_ASSIGNMENT_FUNCTOR(assign,<sp/>=)</highlight></codeline>
<codeline lineno="796"><highlight class="normal">MAKE_ASSIGNMENT_FUNCTOR(<ref refid="group__FixedPointOperations_1ga95690fd14be4c66dbf3d3afbc852b15c" kindref="member" tooltip="addition with enforced result type.">add</ref>,<sp/>+=)</highlight></codeline>
<codeline lineno="797"><highlight class="normal">MAKE_ASSIGNMENT_FUNCTOR(subtract,<sp/>-=)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">MAKE_ASSIGNMENT_FUNCTOR(multiply,<sp/>*=)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">MAKE_ASSIGNMENT_FUNCTOR(divide,<sp/>/=)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MAKE_ASSIGNMENT_FUNCTOR</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variables<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryFunctor&lt;VarFunctor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor(T<sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value_(v)</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR&gt;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_assign&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>operator=(UnaryFunctor&lt;EXPR&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignmentFunctor_assign&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>va(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_assign&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;(va);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR&gt;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_add&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__FFTWComplexOperators_1ga23c9113f38123caf2ae30a59a1a5cfc5" kindref="member" tooltip="add-assignment">operator+=</ref>(UnaryFunctor&lt;EXPR&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignmentFunctor_add&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>va(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_add&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;(va);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR&gt;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_subtract&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__FFTWComplexOperators_1ga5f4de017fa0a604ec08a41a1b12d9ae1" kindref="member" tooltip="subtract-assignment">operator-=</ref>(UnaryFunctor&lt;EXPR&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignmentFunctor_subtract&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>va(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_subtract&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;(va);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR&gt;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_multiply&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__FFTWComplexOperators_1gabf60a2bcc061ec2ab4d80373afb143f8" kindref="member" tooltip="multiply-assignment">operator*=</ref>(UnaryFunctor&lt;EXPR&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignmentFunctor_multiply&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>va(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_multiply&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;(va);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR&gt;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_divide&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__FFTWComplexOperators_1ga2644cfc2c14bb28c5bb96a642abbd882" kindref="member" tooltip="divide-assignment">operator/=</ref>(UnaryFunctor&lt;EXPR&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssignmentFunctor_divide&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>va(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryAnalyser&lt;<sp/>AssignmentFunctor_divide&lt;T,<sp/>UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;(va);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="859"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U1&gt;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(U1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="865"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U2&gt;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(U1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>U2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="871"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U3&gt;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator()(U1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>U2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>U3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="877"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>&amp;<sp/>value_;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor<sp/>&amp;<sp/>operator=(UnaryFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal">};</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;UnaryFunctor&lt;VarFunctor&lt;T&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="891"><highlight class="normal">};</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;UnaryFunctor&lt;VarFunctor&lt;T&gt;<sp/>&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="895"><highlight class="normal">{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="897"><highlight class="normal">};</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;UnaryFunctor&lt;VarFunctor&lt;T&gt;<sp/>&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">};</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;UnaryFunctor&lt;VarFunctor&lt;T&gt;<sp/>&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Res;</highlight></codeline>
<codeline lineno="909"><highlight class="normal">};</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;VarFunctor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="913"><highlight class="normal">Var(T<sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="914"><highlight class="normal">{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;VarFunctor&lt;T&gt;<sp/>&gt;(v);</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>then<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2&gt;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IfThenFunctor</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Res;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>IfThenFunctor(EXPR1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="934"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>expr1_()<sp/>)<sp/>expr2_();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="940"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>expr1_(v1)<sp/>)<sp/>expr2_(v1);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="946"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>expr1_(v1,<sp/>v2)<sp/>)<sp/>expr2_(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;<sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="952"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>expr1_(v1,<sp/>v2,<sp/>v3)<sp/>)<sp/>expr2_(v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>IfThenFunctor<sp/>&amp;<sp/>operator=(IfThenFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal">};</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2&gt;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">UnaryAnalyser&lt;IfThenFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="968"><highlight class="normal">ifThen(UnaryFunctor&lt;EXPR1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;EXPR2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="970"><highlight class="normal">{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>IfThenFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;EXPR2&gt;<sp/>&gt;<sp/>p(e1,<sp/>e2);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryAnalyser&lt;IfThenFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;(p);</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>then<sp/>else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR3&gt;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IfThenElseFunctor;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR3&gt;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;IfThenElseFunctor&lt;EXPR1,<sp/>EXPR2,<sp/>EXPR3&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;EXPR2&gt;::Res<sp/>R2;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;EXPR3&gt;::Res<sp/>R3;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;R2,<sp/>R3&gt;::Promote<sp/>Res;</highlight></codeline>
<codeline lineno="992"><highlight class="normal">};</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;IfThenElseFunctor&lt;EXPR1,<sp/>EXPR2,<sp/>EXPR3&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="996"><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;EXPR2,<sp/>T1&gt;::Res<sp/>R2;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;EXPR3,<sp/>T1&gt;::Res<sp/>R3;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;R2,<sp/>R3&gt;::Promote<sp/>Res;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;IfThenElseFunctor&lt;EXPR1,<sp/>EXPR2,<sp/>EXPR3&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;EXPR2,<sp/>T1,<sp/>T2&gt;::Res<sp/>R2;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;EXPR3,<sp/>T1,<sp/>T2&gt;::Res<sp/>R3;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;R2,<sp/>R3&gt;::Promote<sp/>Res;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;IfThenElseFunctor&lt;EXPR1,<sp/>EXPR2,<sp/>EXPR3&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;EXPR2,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R2;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;EXPR3,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R3;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;R2,<sp/>R3&gt;::Promote<sp/>Res;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR3&gt;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IfThenElseFunctor</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>IfThenElseFunctor(EXPR1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2,<sp/>EXPR3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e3)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2),<sp/>expr3_(e3)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;IfThenElseFunctor&gt;::Res<sp/></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1027"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expr1_())</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;IfThenElseFunctor&gt;::Res(expr2_());</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;IfThenElseFunctor&gt;::Res(expr3_());</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;IfThenElseFunctor,<sp/>T&gt;::Res<sp/></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1041"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expr1_(v1))</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;IfThenElseFunctor,<sp/>T&gt;::Res(expr2_(v1));</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;IfThenElseFunctor,<sp/>T&gt;::Res(expr3_(v1));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;IfThenElseFunctor,<sp/>T1,<sp/>T2&gt;::Res<sp/></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1055"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expr1_(v1,<sp/>v2))</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;IfThenElseFunctor,<sp/>T1,<sp/>T2&gt;::Res(expr2_(v1,<sp/>v2));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;IfThenElseFunctor,<sp/>T1,<sp/>T2&gt;::Res(expr3_(v1,<sp/>v2));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;<sp/></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;IfThenElseFunctor,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expr1_(v1,<sp/>v2,<sp/>v3))</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;IfThenElseFunctor,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res(expr2_(v1,<sp/>v2,<sp/>v3));</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;IfThenElseFunctor,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res(expr3_(v1,<sp/>v2,<sp/>v3));</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR3<sp/>expr3_;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>IfThenElseFunctor<sp/>&amp;<sp/>operator=(IfThenElseFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR3&gt;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">UnaryFunctor&lt;IfThenElseFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;,<sp/></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR3&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">ifThenElse(UnaryFunctor&lt;EXPR1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2,<sp/></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR3&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e3)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>IfThenElseFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;,<sp/></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR3&gt;<sp/>&gt;<sp/>p(e1,<sp/>e2,<sp/>e3);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;IfThenElseFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;,<sp/></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR3&gt;<sp/>&gt;<sp/>&gt;(p);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functors<sp/>for<sp/>unary<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_FUNCTOR_UNARY_FUNCTION(function,<sp/>namespc,<sp/>traitsClass,<sp/>traitsValue)<sp/>\</highlight></codeline>
<codeline lineno="1112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>using<sp/>::namespc::function;<sp/>\</highlight></codeline>
<codeline lineno="1113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="1114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##function;<sp/>\</highlight></codeline>
<codeline lineno="1115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="1117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits0&lt;Functor_##function&lt;EXPR&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits0&lt;EXPR&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>traitsClass&lt;R1&gt;::traitsValue<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR,<sp/>class<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits1&lt;Functor_##function&lt;EXPR&gt;,<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits1&lt;EXPR,<sp/>T1&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>traitsClass&lt;R1&gt;::traitsValue<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR,<sp/>class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits2&lt;Functor_##function&lt;EXPR&gt;,<sp/>T1,<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits2&lt;EXPR,<sp/>T1,<sp/>T2&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>traitsClass&lt;R1&gt;::traitsValue<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR,<sp/>class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits3&lt;Functor_##function&lt;EXPR&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits3&lt;EXPR,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>traitsClass&lt;R1&gt;::traitsValue<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="1145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##function<sp/>\</highlight></codeline>
<codeline lineno="1146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##function(EXPR<sp/>const<sp/>&amp;<sp/>e)<sp/>\</highlight></codeline>
<codeline lineno="1148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expr_(e)<sp/>\</highlight></codeline>
<codeline lineno="1149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}<sp/>\</highlight></codeline>
<codeline lineno="1150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits0&lt;Functor_##function&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()()<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>function(expr_());<sp/>\</highlight></codeline>
<codeline lineno="1155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="1158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits1&lt;Functor_##function,<sp/>T&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T<sp/>const<sp/>&amp;<sp/>v1)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>function(expr_(v1));<sp/>\</highlight></codeline>
<codeline lineno="1162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits2&lt;Functor_##function,<sp/>T1,<sp/>T2&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>function(expr_(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="1169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits3&lt;Functor_##function,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2,<sp/>T3<sp/>const<sp/>&amp;<sp/>v3)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>function(expr_(v1,<sp/>v2,<sp/>v3));<sp/>\</highlight></codeline>
<codeline lineno="1176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>protected:<sp/>\</highlight></codeline>
<codeline lineno="1179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR<sp/>expr_;<sp/>\</highlight></codeline>
<codeline lineno="1181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>private:<sp/>\</highlight></codeline>
<codeline lineno="1183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##function<sp/>&amp;<sp/>operator=(Functor_##function<sp/>const<sp/>&amp;);<sp/>\</highlight></codeline>
<codeline lineno="1184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="1187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>UnaryFunctor&lt;Functor_##function&lt;UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>function(UnaryFunctor&lt;EXPR&gt;<sp/>const<sp/>&amp;<sp/>e)<sp/>\</highlight></codeline>
<codeline lineno="1189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##function&lt;UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>p(e);<sp/>\</highlight></codeline>
<codeline lineno="1191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UnaryFunctor&lt;Functor_##function&lt;UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;(p);<sp/>\</highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__MathFunctions_1ga5fe62e7b0dc6f379dd436c9c8338c93e" kindref="member">sq</ref>,<sp/>vigra,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__FixedPointOperations_1ga22d75753836176f3d172f58be11ecc4c" kindref="member" tooltip="square root.">sqrt</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1ga2a9e01ae7ae7b39a618e9f4a6afaee5b" kindref="member">exp</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1ga51ba49a20a6057642664f5be8521ec39" kindref="member">log</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1ga0b0034496cb2c48cdbb6d0d0b0c9fe3b" kindref="member">log10</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1ga9db90484f9146df72b800bab7fecdd4b" kindref="member">sin</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1ga5babf8d2f2bf4f98519a6cf3d6fcc88f" kindref="member">asin</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1ga05727ffc201ac332c0e4158a2267c08c" kindref="member">cos</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1gacabb81744a32c18598f2a0ab8a1ac24a" kindref="member">acos</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1gaff59c596812d1553c8e681e708b9a14f" kindref="member">tan</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__LinearAlgebraFunctions_1ga9746dede2b434f7c812ad557c1694db1" kindref="member">atan</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__FixedPointOperations_1gaf8fe85520fc0bc2d77ec8e6cf26f3c5d" kindref="member" tooltip="rounding down.">floor</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__FixedPointOperations_1ga14fe7b9ffa21e091c6ff4ede68717c30" kindref="member" tooltip="rounding up.">ceil</ref>,<sp/>std,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__FFTWComplexOperators_1ga6f4ef274842b6153923f02a6cd264576" kindref="member" tooltip="absolute value (= magnitude)">abs</ref>,<sp/>vigra,<sp/>NumericTraits,<sp/>RealPromote)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__FFTWComplexOperators_1ga396baa79e8bd78a178597d32d5152041" kindref="member" tooltip="norm (= magnitude)">norm</ref>,<sp/>vigra,<sp/>NormTraits,<sp/>NormType)</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">MAKE_FUNCTOR_UNARY_FUNCTION(<ref refid="group__FFTWComplexOperators_1ga484df995dad9821aac02ec42cd58f7eb" kindref="member" tooltip="squared norm (= squared magnitude)">squaredNorm</ref>,<sp/>vigra,<sp/>NormTraits,<sp/>SquaredNormType)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MAKE_FUNCTOR_UNARY_FUNCTION</highlight></codeline>
<codeline lineno="1214"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functors<sp/>for<sp/>unary<sp/>operators<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_FUNCTOR_UNARY_OPERATOR(name,<sp/>op)<sp/>\</highlight></codeline>
<codeline lineno="1222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="1223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##name;<sp/>\</highlight></codeline>
<codeline lineno="1224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="1226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits0&lt;Functor_##name&lt;EXPR&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits0&lt;EXPR&gt;::Res<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR,<sp/>class<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits1&lt;Functor_##name&lt;EXPR&gt;,<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits1&lt;EXPR,<sp/>T1&gt;::Res<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR,<sp/>class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits2&lt;Functor_##name&lt;EXPR&gt;,<sp/>T1,<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits2&lt;EXPR,<sp/>T1,<sp/>T2&gt;::Res<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR,<sp/>class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits3&lt;Functor_##name&lt;EXPR&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits3&lt;EXPR,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="1250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##name<sp/>\</highlight></codeline>
<codeline lineno="1251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name(EXPR<sp/>const<sp/>&amp;<sp/>e)<sp/>\</highlight></codeline>
<codeline lineno="1253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expr_(e)<sp/>\</highlight></codeline>
<codeline lineno="1254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}<sp/>\</highlight></codeline>
<codeline lineno="1255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits0&lt;Functor_##name&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()()<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>op<sp/>expr_();<sp/>\</highlight></codeline>
<codeline lineno="1260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="1263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits1&lt;Functor_##name,<sp/>T&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T<sp/>const<sp/>&amp;<sp/>v1)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>op<sp/>expr_(v1);<sp/>\</highlight></codeline>
<codeline lineno="1267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits2&lt;Functor_##name,<sp/>T1,<sp/>T2&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>op<sp/>expr_(v1,<sp/>v2);<sp/>\</highlight></codeline>
<codeline lineno="1274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits3&lt;Functor_##name,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2,<sp/>T3<sp/>const<sp/>&amp;<sp/>v3)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>op<sp/>expr_(v1,<sp/>v2,<sp/>v3);<sp/>\</highlight></codeline>
<codeline lineno="1281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>protected:<sp/>\</highlight></codeline>
<codeline lineno="1283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR<sp/>expr_;<sp/>\</highlight></codeline>
<codeline lineno="1285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>private:<sp/>\</highlight></codeline>
<codeline lineno="1287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name<sp/>&amp;<sp/>operator=(Functor_##name<sp/>const<sp/>&amp;);\</highlight></codeline>
<codeline lineno="1288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR&gt;<sp/>\</highlight></codeline>
<codeline lineno="1291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>UnaryFunctor&lt;Functor_##name&lt;UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>operator<sp/>op(UnaryFunctor&lt;EXPR&gt;<sp/>const<sp/>&amp;<sp/>e)<sp/>\</highlight></codeline>
<codeline lineno="1293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name&lt;UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>p(e);<sp/>\</highlight></codeline>
<codeline lineno="1295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UnaryFunctor&lt;Functor_##name&lt;UnaryFunctor&lt;EXPR&gt;<sp/>&gt;<sp/>&gt;(p);<sp/>\</highlight></codeline>
<codeline lineno="1296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal">MAKE_FUNCTOR_UNARY_OPERATOR(minus,<sp/>-)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">MAKE_FUNCTOR_UNARY_OPERATOR(negate,<sp/>!)</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">MAKE_FUNCTOR_UNARY_OPERATOR(bitNegate,<sp/>~)</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MAKE_FUNCTOR_UNARY_OPERATOR</highlight></codeline>
<codeline lineno="1306"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functors<sp/>for<sp/>binary<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_FUNCTOR_BINARY_FUNCTION(function)<sp/>\</highlight></codeline>
<codeline lineno="1314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>using<sp/>std::function;<sp/>\</highlight></codeline>
<codeline lineno="1315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##function;<sp/>\</highlight></codeline>
<codeline lineno="1317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits0&lt;Functor_##function&lt;EXPR1,<sp/>EXPR2&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits0&lt;EXPR1&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits0&lt;EXPR2&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>R3;<sp/>\</highlight></codeline>
<codeline lineno="1324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>NumericTraits&lt;R3&gt;::RealPromote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits1&lt;Functor_##function&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits1&lt;EXPR1,<sp/>T1&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits1&lt;EXPR2,<sp/>T1&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>R3;<sp/>\</highlight></codeline>
<codeline lineno="1333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>NumericTraits&lt;R3&gt;::RealPromote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits2&lt;Functor_##function&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits2&lt;EXPR1,<sp/>T1,<sp/>T2&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1340"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits2&lt;EXPR2,<sp/>T1,<sp/>T2&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1341"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>R3;<sp/>\</highlight></codeline>
<codeline lineno="1342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>NumericTraits&lt;R3&gt;::RealPromote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits3&lt;Functor_##function&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits3&lt;EXPR1,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits3&lt;EXPR2,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>R3;<sp/>\</highlight></codeline>
<codeline lineno="1351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>NumericTraits&lt;R3&gt;::RealPromote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##function<sp/>\</highlight></codeline>
<codeline lineno="1356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##function(EXPR1<sp/>const<sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/>const<sp/>&amp;<sp/>e2)<sp/>\</highlight></codeline>
<codeline lineno="1358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2)<sp/>\</highlight></codeline>
<codeline lineno="1359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}<sp/>\</highlight></codeline>
<codeline lineno="1360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits0&lt;Functor_##function&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()()<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>function(expr1_(),<sp/>expr2_());<sp/>\</highlight></codeline>
<codeline lineno="1365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="1368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits1&lt;Functor_##function,<sp/>T&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T<sp/>const<sp/>&amp;<sp/>v1)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>function(expr1_(v1),<sp/>expr2_(v1));<sp/>\</highlight></codeline>
<codeline lineno="1372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits2&lt;Functor_##function,<sp/>T1,<sp/>T2&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>function(expr1_(v1,<sp/>v2),<sp/>expr2_(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="1379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits3&lt;Functor_##function,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2,<sp/>T3<sp/>const<sp/>&amp;<sp/>v3)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>function(expr1_(v1,<sp/>v2,<sp/>v3),<sp/>expr2_(v1,<sp/>v2,<sp/>v3));<sp/>\</highlight></codeline>
<codeline lineno="1386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>private:<sp/>\</highlight></codeline>
<codeline lineno="1389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;<sp/>\</highlight></codeline>
<codeline lineno="1391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;<sp/>\</highlight></codeline>
<codeline lineno="1392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##function<sp/>&amp;<sp/>operator=(Functor_##function<sp/>const<sp/>&amp;);<sp/>\</highlight></codeline>
<codeline lineno="1394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>UnaryFunctor&lt;Functor_##function&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>function(UnaryFunctor&lt;EXPR1&gt;<sp/>const<sp/>&amp;<sp/>e1,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>const<sp/>&amp;<sp/>e2)<sp/>\</highlight></codeline>
<codeline lineno="1399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##function&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>p(e1,<sp/>e2);<sp/>\</highlight></codeline>
<codeline lineno="1401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UnaryFunctor&lt;Functor_##function&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/><sp/>\</highlight></codeline>
<codeline lineno="1402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;(p);<sp/>\</highlight></codeline>
<codeline lineno="1403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal">MAKE_FUNCTOR_BINARY_FUNCTION(pow)</highlight></codeline>
<codeline lineno="1408"><highlight class="normal">MAKE_FUNCTOR_BINARY_FUNCTION(<ref refid="group__FixedPoint16Operations_1gae83e1ae2e3dae6dc462c69a7c8175fc5" kindref="member" tooltip="Arctangent. Accuracy better than 1/3 degree (9 significant bits).">atan2</ref>)</highlight></codeline>
<codeline lineno="1409"><highlight class="normal">MAKE_FUNCTOR_BINARY_FUNCTION(fmod)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MAKE_FUNCTOR_BINARY_FUNCTION</highlight></codeline>
<codeline lineno="1412"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_FUNCTOR_MINMAX(name,<sp/>op)<sp/>\</highlight></codeline>
<codeline lineno="1416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##name;<sp/>\</highlight></codeline>
<codeline lineno="1418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1419"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits0&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits0&lt;EXPR1&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits0&lt;EXPR2&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1426"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1427"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1428"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits1&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1429"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1430"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits1&lt;EXPR1,<sp/>T1&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits1&lt;EXPR2,<sp/>T1&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1432"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1433"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1435"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1436"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits2&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1437"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1438"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits2&lt;EXPR1,<sp/>T1,<sp/>T2&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1439"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits2&lt;EXPR2,<sp/>T1,<sp/>T2&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1443"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1444"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits3&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1445"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1446"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits3&lt;EXPR1,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1447"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits3&lt;EXPR2,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1448"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1449"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1450"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##name<sp/>\</highlight></codeline>
<codeline lineno="1453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name(EXPR1<sp/>const<sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/>const<sp/>&amp;<sp/>e2)<sp/>\</highlight></codeline>
<codeline lineno="1455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2)<sp/>\</highlight></codeline>
<codeline lineno="1456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}<sp/>\</highlight></codeline>
<codeline lineno="1457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1458"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits0&lt;Functor_##name&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1459"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()()<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>\</highlight></codeline>
<codeline lineno="1462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultTraits0&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;<sp/>&gt;::R1<sp/>r1(expr1_());<sp/>\</highlight></codeline>
<codeline lineno="1463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>\</highlight></codeline>
<codeline lineno="1464"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultTraits0&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;<sp/>&gt;::R2<sp/>r2(expr2_());<sp/>\</highlight></codeline>
<codeline lineno="1465"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(r1<sp/>op<sp/>r2)<sp/>?<sp/>r1<sp/>:<sp/>r2;<sp/>\</highlight></codeline>
<codeline lineno="1466"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1467"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="1469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits1&lt;Functor_##name,<sp/>T&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T<sp/>const<sp/>&amp;<sp/>v1)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>\</highlight></codeline>
<codeline lineno="1473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultTraits1&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T&gt;::R1<sp/>r1(expr1_(v1));<sp/>\</highlight></codeline>
<codeline lineno="1474"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>\</highlight></codeline>
<codeline lineno="1475"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultTraits1&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T&gt;::R2<sp/>r2(expr2_(v1));<sp/>\</highlight></codeline>
<codeline lineno="1476"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(r1<sp/>op<sp/>r2)<sp/>?<sp/>r1<sp/>:<sp/>r2;<sp/>\</highlight></codeline>
<codeline lineno="1477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1479"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1480"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits2&lt;Functor_##name,<sp/>T1,<sp/>T2&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>\</highlight></codeline>
<codeline lineno="1484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultTraits2&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2&gt;::R1<sp/>r1(expr1_(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="1485"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>\</highlight></codeline>
<codeline lineno="1486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultTraits2&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2&gt;::R2<sp/>r2(expr2_(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="1487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(r1<sp/>op<sp/>r2)<sp/>?<sp/>r1<sp/>:<sp/>r2;<sp/>\</highlight></codeline>
<codeline lineno="1488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits3&lt;Functor_##name,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2,<sp/>T3<sp/>const<sp/>&amp;<sp/>v3)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>\</highlight></codeline>
<codeline lineno="1495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultTraits3&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;::R1<sp/>r1(expr1_(v1,<sp/>v2,<sp/>v3));<sp/>\</highlight></codeline>
<codeline lineno="1496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>\</highlight></codeline>
<codeline lineno="1497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultTraits3&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;::R2<sp/>r2(expr2_(v1,<sp/>v2,<sp/>v3));<sp/>\</highlight></codeline>
<codeline lineno="1498"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(r1<sp/>op<sp/>r2)<sp/>?<sp/>r1<sp/>:<sp/>r2;<sp/>\</highlight></codeline>
<codeline lineno="1499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1500"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>private:<sp/>\</highlight></codeline>
<codeline lineno="1502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1503"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;<sp/>\</highlight></codeline>
<codeline lineno="1504"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;<sp/>\</highlight></codeline>
<codeline lineno="1505"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name<sp/>&amp;<sp/>operator=(Functor_##name<sp/>const<sp/>&amp;);<sp/>\</highlight></codeline>
<codeline lineno="1507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1509"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>UnaryFunctor&lt;Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>name(UnaryFunctor&lt;EXPR1&gt;<sp/>const<sp/>&amp;<sp/>e1,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>const<sp/>&amp;<sp/>e2)<sp/>\</highlight></codeline>
<codeline lineno="1512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>p(e1,<sp/>e2);<sp/>\</highlight></codeline>
<codeline lineno="1514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UnaryFunctor&lt;Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/><sp/>\</highlight></codeline>
<codeline lineno="1515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;(p);<sp/>\</highlight></codeline>
<codeline lineno="1516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal">MAKE_FUNCTOR_MINMAX(<ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">min</ref>,<sp/>&lt;)</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">MAKE_FUNCTOR_MINMAX(<ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">max</ref>,<sp/>&gt;)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MAKE_FUNCTOR_MINMAX</highlight></codeline>
<codeline lineno="1522"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functors<sp/>for<sp/>binary<sp/>operators<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_FUNCTOR_BINARY_OPERATOR(name,<sp/>op)<sp/>\</highlight></codeline>
<codeline lineno="1530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##name;<sp/>\</highlight></codeline>
<codeline lineno="1532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits0&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits0&lt;EXPR1&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits0&lt;EXPR2&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1538"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1539"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1540"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1541"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits1&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1544"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits1&lt;EXPR1,<sp/>T1&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1545"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits1&lt;EXPR2,<sp/>T1&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1550"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits2&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1551"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1552"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits2&lt;EXPR1,<sp/>T1,<sp/>T2&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1553"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits2&lt;EXPR2,<sp/>T1,<sp/>T2&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits3&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits3&lt;EXPR1,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R1;<sp/>\</highlight></codeline>
<codeline lineno="1561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>ResultTraits3&lt;EXPR2,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>R2;<sp/>\</highlight></codeline>
<codeline lineno="1562"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;R1,<sp/>R2&gt;::Promote<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1563"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1564"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1565"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1566"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##name<sp/>\</highlight></codeline>
<codeline lineno="1567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name(EXPR1<sp/>const<sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/>const<sp/>&amp;<sp/>e2)<sp/>\</highlight></codeline>
<codeline lineno="1569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2)<sp/>\</highlight></codeline>
<codeline lineno="1570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}<sp/>\</highlight></codeline>
<codeline lineno="1571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits0&lt;Functor_##name&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()()<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1574"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1575"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>expr1_()<sp/>op<sp/>expr2_();<sp/>\</highlight></codeline>
<codeline lineno="1576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="1579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits1&lt;Functor_##name,<sp/>T&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T<sp/>const<sp/>&amp;<sp/>v1)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1581"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>expr1_(v1)<sp/>op<sp/>expr2_(v1);<sp/>\</highlight></codeline>
<codeline lineno="1583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits2&lt;Functor_##name,<sp/>T1,<sp/>T2&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1587"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1589"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>expr1_(v1,<sp/>v2)<sp/>op<sp/>expr2_(v1,<sp/>v2);<sp/>\</highlight></codeline>
<codeline lineno="1590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1592"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1593"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>ResultTraits3&lt;Functor_##name,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>\</highlight></codeline>
<codeline lineno="1594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2,<sp/>T3<sp/>const<sp/>&amp;<sp/>v3)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>expr1_(v1,<sp/>v2,<sp/>v3)<sp/>op<sp/>expr2_(v1,<sp/>v2,<sp/>v3);<sp/>\</highlight></codeline>
<codeline lineno="1597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1598"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1599"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>private:<sp/>\</highlight></codeline>
<codeline lineno="1600"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1601"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;<sp/>\</highlight></codeline>
<codeline lineno="1602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;<sp/>\</highlight></codeline>
<codeline lineno="1603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name<sp/>&amp;<sp/>operator=(Functor_##name<sp/>const<sp/>&amp;);<sp/>\</highlight></codeline>
<codeline lineno="1605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1606"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1607"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1608"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>UnaryFunctor&lt;Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>operator<sp/>op(UnaryFunctor&lt;EXPR1&gt;<sp/>const<sp/>&amp;<sp/>e1,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>const<sp/>&amp;<sp/>e2)<sp/>\</highlight></codeline>
<codeline lineno="1610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1611"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>p(e1,<sp/>e2);<sp/>\</highlight></codeline>
<codeline lineno="1612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UnaryFunctor&lt;Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/><sp/>\</highlight></codeline>
<codeline lineno="1613"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;(p);<sp/>\</highlight></codeline>
<codeline lineno="1614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR(add,<sp/>+)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR(subtract,<sp/>-)</highlight></codeline>
<codeline lineno="1620"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR(multiply,<sp/>*)</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR(divide,<sp/>/)</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR(modulo,<sp/>%)</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR(bitAnd,<sp/>&amp;)</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR(bitOr,<sp/>|)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR(bitXor,<sp/>^)</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MAKE_FUNCTOR_BINARY_OPERATOR</highlight></codeline>
<codeline lineno="1628"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(name,<sp/>op)<sp/>\</highlight></codeline>
<codeline lineno="1632"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##name;<sp/>\</highlight></codeline>
<codeline lineno="1634"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1635"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits0&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1637"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>bool<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1641"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1642"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits1&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1&gt;<sp/>\</highlight></codeline>
<codeline lineno="1643"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1644"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>bool<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1648"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits2&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1649"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1650"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>bool<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1652"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2,<sp/>class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1654"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>ResultTraits3&lt;Functor_##name&lt;EXPR1,<sp/>EXPR2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>bool<sp/>Res;<sp/>\</highlight></codeline>
<codeline lineno="1657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1658"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1659"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1660"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Functor_##name<sp/>\</highlight></codeline>
<codeline lineno="1661"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name(EXPR1<sp/>const<sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/>const<sp/>&amp;<sp/>e2)<sp/>\</highlight></codeline>
<codeline lineno="1663"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2)<sp/>\</highlight></codeline>
<codeline lineno="1664"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}<sp/>\</highlight></codeline>
<codeline lineno="1665"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1666"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>operator()()<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1667"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>expr1_()<sp/>op<sp/>expr2_();<sp/>\</highlight></codeline>
<codeline lineno="1669"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="1672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>operator()(T<sp/>const<sp/>&amp;<sp/>v1)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>expr1_(v1)<sp/>op<sp/>expr2_(v1);<sp/>\</highlight></codeline>
<codeline lineno="1675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>expr1_(v1,<sp/>v2)<sp/>op<sp/>expr2_(v1,<sp/>v2);<sp/>\</highlight></codeline>
<codeline lineno="1681"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>T3&gt;<sp/>\</highlight></codeline>
<codeline lineno="1684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2,<sp/>T3<sp/>const<sp/>&amp;<sp/>v3)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="1685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>expr1_(v1,<sp/>v2,<sp/>v3)<sp/>op<sp/>expr2_(v1,<sp/>v2,<sp/>v3);<sp/>\</highlight></codeline>
<codeline lineno="1687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>private:<sp/>\</highlight></codeline>
<codeline lineno="1690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;<sp/>\</highlight></codeline>
<codeline lineno="1692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;<sp/>\</highlight></codeline>
<codeline lineno="1693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name<sp/>&amp;<sp/>operator=(Functor_##name<sp/>const<sp/>&amp;);<sp/>\</highlight></codeline>
<codeline lineno="1695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1697"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>EXPR1,<sp/>class<sp/>EXPR2&gt;<sp/>\</highlight></codeline>
<codeline lineno="1698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>UnaryFunctor&lt;Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="1699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>operator<sp/>op(UnaryFunctor&lt;EXPR1&gt;<sp/>const<sp/>&amp;<sp/>e1,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>const<sp/>&amp;<sp/>e2)<sp/>\</highlight></codeline>
<codeline lineno="1700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>p(e1,<sp/>e2);<sp/>\</highlight></codeline>
<codeline lineno="1702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>UnaryFunctor&lt;Functor_##name&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/><sp/>\</highlight></codeline>
<codeline lineno="1703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;(p);<sp/>\</highlight></codeline>
<codeline lineno="1704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(equals,<sp/>==)</highlight></codeline>
<codeline lineno="1709"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(differs,<sp/>!=)</highlight></codeline>
<codeline lineno="1710"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(less,<sp/>&lt;)</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(lessEqual,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="1712"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(greater,<sp/>&gt;)</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(greaterEqual,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(and,<sp/>&amp;&amp;)</highlight></codeline>
<codeline lineno="1715"><highlight class="normal">MAKE_FUNCTOR_BINARY_OPERATOR_BOOL(or,<sp/>||)</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MAKE_FUNCTOR_BINARY_OPERATOR_BOOL</highlight></codeline>
<codeline lineno="1718"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unary<sp/>apply<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG&gt;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryFctPtrFunctor</highlight></codeline>
<codeline lineno="1727"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFctPtrFunctor(EXPR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e,<sp/>RES<sp/>(*fct)(ARG))</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expr_(e),<sp/>f_(fct)</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1733"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(expr_());</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>operator()(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1739"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(expr_(v1));</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1745"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(expr_(v1,<sp/>v2));</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;<sp/></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1751"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(expr_(v1,<sp/>v2,<sp/>v3));</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR<sp/>expr_;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>(*f_)(ARG);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFctPtrFunctor<sp/>&amp;<sp/>operator=(UnaryFctPtrFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG&gt;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;UnaryFctPtrFunctor&lt;EXPR,<sp/>RES,<sp/>ARG&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RES<sp/>Res;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;UnaryFctPtrFunctor&lt;EXPR,<sp/>RES,<sp/>ARG&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RES<sp/>Res;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;UnaryFctPtrFunctor&lt;EXPR,<sp/>RES,<sp/>ARG&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RES<sp/>Res;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;UnaryFctPtrFunctor&lt;EXPR,<sp/>RES,<sp/>ARG&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RES<sp/>Res;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG&gt;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;UnaryFctPtrFunctor&lt;UnaryFunctor&lt;EXPR&gt;,<sp/>RES,<sp/>ARG&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal">applyFct(RES<sp/>(*f)(ARG),<sp/>UnaryFunctor&lt;EXPR&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFctPtrFunctor&lt;UnaryFunctor&lt;EXPR&gt;,<sp/>RES,<sp/>ARG&gt;<sp/>p(e,<sp/>f);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;UnaryFctPtrFunctor&lt;UnaryFunctor&lt;EXPR&gt;,<sp/>RES,<sp/>ARG&gt;<sp/>&gt;(p);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binary<sp/>apply<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG2&gt;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BinaryFctPtrFunctor</highlight></codeline>
<codeline lineno="1803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryFctPtrFunctor(EXPR1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2,<sp/></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RES<sp/>(*f)(ARG1,<sp/>ARG2))</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2),<sp/>f_(f)</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1810"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(expr1_(),<sp/>expr2_());</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>operator()(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1816"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(expr1_(v1),<sp/>expr2_(v1));</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1822"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(expr1_(v1,<sp/>v2),<sp/>expr2_(v1,<sp/>v2));</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;<sp/></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1828"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(expr1_(v1,<sp/>v2,<sp/>v3),<sp/>expr2_(v1,<sp/>v2,<sp/>v3));</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>RES<sp/>(*f_)(ARG1,<sp/>ARG2);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryFctPtrFunctor<sp/>&amp;<sp/>operator=(BinaryFctPtrFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG2&gt;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;BinaryFctPtrFunctor&lt;EXPR1,<sp/>EXPR2,<sp/>RES,<sp/>ARG1,<sp/>ARG2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RES<sp/>Res;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EXPR1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EXPR2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RES,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARG1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARG2,<sp/></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1&gt;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;BinaryFctPtrFunctor&lt;EXPR1,<sp/>EXPR2,<sp/>RES,<sp/>ARG1,<sp/>ARG2&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RES<sp/>Res;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EXPR1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EXPR2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RES,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARG1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARG2,<sp/></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2&gt;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;BinaryFctPtrFunctor&lt;EXPR1,<sp/>EXPR2,<sp/>RES,<sp/>ARG1,<sp/>ARG2&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RES<sp/>Res;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EXPR1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EXPR2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RES,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARG1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARG2,<sp/></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T3&gt;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;BinaryFctPtrFunctor&lt;EXPR1,<sp/>EXPR2,<sp/>RES,<sp/>ARG1,<sp/>ARG2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RES<sp/>Res;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RES,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG2&gt;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;BinaryFctPtrFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;,<sp/></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RES,<sp/>ARG1,<sp/>ARG2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">applyFct(RES<sp/>(*f)(ARG1,<sp/>ARG2),<sp/>UnaryFunctor&lt;EXPR1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryFctPtrFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;,<sp/></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RES,<sp/>ARG1,<sp/>ARG2&gt;<sp/><sp/>p(e1,<sp/>e2,<sp/>f);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;BinaryFctPtrFunctor&lt;UnaryFunctor&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;,<sp/></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RES,<sp/>ARG1,<sp/>ARG2&gt;<sp/>&gt;(p);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comma<sp/>operator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2&gt;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CommaFunctor</highlight></codeline>
<codeline lineno="1892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>CommaFunctor(EXPR1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2)</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;EXPR2&gt;::Res<sp/></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1899"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1_();</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr2_();</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;EXPR2,<sp/>T&gt;::Res<sp/></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1907"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1_(v1);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr2_(v1);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;EXPR2,<sp/>T1,<sp/>T2&gt;::Res<sp/></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1915"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1_(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr2_(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;<sp/></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;EXPR2,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1923"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1_(v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr2_(v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/>CommaFunctor<sp/>&amp;<sp/>operator=(CommaFunctor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr2&gt;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits0&lt;CommaFunctor&lt;Expr1,<sp/>Expr2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits0&lt;Expr2&gt;::Res<sp/>Res;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1&gt;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits1&lt;CommaFunctor&lt;Expr1,<sp/>Expr2&gt;,<sp/>T1&gt;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits1&lt;Expr2,<sp/>T1&gt;::Res<sp/>Res;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits2&lt;CommaFunctor&lt;Expr1,<sp/>Expr2&gt;,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits2&lt;Expr2,<sp/>T1,<sp/>T2&gt;::Res<sp/>Res;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expr2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ResultTraits3&lt;CommaFunctor&lt;Expr1,<sp/>Expr2&gt;,<sp/>T1,<sp/>T2,<sp/>T3&gt;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultTraits3&lt;Expr2,<sp/>T1,<sp/>T2,<sp/>T3&gt;::Res<sp/>Res;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2&gt;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;CommaFunctor&lt;UnaryAnalyser&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal">operator,(UnaryAnalyser&lt;EXPR1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="1966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>CommaFunctor&lt;UnaryAnalyser&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/><sp/>p(e1,<sp/>e2);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryFunctor&lt;CommaFunctor&lt;UnaryAnalyser&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;(p);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="comment">/************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2&gt;</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CommaAnalyser</highlight></codeline>
<codeline lineno="1977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>CommaAnalyser(EXPR1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/>EXPR2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expr1_(e1),<sp/>expr2_(e2)</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1983"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1_();</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr2_();</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1990"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1_(v1);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr2_(v1);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="1997"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1_(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr2_(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T3&gt;<sp/></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v1,<sp/>T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v2,<sp/>T3<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v3)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="2004"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr1_(v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr2_(v1,<sp/>v2,<sp/>v3);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR1<sp/>expr1_;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPR2<sp/>expr2_;</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>CommaAnalyser<sp/>&amp;<sp/>operator=(CommaAnalyser<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;);<sp/></highlight><highlight class="comment">//<sp/>not<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>EXPR2&gt;</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>UnaryAnalyser&lt;CommaAnalyser&lt;UnaryAnalyser&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="2021"><highlight class="normal">operator,(UnaryAnalyser&lt;EXPR1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e1,<sp/></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;EXPR2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="2023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/>CommaAnalyser&lt;UnaryAnalyser&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;EXPR2&gt;<sp/>&gt;<sp/><sp/>p(e1,<sp/>e2);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryAnalyser&lt;CommaAnalyser&lt;UnaryAnalyser&lt;EXPR1&gt;,<sp/></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryAnalyser&lt;EXPR2&gt;<sp/>&gt;<sp/>&gt;(p);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>functor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/><sp/>__GNUC__<sp/>&lt;<sp/>3</highlight></codeline>
<codeline lineno="2033"><highlight class="preprocessor"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>functor::Arg1;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>functor::Arg2;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>functor::Arg3;</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>functor::Param;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2038"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FunctorTraits&lt;functor::UnaryFunctor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>FunctorTraitsBase&lt;functor::UnaryFunctor&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isInitializer;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isUnaryFunctor;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isBinaryFunctor;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isTernaryFunctor;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FunctorTraits&lt;functor::UnaryAnalyser&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>FunctorTraitsBase&lt;functor::UnaryAnalyser&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isUnaryAnalyser;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isBinaryAnalyser;</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isTernaryAnalyser;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_PARTIAL_TEMPLATE_SPECIALIZATION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2065"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>DOXYGEN</highlight></codeline>
<codeline lineno="2067"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VIGRA_FUNCTOREXPRESSION_HXX<sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2069"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/functorexpression.hxx"/>
  </compounddef>
</doxygen>
