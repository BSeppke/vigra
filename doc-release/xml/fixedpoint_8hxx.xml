<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="fixedpoint_8hxx" kind="file">
    <compoundname>fixedpoint.hxx</compoundname>
    <includes refid="mathutil_8hxx" local="yes">mathutil.hxx</includes>
    <includes refid="static__assert_8hxx" local="yes">static_assert.hxx</includes>
    <includes refid="error_8hxx" local="yes">error.hxx</includes>
    <includes refid="numerictraits_8hxx" local="yes">numerictraits.hxx</includes>
    <includedby refid="splines_8hxx" local="yes">vigra/splines.hxx</includedby>
    <includedby refid="splineimageview_8hxx" local="yes">vigra/splineimageview.hxx</includedby>
    <includedby refid="tv__filter_8hxx" local="yes">vigra/tv_filter.hxx</includedby>
    <incdepgraph>
      <node id="2284">
        <label>functional</label>
      </node>
      <node id="2277">
        <label>limits</label>
      </node>
      <node id="2274">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="2275" relation="include">
        </childnode>
        <childnode refid="2277" relation="include">
        </childnode>
      </node>
      <node id="2285">
        <label>iterator</label>
      </node>
      <node id="2283">
        <label>inspector_passes.hxx</label>
        <link refid="inspector__passes_8hxx_source"/>
        <childnode refid="2275" relation="include">
        </childnode>
      </node>
      <node id="2281">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="2282">
        <label>algorithm.hxx</label>
        <link refid="algorithm_8hxx_source"/>
        <childnode refid="2274" relation="include">
        </childnode>
        <childnode refid="2279" relation="include">
        </childnode>
        <childnode refid="2283" relation="include">
        </childnode>
        <childnode refid="2278" relation="include">
        </childnode>
        <childnode refid="2284" relation="include">
        </childnode>
        <childnode refid="2285" relation="include">
        </childnode>
      </node>
      <node id="2263">
        <label>cmath</label>
      </node>
      <node id="2268">
        <label>stdexcept</label>
      </node>
      <node id="2271">
        <label>string</label>
      </node>
      <node id="2280">
        <label>cfloat</label>
      </node>
      <node id="2267">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="2272">
        <label>tuple.hxx</label>
        <link refid="tuple_8hxx_source"/>
        <childnode refid="2273" relation="include">
        </childnode>
      </node>
      <node id="2262">
        <label>mathutil.hxx</label>
        <link refid="mathutil_8hxx_source"/>
        <childnode refid="2263" relation="include">
        </childnode>
        <childnode refid="2264" relation="include">
        </childnode>
        <childnode refid="2265" relation="include">
        </childnode>
        <childnode refid="2266" relation="include">
        </childnode>
        <childnode refid="2269" relation="include">
        </childnode>
        <childnode refid="2272" relation="include">
        </childnode>
        <childnode refid="2274" relation="include">
        </childnode>
        <childnode refid="2279" relation="include">
        </childnode>
        <childnode refid="2282" relation="include">
        </childnode>
      </node>
      <node id="2266">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="2267" relation="include">
        </childnode>
        <childnode refid="2268" relation="include">
        </childnode>
      </node>
      <node id="2279">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="2276" relation="include">
        </childnode>
        <childnode refid="2277" relation="include">
        </childnode>
        <childnode refid="2280" relation="include">
        </childnode>
        <childnode refid="2265" relation="include">
        </childnode>
        <childnode refid="2275" relation="include">
        </childnode>
        <childnode refid="2274" relation="include">
        </childnode>
        <childnode refid="2281" relation="include">
        </childnode>
      </node>
      <node id="2273">
        <label>utility</label>
      </node>
      <node id="2270">
        <label>sstream</label>
      </node>
      <node id="2269">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="2268" relation="include">
        </childnode>
        <childnode refid="2270" relation="include">
        </childnode>
        <childnode refid="2271" relation="include">
        </childnode>
        <childnode refid="2266" relation="include">
        </childnode>
      </node>
      <node id="2286">
        <label>static_assert.hxx</label>
        <link refid="static__assert_8hxx_source"/>
      </node>
      <node id="2264">
        <label>cstdlib</label>
      </node>
      <node id="2276">
        <label>climits</label>
      </node>
      <node id="2275">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="2266" relation="include">
        </childnode>
        <childnode refid="2276" relation="include">
        </childnode>
        <childnode refid="2277" relation="include">
        </childnode>
        <childnode refid="2278" relation="include">
        </childnode>
      </node>
      <node id="2265">
        <label>complex</label>
      </node>
      <node id="2278">
        <label>algorithm</label>
      </node>
      <node id="2261">
        <label>vigra/fixedpoint.hxx</label>
        <link refid="fixedpoint.hxx"/>
        <childnode refid="2262" relation="include">
        </childnode>
        <childnode refid="2286" relation="include">
        </childnode>
        <childnode refid="2269" relation="include">
        </childnode>
        <childnode refid="2279" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2289">
        <label>vigra/splineimageview.hxx</label>
        <link refid="splineimageview_8hxx_source"/>
        <childnode refid="2290" relation="include">
        </childnode>
        <childnode refid="2291" relation="include">
        </childnode>
      </node>
      <node id="2290">
        <label>vigra/affine_registration.hxx</label>
        <link refid="affine__registration_8hxx_source"/>
      </node>
      <node id="2301">
        <label>vigra/symmetry.hxx</label>
        <link refid="symmetry_8hxx_source"/>
      </node>
      <node id="2292">
        <label>vigra/resizeimage.hxx</label>
        <link refid="resizeimage_8hxx_source"/>
        <childnode refid="2293" relation="include">
        </childnode>
        <childnode refid="2307" relation="include">
        </childnode>
      </node>
      <node id="2288">
        <label>vigra/splines.hxx</label>
        <link refid="splines_8hxx_source"/>
        <childnode refid="2289" relation="include">
        </childnode>
        <childnode refid="2292" relation="include">
        </childnode>
      </node>
      <node id="2291">
        <label>vigra/affinegeometry.hxx</label>
        <link refid="affinegeometry_8hxx_source"/>
      </node>
      <node id="2307">
        <label>vigra/multi_resize.hxx</label>
        <link refid="multi__resize_8hxx_source"/>
      </node>
      <node id="2293">
        <label>vigra/stdimagefunctions.hxx</label>
        <link refid="stdimagefunctions_8hxx_source"/>
        <childnode refid="2294" relation="include">
        </childnode>
        <childnode refid="2298" relation="include">
        </childnode>
        <childnode refid="2303" relation="include">
        </childnode>
        <childnode refid="2304" relation="include">
        </childnode>
      </node>
      <node id="2305">
        <label>vigra/watersheds3d.hxx</label>
        <link refid="watersheds3d_8hxx_source"/>
      </node>
      <node id="2296">
        <label>vigra/boundarytensor.hxx</label>
        <link refid="boundarytensor_8hxx_source"/>
      </node>
      <node id="2298">
        <label>vigra/edgedetection.hxx</label>
        <link refid="edgedetection_8hxx_source"/>
        <childnode refid="2299" relation="include">
        </childnode>
      </node>
      <node id="2295">
        <label>vigra/convolution.hxx</label>
        <link refid="convolution_8hxx_source"/>
        <childnode refid="2296" relation="include">
        </childnode>
        <childnode refid="2297" relation="include">
        </childnode>
        <childnode refid="2298" relation="include">
        </childnode>
        <childnode refid="2300" relation="include">
        </childnode>
        <childnode refid="2301" relation="include">
        </childnode>
        <childnode refid="2302" relation="include">
        </childnode>
      </node>
      <node id="2294">
        <label>vigra/nonlineardiffusion.hxx</label>
        <link refid="nonlineardiffusion_8hxx_source"/>
        <childnode refid="2295" relation="include">
        </childnode>
      </node>
      <node id="2299">
        <label>vigra/slanted_edge_mtf.hxx</label>
        <link refid="slanted__edge__mtf_8hxx_source"/>
      </node>
      <node id="2302">
        <label>vigra/tv_filter.hxx</label>
        <link refid="tv__filter_8hxx_source"/>
      </node>
      <node id="2303">
        <label>vigra/seededregiongrowing.hxx</label>
        <link refid="seededregiongrowing_8hxx_source"/>
        <childnode refid="2304" relation="include">
        </childnode>
        <childnode refid="2306" relation="include">
        </childnode>
      </node>
      <node id="2304">
        <label>vigra/seededregiongrowing3d.hxx</label>
        <link refid="seededregiongrowing3d_8hxx_source"/>
        <childnode refid="2305" relation="include">
        </childnode>
      </node>
      <node id="2300">
        <label>vigra/gradient_energy_tensor.hxx</label>
        <link refid="gradient__energy__tensor_8hxx_source"/>
      </node>
      <node id="2306">
        <label>vigra/watersheds.hxx</label>
        <link refid="watersheds_8hxx_source"/>
        <childnode refid="2305" relation="include">
        </childnode>
      </node>
      <node id="2297">
        <label>vigra/cornerdetection.hxx</label>
        <link refid="cornerdetection_8hxx_source"/>
      </node>
      <node id="2287">
        <label>vigra/fixedpoint.hxx</label>
        <link refid="fixedpoint.hxx"/>
        <childnode refid="2288" relation="include">
        </childnode>
        <childnode refid="2289" relation="include">
        </childnode>
        <childnode refid="2302" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classvigra_1_1FixedPoint" prot="public">vigra::FixedPoint</innerclass>
    <innerclass refid="classvigra_1_1FixedPoint16" prot="public">vigra::FixedPoint16</innerclass>
    <innerclass refid="structvigra_1_1FixedPoint16__assignment__error____Target__object__has__too__few__integer__bits" prot="public">vigra::FixedPoint16_assignment_error__Target_object_has_too_few_integer_bits</innerclass>
    <innerclass refid="structvigra_1_1FixedPoint__assignment__error____Target__object__has__too__few__integer__bits" prot="public">vigra::FixedPoint_assignment_error__Target_object_has_too_few_integer_bits</innerclass>
    <innerclass refid="structvigra_1_1FixedPointCast_3_01double_01_4" prot="public">vigra::FixedPointCast&lt; double &gt;</innerclass>
    <innerclass refid="structvigra_1_1FixedPointCast_3_01float_01_4" prot="public">vigra::FixedPointCast&lt; float &gt;</innerclass>
    <innerclass refid="classvigra_1_1FixedPointTraits" prot="public">vigra::FixedPointTraits</innerclass>
    <innerclass refid="classvigra_1_1FixedPointTraits_3_01FixedPoint_3_01IntBits1_00_01FracBits1_01_4_00_01FixedPoint_34872123dd82888bc6afb842ca3523966" prot="public">vigra::FixedPointTraits&lt; FixedPoint&lt; IntBits1, FracBits1 &gt;, FixedPoint&lt; IntBits2, FracBits2 &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1NormTraits_3_01FixedPoint16_3_01IntBits_00_01OverflowHandling_01_4_01_4" prot="public">vigra::NormTraits&lt; FixedPoint16&lt; IntBits, OverflowHandling &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1NormTraits_3_01FixedPoint_3_01IntBits_00_01FracBits_01_4_01_4" prot="public">vigra::NormTraits&lt; FixedPoint&lt; IntBits, FracBits &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1NumericTraits_3_01FixedPoint16_3_01IntBits_00_01OverflowHandling_01_4_01_4" prot="public">vigra::NumericTraits&lt; FixedPoint16&lt; IntBits, OverflowHandling &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1NumericTraits_3_01FixedPoint_3_01IntBits_00_01FracBits_01_4_01_4" prot="public">vigra::NumericTraits&lt; FixedPoint&lt; IntBits, FracBits &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1PromoteTraits_3_01FixedPoint16_3_01IntBits_00_01OverflowHandling_01_4_00_01FixedP8a07e281c4c77e368fab89310cfe3cc6" prot="public">vigra::PromoteTraits&lt; FixedPoint16&lt; IntBits, OverflowHandling &gt;, FixedPoint16&lt; IntBits, OverflowHandling &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1PromoteTraits_3_01FixedPoint16_3_01IntBits1_00_01OverflowHandling_01_4_00_01Fixed74e39303687c60d0e7302a6e66328990" prot="public">vigra::PromoteTraits&lt; FixedPoint16&lt; IntBits1, OverflowHandling &gt;, FixedPoint16&lt; IntBits2, OverflowHandling &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1PromoteTraits_3_01FixedPoint_3_01IntBits1_00_01FracBits1_01_4_00_01FixedPoint_3_09e4e6cd653fb78fcea70f98c67a41ffe" prot="public">vigra::PromoteTraits&lt; FixedPoint&lt; IntBits1, FracBits1 &gt;, FixedPoint&lt; IntBits2, FracBits2 &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1SquareRootTraits_3_01FixedPoint16_3_01IntBits_00_01OverflowHandling_01_4_01_4" prot="public">vigra::SquareRootTraits&lt; FixedPoint16&lt; IntBits, OverflowHandling &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1SquareRootTraits_3_01FixedPoint_3_01IntBits_00_01FracBits_01_4_01_4" prot="public">vigra::SquareRootTraits&lt; FixedPoint&lt; IntBits, FracBits &gt; &gt;</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="fixedpoint_8hxx_1a14855a99fd969f1038926d612c239d65" prot="public" static="no">
        <name>VIGRA_FIXED_POINT_CAST</name>
        <param><defname>type</defname></param>
        <initializer>template &lt;&gt; \
struct FixedPointCast&lt;type&gt; \
{ \
    template &lt;unsigned IntBits, unsigned FracBits&gt; \
    static type cast(FixedPoint&lt;IntBits, FracBits&gt; v) \
    { \
        return round(v); \
    } \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/fixedpoint.hxx" line="427" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/fixedpoint.hxx" bodystart="1386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fixedpoint_8hxx_1a14855a99fd969f1038926d612c239d65" prot="public" static="no">
        <name>VIGRA_FIXED_POINT_CAST</name>
        <param><defname>type</defname></param>
        <initializer>template &lt;&gt; \
struct FixedPoint16Cast&lt;type&gt; \
{ \
    template &lt;int IntBits, FPOverflowHandling OverflowHandling&gt; \
    static type cast(FixedPoint16&lt;IntBits, OverflowHandling&gt; v) \
    { \
        return round(v); \
    } \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/fixedpoint.hxx" line="1395" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/fixedpoint.hxx" bodystart="1386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fixedpoint_8hxx_1acaa8cb34c4f909811405912d98016e09" prot="public" static="no">
        <name>VIGRA_FIXED_POINT_FACTORY</name>
        <param><defname>T</defname></param>
        <param><defname>INTBITS</defname></param>
        <initializer>inline FixedPoint&lt;INTBITS, 0&gt; fixedPoint(T t) \
    { \
        return FixedPoint&lt;INTBITS, 0&gt;(t, FPNoShift); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/fixedpoint.hxx" line="405" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/fixedpoint.hxx" bodystart="401" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2004-2005<sp/>by<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_FIXEDPOINT_HXX</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_FIXEDPOINT_HXX</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mathutil.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;static_assert.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;numerictraits.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>IntBits,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FractionalBits&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FixedPoint;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Error_FixedPointTraits_not_specialized_for_this_case;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FixedPointTraits</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Error_FixedPointTraits_not_specialized_for_this_case<sp/>PlusType;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Error_FixedPointTraits_not_specialized_for_this_case<sp/>MinusType;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Error_FixedPointTraits_not_specialized_for_this_case<sp/>MultipliesType;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>typedef<sp/>Error_FixedPointTraits_not_specialized_for_this_case<sp/>DividesType;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>type<sp/>policy:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>try<sp/>to<sp/>allocate<sp/>enough<sp/>bits<sp/>to<sp/>represent<sp/>the<sp/>biggest<sp/>possible<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>case<sp/>of<sp/>add/subtract:<sp/>if<sp/>all<sp/>bits<sp/>of<sp/>the<sp/>internal<sp/>int<sp/>are<sp/>used<sp/>up,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep<sp/>the<sp/>representation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>IntBits1,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FracBits1,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>IntBits2,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>MaxIntBits<sp/><sp/>=<sp/>(IntBits1<sp/>&lt;<sp/>IntBits2)<sp/>?<sp/>IntBits2<sp/>:<sp/>IntBits1,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PlusMinusIntBits<sp/>=<sp/>(MaxIntBits<sp/>+<sp/>1<sp/>+<sp/>MaxFracBits<sp/>&lt;<sp/>32)<sp/>?</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaxIntBits<sp/>+<sp/>1<sp/>:<sp/>MaxIntBits,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultipliesFracBits<sp/>=<sp/>(IntBits1<sp/>+<sp/>IntBits2<sp/>&lt;<sp/>31)<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(FracBits1<sp/>+<sp/>FracBits2)<sp/>&gt;<sp/>(31<sp/>-<sp/>IntBits1<sp/>-<sp/>IntBits2)<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>31<sp/>-<sp/>IntBits1<sp/>-<sp/>IntBits2</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>FracBits1<sp/>+<sp/>FracBits2</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>0</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FixedPoint&lt;PlusMinusIntBits,<sp/>MaxFracBits&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PlusType;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FixedPoint&lt;PlusMinusIntBits,<sp/>MaxFracBits&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinusType;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FixedPoint&lt;IntBits1<sp/>+<sp/>IntBits2,<sp/>MultipliesFracBits&gt;<sp/><sp/>MultipliesType;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;IntBits1<sp/>+<sp/>FracBits2,<sp/>FracBits1<sp/>+<sp/>IntBits2&gt;<sp/><sp/>DividesType;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>IntBits,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SquareRootTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>SRTotalBits<sp/>=<sp/>(IntBits<sp/>+<sp/>FracBits<sp/>+<sp/>1)<sp/>/<sp/>2,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SRIntBits<sp/><sp/><sp/>=<sp/>(IntBits<sp/>+<sp/>1)<sp/>/<sp/>2,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SRFracBits<sp/><sp/>=<sp/>SRTotalBits<sp/>-<sp/>SRIntBits</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/><sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FixedPoint&lt;SRIntBits,<sp/>SRFracBits&gt;<sp/><sp/>SquareRootResult;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SquareRootArgument;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOXYGEN</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FixedPoint_overflow_error__More_than_31_bits_requested</highlight></codeline>
<codeline lineno="103"><highlight class="normal">:<sp/>staticAssert::AssertBool&lt;(N<sp/>&lt;<sp/>32)&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>DOXYGEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">template<sp/>&lt;bool<sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">struct<sp/>FixedPoint_assignment_error__Target_object_has_too_few_integer_bits</highlight></codeline>
<codeline lineno="112"><highlight class="normal">:<sp/>staticAssert::AssertBool&lt;Predicate&gt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">enum<sp/>FixedPointNoShift<sp/>{<sp/>FPNoShift<sp/>};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">namespace<sp/>detail<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">template<sp/>&lt;bool<sp/>MustRound&gt;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">struct<sp/>FPAssignWithRound;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">struct<sp/>FPAssignWithRound&lt;false&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>N&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>int<sp/>exec(int<sp/>v)<sp/>{<sp/>return<sp/>v<sp/>&lt;&lt;<sp/>(-N);<sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">struct<sp/>FPAssignWithRound&lt;true&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>N&gt;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>int<sp/>exec(int<sp/>const<sp/>v)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(v<sp/>+<sp/>(1<sp/>&lt;&lt;<sp/>(N<sp/>-<sp/>1)))<sp/>&gt;&gt;<sp/>(N);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">template<sp/>&lt;bool<sp/>MustRound&gt;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">struct<sp/>FPMulImplementation;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">struct<sp/>FPMulImplementation&lt;false&gt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>N&gt;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>int<sp/>exec(int<sp/>l,<sp/>int<sp/>r)<sp/>{<sp/>return<sp/>(l<sp/>*<sp/>r)<sp/>&lt;&lt;<sp/>(-N);<sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">struct<sp/>FPMulImplementation&lt;true&gt;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>N&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>int<sp/>exec(int<sp/>l,<sp/>int<sp/>r)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>not<sp/>enough<sp/>space<sp/>in<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=&gt;<sp/>perform<sp/>calculations<sp/>that<sp/>preserve<sp/>as<sp/>much<sp/>accuracy<sp/>as<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>diffl<sp/>=<sp/>N<sp/>/<sp/>2,<sp/>diffr<sp/>=<sp/>N<sp/><sp/>-<sp/>diffl,<sp/>maskl<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>diffl)<sp/>-<sp/>1,<sp/>maskr<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>diffr)<sp/>-<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>shiftl<sp/>=<sp/>l<sp/>&gt;&gt;<sp/>diffl;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>shiftr<sp/>=<sp/>r<sp/>&gt;&gt;<sp/>diffr;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>shiftl<sp/>*<sp/>shiftr<sp/>+<sp/>(((l<sp/>&amp;<sp/>maskl)<sp/>*<sp/>shiftr)<sp/>&gt;&gt;<sp/>diffl)<sp/>+</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((r<sp/>&amp;<sp/>maskr)<sp/>*<sp/>shiftl)<sp/>&gt;&gt;<sp/>diffr);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal">};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment">/**<sp/>Template<sp/>for<sp/>fixed<sp/>point<sp/>arithmetic.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/>Fixed<sp/>point<sp/>arithmetic<sp/>is<sp/>used<sp/>when<sp/>computations<sp/>with<sp/>fractional<sp/>accuracy</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/>must<sp/>be<sp/>made<sp/>at<sp/>the<sp/>highest<sp/>speed<sp/>possible<sp/>(e.g.<sp/>in<sp/>the<sp/>inner<sp/>loop</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>a<sp/>volume<sp/>rendering<sp/>routine).<sp/>The<sp/>speed-up<sp/>relative<sp/>to<sp/>floating</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>point<sp/>arithmetic<sp/>can<sp/>be<sp/>dramatic,<sp/>especially<sp/>when<sp/>one<sp/>can<sp/>avoid</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/>conversions<sp/>between<sp/>integer<sp/>and<sp/>floating<sp/>point<sp/>numbers<sp/>(these<sp/>are<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/>very<sp/>expensive<sp/>because<sp/>integer<sp/>and<sp/>floating<sp/>point<sp/>arithmetic</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/>resides<sp/>in<sp/>different<sp/>pipelines).<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>template<sp/>wraps<sp/>an<sp/>&lt;tt&gt;int&lt;/tt&gt;<sp/>and<sp/>uses<sp/>&lt;tt&gt;IntBits&lt;/tt&gt;<sp/>to</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/>represent<sp/>the<sp/>integral<sp/>part<sp/>of<sp/>a<sp/>number,<sp/>and<sp/>&lt;tt&gt;FractionalBits&lt;/tt&gt;</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>the<sp/>fractional<sp/>part,<sp/>where<sp/>&lt;tt&gt;IntBits<sp/>+<sp/>FractionalBits<sp/>&lt;<sp/>32&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/>(The<sp/>32rd<sp/>bit<sp/>is<sp/>reserved<sp/>because<sp/>FixedPoint<sp/>is<sp/>a<sp/>signed<sp/>type).</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/>These<sp/>numbers<sp/>will<sp/>be<sp/>automatically<sp/>allocated<sp/>in<sp/>an<sp/>intelligent<sp/>way</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>the<sp/>result<sp/>of<sp/>an<sp/>arithmetic<sp/>operation.<sp/>For<sp/>example,<sp/>when<sp/>two<sp/></highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/>fixed<sp/>point<sp/>numbers<sp/>are<sp/>multiplied,<sp/>the<sp/>required<sp/>number<sp/>of<sp/>integer</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/>bits<sp/>in<sp/>the<sp/>result<sp/>is<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>number<sp/>of<sp/>integer<sp/>bits<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/>arguments,<sp/>but<sp/>only<sp/>when<sp/>so<sp/>many<sp/>bits<sp/>are<sp/>available.<sp/>This<sp/>is<sp/>figured<sp/>out</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/>by<sp/>means<sp/>of<sp/>FixedPointTraits,<sp/>and<sp/>a<sp/>compile-time<sp/>error<sp/>is<sp/>raised</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/>when<sp/>no<sp/>suitable<sp/>representation<sp/>can<sp/>be<sp/>found.<sp/>The<sp/>idea<sp/>is<sp/>that<sp/>the<sp/>right</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/>thing<sp/>happens<sp/>automatically<sp/>as<sp/>often<sp/>as<sp/>possible.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;FixedPoint&lt;/tt&gt;<sp/>implements<sp/>the<sp/>required<sp/>interface<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/>\ref<sp/>AlgebraicRing<sp/>and<sp/>the<sp/>required<sp/>numeric<sp/>and</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/>promotion<sp/>traits.<sp/>In<sp/>addition,<sp/>it<sp/>supports<sp/>functions<sp/>&lt;tt&gt;add&lt;/tt&gt;,<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;sub&lt;/tt&gt;,<sp/>and<sp/>&lt;tt&gt;mul&lt;/tt&gt;,<sp/>where<sp/>a<sp/>particular<sp/>layout<sp/>of<sp/>the<sp/>result<sp/>can</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/>be<sp/>enforced.<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;unsigned<sp/>char,<sp/>signed<sp/>char,<sp/>unsigned<sp/>short,<sp/>signed<sp/>short,<sp/>int&lt;/tt&gt;<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>transformed<sp/>into<sp/>a<sp/>FixedPoint<sp/>with<sp/>appropriate<sp/>layout<sp/>by<sp/>means<sp/>of<sp/>the<sp/>factory</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>function<sp/>&lt;tt&gt;fixedPoint()&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;See<sp/>also:&lt;/b&gt;</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;ul&gt;</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>\ref<sp/>FixedPointOperations</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>\ref<sp/>FixedPointTraits</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/ul&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/fixedpoint.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="215"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FractionalBits&gt;</highlight></codeline>
<codeline lineno="217" refid="classvigra_1_1FixedPoint" refkind="compound"><highlight class="normal">class<sp/>FixedPoint</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INT_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>IntBits,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FRACTIONAL_BITS<sp/>=<sp/>FractionalBits,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TOTAL_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>IntBits<sp/>+<sp/>FractionalBits,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(int)(((unsigned)1<sp/>&lt;&lt;<sp/>TOTAL_BITS)<sp/>-<sp/>1),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>FractionalBits,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ONE_HALF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ONE<sp/>&gt;&gt;<sp/>1,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FRACTIONAL_MASK<sp/>=<sp/>ONE<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INT_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MAX<sp/>^<sp/>FRACTIONAL_MASK</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>Int32<sp/>value;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint()</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_overflow_error__More_than_31_bits_requested&lt;(IntBits<sp/>+<sp/>FractionalBits)&gt;));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>from<sp/>an<sp/>int<sp/>(fractional<sp/>part<sp/>will<sp/>become<sp/>zero).</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="classvigra_1_1FixedPoint_1a2dedc2ba1aaf5d814edcb785bcb30512" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>FixedPoint(int<sp/>v)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(v<sp/>&lt;&lt;<sp/>FractionalBits)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_overflow_error__More_than_31_bits_requested&lt;(IntBits<sp/>+<sp/>FractionalBits)&gt;));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>from<sp/>an<sp/>int<sp/>by<sp/>a<sp/>bitwise<sp/>copy.<sp/>This<sp/>is<sp/>normally<sp/>only<sp/>used<sp/>internally.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classvigra_1_1FixedPoint_1af28ba894273246081fe3b1756bf4d17e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint(int<sp/>v,<sp/>FixedPointNoShift)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(v)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_overflow_error__More_than_31_bits_requested&lt;(IntBits<sp/>+<sp/>FractionalBits)&gt;));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>from<sp/>an<sp/>double<sp/>and<sp/>round<sp/>the<sp/>fractional<sp/>part<sp/>to<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;FractionalBits&lt;/tt&gt;<sp/>accuracy.<sp/>A<sp/>PreconditionViolation<sp/>exception<sp/>is<sp/>raised<sp/>when</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>integer<sp/>part<sp/>is<sp/>too<sp/>small<sp/>to<sp/>represent<sp/>the<sp/>number.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classvigra_1_1FixedPoint_1a92327b1f1aff062d9f1ecf4b94f85139" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>FixedPoint(double<sp/>rhs)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value((int)round(rhs<sp/>*<sp/>ONE))</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_overflow_error__More_than_31_bits_requested&lt;(IntBits<sp/>+<sp/>FractionalBits)&gt;));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(abs(rhs<sp/>*<sp/>ONE)<sp/>&lt;=<sp/>(double)MAX,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FixedPoint(double<sp/>rhs):<sp/>Too<sp/>few<sp/>integer<sp/>bits<sp/>to<sp/>convert<sp/>rhs.&quot;);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>constructor.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="classvigra_1_1FixedPoint_1a87245f63852407d1b2b4fb0e67fa2ecb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint(const<sp/>FixedPoint<sp/>&amp;other)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(other.value)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>from<sp/>a<sp/>FixedPoint<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate<sp/>and<sp/>raises</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>compile-time<sp/>error<sp/>when<sp/>the<sp/>target<sp/>type<sp/>has<sp/>too<sp/>few<sp/>integer<sp/>bits.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>Int2,<sp/>unsigned<sp/>Frac2&gt;</highlight></codeline>
<codeline lineno="276" refid="classvigra_1_1FixedPoint_1aec7846eb94b6d9667b69bac95fff8af9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint(const<sp/>FixedPoint&lt;Int2,<sp/>Frac2&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(detail::FPAssignWithRound&lt;(Frac2<sp/>&gt;<sp/>FractionalBits)&gt;::template<sp/>exec&lt;Frac2<sp/>-<sp/>FractionalBits&gt;(other.value))</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_overflow_error__More_than_31_bits_requested&lt;(IntBits<sp/>+<sp/>FractionalBits)&gt;));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_assignment_error__Target_object_has_too_few_integer_bits&lt;(IntBits<sp/>&gt;=<sp/>Int2)&gt;));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Assignment<sp/>from<sp/>int.<sp/>The<sp/>fractional<sp/>part<sp/>will<sp/>become<sp/>zero.<sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>PreconditionViolation<sp/>exception<sp/>is<sp/>raised<sp/>when</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>integer<sp/>part<sp/>is<sp/>too<sp/>small<sp/>to<sp/>represent<sp/>the<sp/>number.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="classvigra_1_1FixedPoint_1aa5d0123db2c7f75cb7348f3108244ccf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;operator=(int<sp/>rhs)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(abs(rhs)<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>IntBits),</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FixedPoint::operator=(int<sp/>rhs):<sp/>Too<sp/>few<sp/>integer<sp/>bits<sp/>to<sp/>represent<sp/>rhs.&quot;);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>rhs<sp/>&lt;&lt;<sp/>FractionalBits;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Assignment<sp/>form<sp/>double.<sp/>The<sp/>fractional<sp/>part<sp/>is<sp/>rounded,<sp/>and<sp/>a<sp/></highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PreconditionViolation<sp/>exception<sp/>is<sp/>raised<sp/>when</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>integer<sp/>part<sp/>is<sp/>too<sp/>small<sp/>to<sp/>represent<sp/>the<sp/>number.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="classvigra_1_1FixedPoint_1aae8e6366846f2b297e5738c3880d2f48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;operator=(double<sp/>rhs)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(abs(rhs)<sp/>&lt;=<sp/>((1<sp/>&lt;&lt;<sp/>IntBits)<sp/>-<sp/>1),</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FixedPoint::operator=(double<sp/>rhs):<sp/>Too<sp/>few<sp/>integer<sp/>bits<sp/>to<sp/>convert<sp/>rhs.&quot;);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>(int)round(rhs<sp/>*<sp/>ONE);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>assignment.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="classvigra_1_1FixedPoint_1a07deca5c46c75501384259bee8882b33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;<sp/>operator=(const<sp/>FixedPoint<sp/>&amp;other)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>other.value;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Assignment<sp/>from<sp/>a<sp/>FixedPoint<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate<sp/>and<sp/>raises</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>compile-time<sp/>error<sp/>when<sp/>the<sp/>target<sp/>type<sp/>has<sp/>too<sp/>few<sp/>integer<sp/>bits.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>Int2,<sp/>unsigned<sp/>Frac2&gt;</highlight></codeline>
<codeline lineno="319" refid="classvigra_1_1FixedPoint_1a8e50166da807887f9310afa03e949c53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;<sp/>operator=(const<sp/>FixedPoint&lt;Int2,<sp/>Frac2&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_assignment_error__Target_object_has_too_few_integer_bits&lt;(IntBits<sp/>&gt;=<sp/>Int2)&gt;));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FPAssignWithRound&lt;(Frac2<sp/>&gt;<sp/>FractionalBits)&gt;::template<sp/>exec&lt;Frac2<sp/>-<sp/>FractionalBits&gt;(other.value);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Negation.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="classvigra_1_1FixedPoint_1a172c92646a2b5d605d9fd5b283ecc947" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>operator-()<sp/>const</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FixedPoint(-value,<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Pre-increment.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classvigra_1_1FixedPoint_1ad13bc83c2ee2b6e7d9a0d19a21f73ffc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;<sp/>operator++()</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>ONE;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Post-increment.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="classvigra_1_1FixedPoint_1a05f89e2c3f195ba0dc6add2b7e5fdeb5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>operator++(int)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint<sp/>old(*this);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>ONE;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>old;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Pre-decrement.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="classvigra_1_1FixedPoint_1a6eca67b2f959f6cb1704c3d22819f724" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;<sp/>operator--()</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>-=<sp/>ONE;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Post-decrement.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classvigra_1_1FixedPoint_1acfae10c6d098ede53d3fab0d2df0e9bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>operator--(int)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint<sp/>old(*this);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>-=<sp/>ONE;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>old;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Add-assignment<sp/>from<sp/>a<sp/>FixedPoint<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate<sp/>and<sp/>raises</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>compile-time<sp/>error<sp/>when<sp/>the<sp/>target<sp/>type<sp/>has<sp/>too<sp/>few<sp/>integer<sp/>bits.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>Int2,<sp/>unsigned<sp/>Frac2&gt;</highlight></codeline>
<codeline lineno="371" refid="classvigra_1_1FixedPoint_1abaa9ee2b73ffcf28dd6412b9438bfc56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;<sp/>operator+=(const<sp/>FixedPoint&lt;Int2,<sp/>Frac2&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_assignment_error__Target_object_has_too_few_integer_bits&lt;(IntBits<sp/>&gt;=<sp/>Int2)&gt;));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>detail::FPAssignWithRound&lt;(Frac2<sp/>&gt;<sp/>FractionalBits)&gt;::template<sp/>exec&lt;Frac2<sp/>-<sp/>FractionalBits&gt;(other.value);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Subtract-assignment<sp/>from<sp/>a<sp/>FixedPoint<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate<sp/>and<sp/>raises</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>compile-time<sp/>error<sp/>when<sp/>the<sp/>target<sp/>type<sp/>has<sp/>too<sp/>few<sp/>integer<sp/>bits.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>Int2,<sp/>unsigned<sp/>Frac2&gt;</highlight></codeline>
<codeline lineno="382" refid="classvigra_1_1FixedPoint_1aa644a73b95a07aaf0f7c154a8a2e6058" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;<sp/>operator-=(const<sp/>FixedPoint&lt;Int2,<sp/>Frac2&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_assignment_error__Target_object_has_too_few_integer_bits&lt;(IntBits<sp/>&gt;=<sp/>Int2)&gt;));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>-=<sp/>detail::FPAssignWithRound&lt;(Frac2<sp/>&gt;<sp/>FractionalBits)&gt;::template<sp/>exec&lt;Frac2<sp/>-<sp/>FractionalBits&gt;(other.value);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Multiply-assignment<sp/>from<sp/>a<sp/>FixedPoint<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate<sp/>and<sp/>raises</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>compile-time<sp/>error<sp/>when<sp/>the<sp/>target<sp/>type<sp/>has<sp/>too<sp/>few<sp/>integer<sp/>bits.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>Int2,<sp/>unsigned<sp/>Frac2&gt;</highlight></codeline>
<codeline lineno="393" refid="classvigra_1_1FixedPoint_1a5531f2343976aa682285d0498e3cf85f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint<sp/>&amp;<sp/>operator*=(const<sp/>FixedPoint&lt;Int2,<sp/>Frac2&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_assignment_error__Target_object_has_too_few_integer_bits&lt;(IntBits<sp/>&gt;=<sp/>Int2)&gt;));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FPMulImplementation&lt;(Frac2<sp/>&gt;<sp/>0)&gt;::template<sp/>exec&lt;Frac2&gt;(value,<sp/>other.value);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal">};</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">#define<sp/>VIGRA_FIXED_POINT_FACTORY(T,<sp/>INTBITS)<sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>FixedPoint&lt;INTBITS,<sp/>0&gt;<sp/>fixedPoint(T<sp/>t)<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FixedPoint&lt;INTBITS,<sp/>0&gt;(t,<sp/>FPNoShift);<sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">VIGRA_FIXED_POINT_FACTORY(unsigned<sp/>char,<sp/>8)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">VIGRA_FIXED_POINT_FACTORY(signed<sp/>char,<sp/>7)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">VIGRA_FIXED_POINT_FACTORY(unsigned<sp/>short,<sp/>16)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">VIGRA_FIXED_POINT_FACTORY(signed<sp/>short,<sp/>15)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">VIGRA_FIXED_POINT_FACTORY(int,<sp/>31)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">#undef<sp/>VIGRA_FIXED_POINT_FACTORY</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">struct<sp/>FixedPointCast;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">#define<sp/>VIGRA_FIXED_POINT_CAST(type)<sp/>\</highlight></codeline>
<codeline lineno="419"><highlight class="normal">template<sp/>&lt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="420"><highlight class="normal">struct<sp/>FixedPointCast&lt;type&gt;<sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{<sp/>\</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;<sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>type<sp/>cast(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)<sp/>\</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>round(v);<sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="normal">};</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">VIGRA_FIXED_POINT_CAST(Int8)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">VIGRA_FIXED_POINT_CAST(UInt8)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">VIGRA_FIXED_POINT_CAST(Int16)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">VIGRA_FIXED_POINT_CAST(UInt16)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">VIGRA_FIXED_POINT_CAST(Int32)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">VIGRA_FIXED_POINT_CAST(UInt32)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">#undef<sp/>VIGRA_FIXED_POINT_CAST</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">struct<sp/>FixedPointCast&lt;float&gt;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>float<sp/>cast(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(float)v.value<sp/>/<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;::ONE;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal">};</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">struct<sp/>FixedPointCast&lt;double&gt;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>cast(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(double)v.value<sp/>/<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;::ONE;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal">};</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPointOperations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="464"><highlight class="comment">/**<sp/>\addtogroup<sp/>FixedPointOperations<sp/>Functions<sp/>for<sp/>FixedPoint</highlight></codeline>
<codeline lineno="465"><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/>\brief<sp/><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/fixedpoint.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="467"><highlight class="comment"></highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/>These<sp/>functions<sp/>fulfill<sp/>the<sp/>requirements<sp/>of<sp/>an<sp/>\ref<sp/>AlgebraicRing.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"></highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;p&gt;</highlight></codeline>
<codeline lineno="472"><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="475"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Convert<sp/>a<sp/>FixedPoint<sp/>to<sp/>a<sp/>built-in<sp/>type.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>target<sp/>is<sp/>integral,<sp/>the<sp/>value<sp/>is<sp/>rounded.&lt;br&gt;</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Usage:</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint&lt;16,15&gt;<sp/>fp(...);</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>d<sp/>=<sp/>fixed_point_cast&lt;double&gt;(fp);</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">template<sp/>&lt;class<sp/>TARGET,<sp/>unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="486" refid="group__FixedPointOperations_1ga4ab4a9ac3f89439366bbbcb41e1aed78" refkind="member"><highlight class="normal">TARGET<sp/>fixed_point_cast(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>FixedPointCast&lt;TARGET&gt;::cast(v);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>equal</highlight></codeline>
<codeline lineno="492"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="494" refid="group__FixedPointOperations_1ga7959490c564db011ada37b265098ff1b" refkind="member"><highlight class="normal">bool<sp/>operator==(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1<sp/>};</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits1))<sp/>==<sp/>(r.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits2));</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>not<sp/>equal</highlight></codeline>
<codeline lineno="501"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="503" refid="group__FixedPointOperations_1ga9e4bf57b03373af7a703d55f339bae6f" refkind="member"><highlight class="normal">bool<sp/>operator!=(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1<sp/>};</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits1))<sp/>!=<sp/>(r.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits2));</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="510"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="512" refid="group__FixedPointOperations_1ga59b7015d21fe02774a7663e6b663e3fc" refkind="member"><highlight class="normal">bool<sp/>operator&lt;(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1<sp/>};</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits1))<sp/>&lt;<sp/>(r.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits2));</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less<sp/>or<sp/>equal</highlight></codeline>
<codeline lineno="519"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="520"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="521" refid="group__FixedPointOperations_1ga7a2707122ac37df0e799ee89ff743791" refkind="member"><highlight class="normal">bool<sp/>operator&lt;=(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1<sp/>};</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits1))<sp/>&lt;=<sp/>(r.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits2));</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater</highlight></codeline>
<codeline lineno="528"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="530" refid="group__FixedPointOperations_1gab8c9b89e1d7d338ca3243a0a6226a331" refkind="member"><highlight class="normal">bool<sp/>operator&gt;(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1<sp/>};</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits1))<sp/>&gt;<sp/>(r.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits2));</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater<sp/>or<sp/>equal</highlight></codeline>
<codeline lineno="537"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="538"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="539" refid="group__FixedPointOperations_1ga9e66b07e0f99f4a0c73afe630d9ec9e6" refkind="member"><highlight class="normal">bool<sp/>operator&gt;=(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1<sp/>};</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits1))<sp/>&gt;=<sp/>(r.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits2));</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>addition<sp/>with<sp/>automatic<sp/>determination<sp/>of<sp/>the<sp/>appropriate<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="547"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="548"><highlight class="normal">typename<sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;::PlusType</highlight></codeline>
<codeline lineno="549" refid="group__FixedPointOperations_1ga5118563b514d92b592eda37c2a3e7fa7" refkind="member"><highlight class="normal">operator+(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1<sp/>};</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>typename</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;::</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PlusType((l.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits1))<sp/>+<sp/>(r.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits2)),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>addition<sp/>with<sp/>enforced<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>IntBits3,<sp/>unsigned<sp/>FracBits3&gt;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">inline<sp/>void</highlight></codeline>
<codeline lineno="561" refid="group__FixedPointOperations_1ga95690fd14be4c66dbf3d3afbc852b15c" refkind="member"><highlight class="normal">add(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint&lt;IntBits3,<sp/>FracBits3&gt;<sp/>&amp;<sp/>result)</highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>l<sp/>+<sp/>r;</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>subtraction<sp/>with<sp/>automatic<sp/>determination<sp/>of<sp/>the<sp/>appropriate<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="570"><highlight class="normal">typename<sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;::MinusType</highlight></codeline>
<codeline lineno="571" refid="group__FixedPointOperations_1gaa3204b9190ad43595261ccb307ed1d17" refkind="member"><highlight class="normal">operator-(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MaxFracBits<sp/>=<sp/>(FracBits1<sp/>&lt;<sp/>FracBits2)<sp/>?<sp/>FracBits2<sp/>:<sp/>FracBits1<sp/>};</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>typename</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;::</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinusType((l.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits1))<sp/>-<sp/>(r.value<sp/>&lt;&lt;<sp/>(MaxFracBits<sp/>-<sp/>FracBits2)),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>subtraction<sp/>with<sp/>enforced<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>IntBits3,<sp/>unsigned<sp/>FracBits3&gt;</highlight></codeline>
<codeline lineno="582"><highlight class="normal">inline<sp/>void</highlight></codeline>
<codeline lineno="583" refid="group__FixedPointOperations_1gaa403dd4b5533c2e3000ade778bbf6f81" refkind="member"><highlight class="normal">sub(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint&lt;IntBits3,<sp/>FracBits3&gt;<sp/>&amp;<sp/>result)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>l<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>multiplication<sp/>with<sp/>automatic<sp/>determination<sp/>of<sp/>the<sp/>appropriate<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="590"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="591"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="592"><highlight class="normal">typename<sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;::MultipliesType</highlight></codeline>
<codeline lineno="593" refid="group__FixedPointOperations_1ga10a6b2f01e72815d91a4ddb93d087c05" refkind="member"><highlight class="normal">operator*(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r)</highlight></codeline>
<codeline lineno="594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;::</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultipliesType<sp/>res;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>mul(l,<sp/>r,<sp/>res);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>multiplication<sp/>with<sp/>enforced<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>IntBits3,<sp/>unsigned<sp/>FracBits3&gt;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">inline<sp/>void</highlight></codeline>
<codeline lineno="605" refid="group__FixedPointOperations_1ga71573012351636ef982341cf3eb1d669" refkind="member"><highlight class="normal">mul(FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;<sp/>l,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>r,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint&lt;IntBits3,<sp/>FracBits3&gt;<sp/>&amp;<sp/>result)</highlight></codeline>
<codeline lineno="607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_assignment_error__Target_object_has_too_few_integer_bits&lt;(IntBits1<sp/>+<sp/>IntBits2<sp/>&lt;=<sp/>IntBits3)&gt;));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>diff<sp/>=<sp/>FracBits1<sp/>+<sp/>FracBits2<sp/>-<sp/>FracBits3<sp/>};</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>result.value<sp/>=<sp/>detail::FPMulImplementation&lt;(diff<sp/>&gt;<sp/>0)&gt;::template<sp/>exec&lt;diff&gt;(l.value,<sp/>r.value);</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>square<sp/>root.</highlight></codeline>
<codeline lineno="614"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="615"><highlight class="normal">inline<sp/>typename<sp/>SquareRootTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;::SquareRootResult</highlight></codeline>
<codeline lineno="616" refid="group__FixedPointOperations_1ga22d75753836176f3d172f58be11ecc4c" refkind="member"><highlight class="normal">sqrt(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>typename<sp/>SquareRootTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;::SquareRootResult(sqrti(v.value),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>absolute<sp/>value.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">inline<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="624" refid="group__FixedPointOperations_1gaba00245aebd1c55103070dcd45a77483" refkind="member"><highlight class="normal">abs(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;(abs(v.value),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>squared<sp/>norm<sp/>(same<sp/>as<sp/>v*v).</highlight></codeline>
<codeline lineno="630"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="632"><highlight class="normal">typename<sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;,<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;::MultipliesType</highlight></codeline>
<codeline lineno="633" refid="group__FixedPointOperations_1ga0677c47f51a629befaf13be48958b16b" refkind="member"><highlight class="normal">squaredNorm(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="634"><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>v*v;</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>norm<sp/>(same<sp/>as<sp/>abs).</highlight></codeline>
<codeline lineno="639"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="641"><highlight class="normal">FixedPoint&lt;IntBits,<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="642" refid="group__FixedPointOperations_1ga9ddeb69f0746e04e95bc94055e787156" refkind="member"><highlight class="normal">norm(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>const<sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>abs(v);</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>fractional<sp/>part.</highlight></codeline>
<codeline lineno="648"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="649"><highlight class="normal">inline<sp/>FixedPoint&lt;0,<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="650" refid="group__FixedPointOperations_1gadc20c2a584e4c99a7333bbfac71fe202" refkind="member"><highlight class="normal">frac(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>FixedPoint&lt;0,<sp/>FracBits&gt;(v.value<sp/>&amp;<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;::FRACTIONAL_MASK,<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>dual<sp/>fractional<sp/>part:<sp/>&lt;tt&gt;1<sp/>-<sp/>frac(v)&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="657"><highlight class="normal">inline<sp/>FixedPoint&lt;0,<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="658" refid="group__FixedPointOperations_1ga876ce07d607656544570073d92bf14bf" refkind="member"><highlight class="normal">dual_frac(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>FixedPoint&lt;0,<sp/>FracBits&gt;(FixedPoint&lt;0,<sp/>FracBits&gt;::ONE<sp/>-<sp/></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v.value<sp/>&amp;<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;::FRACTIONAL_MASK),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>rounding<sp/>down.</highlight></codeline>
<codeline lineno="665"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">inline<sp/>int</highlight></codeline>
<codeline lineno="667" refid="group__FixedPointOperations_1gaf8fe85520fc0bc2d77ec8e6cf26f3c5d" refkind="member"><highlight class="normal">floor(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>return(v.value<sp/>&gt;&gt;<sp/>FracBits);</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>rounding<sp/>up.</highlight></codeline>
<codeline lineno="673"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="674"><highlight class="normal">inline<sp/>int</highlight></codeline>
<codeline lineno="675" refid="group__FixedPointOperations_1ga14fe7b9ffa21e091c6ff4ede68717c30" refkind="member"><highlight class="normal">ceil(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>return((v.value<sp/>+<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;::FRACTIONAL_MASK)<sp/>&gt;&gt;<sp/>FracBits);</highlight></codeline>
<codeline lineno="678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>rounding<sp/>to<sp/>the<sp/>nearest<sp/>integer.</highlight></codeline>
<codeline lineno="681"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">inline<sp/>int</highlight></codeline>
<codeline lineno="683" refid="group__FixedPointOperations_1gaddcb15f9b13ee9ba98ee1e5b8e228544" refkind="member"><highlight class="normal">round(FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>v)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>return((v.value<sp/>+<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;::ONE_HALF)<sp/>&gt;&gt;<sp/>FracBits);</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="688"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="689"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint-Traits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="696"><highlight class="comment">/**<sp/>\page<sp/>FixedPointTraits<sp/>Numeric<sp/>and<sp/>Promote<sp/>Traits<sp/>of<sp/>FixedPoint</highlight></codeline>
<codeline lineno="697"><highlight class="comment"></highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>numeric<sp/>and<sp/>promote<sp/>traits<sp/>for<sp/>FixedPoint<sp/>follow</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>general<sp/>specifications<sp/>for<sp/>\ref<sp/>NumericPromotionTraits<sp/>and</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/>\ref<sp/>AlgebraicRing.<sp/>They<sp/>are<sp/>implemented<sp/>in<sp/>terms<sp/>of<sp/>the<sp/>traits<sp/>of<sp/>the<sp/>basic<sp/>types<sp/>by</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/>partial<sp/>template<sp/>specialization:</highlight></codeline>
<codeline lineno="702"><highlight class="comment"></highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="704"><highlight class="comment"></highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/>class<sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;PlusMinusIntBits,<sp/>MaxFracBits&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PlusType;</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;PlusMinusIntBits,<sp/>MaxFracBits&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinusType;</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;IntBits1<sp/>+<sp/>IntBits2,<sp/>FracBits1<sp/>+<sp/>FracBits2&gt;<sp/><sp/>MultipliesType;</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="712"><highlight class="comment"></highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>NumericTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>Type;</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Promote<sp/>undefined<sp/>because<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>layout,<sp/>use<sp/>FixedPointTraits</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>RealPromote<sp/>in<sp/>AlgebraicRing<sp/>--<sp/>multiplication<sp/>with<sp/>double<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ComplexPromote<sp/>in<sp/>AlgebraicRing<sp/>--<sp/>multiplication<sp/>with<sp/>double<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/>ValueType;</highlight></codeline>
<codeline lineno="721"><highlight class="comment"></highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraFalseType<sp/>isIntegral;</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isScalar;</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isSigned;</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isOrdered;</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraFalseType<sp/>isComplex;</highlight></codeline>
<codeline lineno="727"><highlight class="comment"></highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>//<sp/>etc.</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="730"><highlight class="comment"></highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>SquareRootTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/><sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;SRIntBits,<sp/>SRFracBits&gt;<sp/><sp/>SquareRootResult;</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SquareRootArgument;</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>NormTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/></highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;,<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;::MultipliesType</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SquaredNormType;</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NormType;</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="748"><highlight class="comment"></highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>PromoteTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/></highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;::PlusType<sp/></highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Promote;</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="758"><highlight class="comment"></highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/fixedpoint.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="761"><highlight class="comment"></highlight></codeline>
<codeline lineno="762"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="764"><highlight class="normal">struct<sp/>NumericTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>Type;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//typedef<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>Promote;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//typedef<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>RealPromote;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//typedef<sp/>std::complex&lt;RealPromote&gt;<sp/>ComplexPromote;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/>ValueType;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraFalseType<sp/>isIntegral;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isScalar;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isSigned;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isOrdered;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraFalseType<sp/>isComplex;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>zero()<sp/>{<sp/>return<sp/>Type(0,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>one()<sp/>{<sp/>return<sp/>Type(Type::ONE,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>nonZero()<sp/>{<sp/>return<sp/>one();<sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>epsilon()<sp/>{<sp/>return<sp/>Type(1,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>smallestPositive()<sp/>{<sp/>return<sp/>Type(1,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>max()<sp/>{<sp/>return<sp/>Type(<sp/>Type::MAX,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>min()<sp/>{<sp/>return<sp/>-max();<sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal">};</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits,<sp/>unsigned<sp/>FracBits&gt;</highlight></codeline>
<codeline lineno="788"><highlight class="normal">struct<sp/>NormTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="789"><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits,<sp/>FracBits&gt;,<sp/>FixedPoint&lt;IntBits,<sp/>FracBits&gt;<sp/>&gt;::MultipliesType</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SquaredNormType;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NormType;</highlight></codeline>
<codeline lineno="795"><highlight class="normal">};</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal">template<sp/>&lt;unsigned<sp/>IntBits1,<sp/>unsigned<sp/>FracBits1,<sp/>unsigned<sp/>IntBits2,<sp/>unsigned<sp/>FracBits2&gt;</highlight></codeline>
<codeline lineno="798"><highlight class="normal">struct<sp/>PromoteTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPointTraits&lt;FixedPoint&lt;IntBits1,<sp/>FracBits1&gt;,<sp/>FixedPoint&lt;IntBits2,<sp/>FracBits2&gt;<sp/>&gt;::PlusType<sp/></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Promote;</highlight></codeline>
<codeline lineno="804"><highlight class="normal">};</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">enum<sp/>FPOverflowHandling<sp/>{<sp/>FPOverflowIgnore,<sp/>FPOverflowSaturate,<sp/>FPOverflowError<sp/>};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling<sp/>=<sp/>FPOverflowIgnore&gt;</highlight></codeline>
<codeline lineno="811"><highlight class="normal">class<sp/>FixedPoint16;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16-Traits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="819"><highlight class="comment">/**<sp/>\page<sp/>FixedPoint16Traits<sp/>Numeric<sp/>and<sp/>Promote<sp/>Traits<sp/>of<sp/>FixedPoint16</highlight></codeline>
<codeline lineno="820"><highlight class="comment"></highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>numeric<sp/>and<sp/>promote<sp/>traits<sp/>for<sp/>FixedPoint16<sp/>follow</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>general<sp/>specifications<sp/>for<sp/>\ref<sp/>NumericPromotionTraits<sp/>and</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/>\ref<sp/>AlgebraicRing.<sp/>They<sp/>are<sp/>implemented<sp/>in<sp/>terms<sp/>of<sp/>the<sp/>traits<sp/>of<sp/>the<sp/>basic<sp/>types<sp/>by</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/>partial<sp/>template<sp/>specialization:</highlight></codeline>
<codeline lineno="825"><highlight class="comment"></highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>NumericTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>Type;</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Promote;</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>RealPromote<sp/>undefined<sp/>--<sp/>multiplication<sp/>with<sp/>double<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ComplexPromote<sp/>undefined<sp/>--<sp/>multiplication<sp/>with<sp/>double<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/>ValueType;</highlight></codeline>
<codeline lineno="835"><highlight class="comment"></highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraFalseType<sp/>isIntegral;</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isScalar;</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isSigned;</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isOrdered;</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraFalseType<sp/>isComplex;</highlight></codeline>
<codeline lineno="841"><highlight class="comment"></highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>//<sp/>etc.</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="844"><highlight class="comment"></highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;MetaMax&lt;IntBits1,<sp/>IntBits2&gt;::value,<sp/>OverflowHandling&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>//<sp/>etc.</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="852"><highlight class="comment"></highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>NormTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;Type,<sp/>Type&gt;::Promote<sp/>SquaredNormType;</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NormType;</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="860"><highlight class="comment"></highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>SquareRootTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;(IntBits<sp/>+<sp/>1)<sp/>/<sp/>2,<sp/>OverflowHandling&gt;<sp/><sp/>SquareRootResult;</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SquareRootArgument;</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="869"><highlight class="comment"></highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/fixedpoint.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="872"><highlight class="comment"></highlight></codeline>
<codeline lineno="873"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="875"><highlight class="normal">struct<sp/>NumericTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>Type;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Promote;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RealPromote<sp/>undefined<sp/>--<sp/>multiplication<sp/>with<sp/>double<sp/>is<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ComplexPromote<sp/>undefined<sp/>--<sp/>multiplication<sp/>with<sp/>double<sp/>is<sp/>not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/>ValueType;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraFalseType<sp/>isIntegral;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isScalar;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isSigned;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/><sp/>isOrdered;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>VigraFalseType<sp/>isComplex;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>zero()<sp/>{<sp/>return<sp/>Type(0,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>one()<sp/>{<sp/>return<sp/>Type(Type::ONE,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>nonZero()<sp/>{<sp/>return<sp/>one();<sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>epsilon()<sp/>{<sp/>return<sp/>Type(1,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>smallestPositive()<sp/>{<sp/>return<sp/>Type(1,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>max()<sp/>{<sp/>return<sp/>Type(<sp/>Type::MAX,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>min()<sp/>{<sp/>return<sp/>Type(<sp/>Type::MIN,<sp/>FPNoShift);<sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Promote<sp/>toPromote(Type<sp/>v)<sp/>{<sp/>return<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Type<sp/>fromPromote(Promote<sp/>v)<sp/>{<sp/>return<sp/>v;<sp/>};<sp/></highlight></codeline>
<codeline lineno="899"><highlight class="normal">};</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="902"><highlight class="normal">struct<sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;MetaMax&lt;IntBits1,<sp/>IntBits2&gt;::value,<sp/>OverflowHandling&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Promote<sp/>toPromote(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>v)<sp/>{<sp/>return<sp/>Promote(v);<sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Promote<sp/>toPromote(FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>v)<sp/>{<sp/>return<sp/>Promote(v);<sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal">};</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="911"><highlight class="normal">struct<sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Promote<sp/>toPromote(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)<sp/>{<sp/>return<sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal">};</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">struct<sp/>NormTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="920"><highlight class="normal">{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>PromoteTraits&lt;Type,<sp/>Type&gt;::Promote<sp/>SquaredNormType;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NormType;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">};</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="927"><highlight class="normal">struct<sp/>SquareRootTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="928"><highlight class="normal">{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;(IntBits<sp/>+<sp/>1)<sp/>/<sp/>2,<sp/>OverflowHandling&gt;<sp/><sp/>SquareRootResult;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SquareRootArgument;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">};</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal">#ifndef<sp/>DOXYGEN</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal">template<sp/>&lt;bool<sp/>Compatible&gt;</highlight></codeline>
<codeline lineno="937"><highlight class="normal">struct<sp/>FixedPoint_error__Right_shift_operator_has_unsupported_semantics</highlight></codeline>
<codeline lineno="938"><highlight class="normal">:<sp/>staticAssert::AssertBool&lt;Compatible&gt;</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">/*<sp/>DOXYGEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal">template<sp/>&lt;bool<sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="944"><highlight class="normal">struct<sp/>FixedPoint16_assignment_error__Target_object_has_too_few_integer_bits</highlight></codeline>
<codeline lineno="945"><highlight class="normal">:<sp/>staticAssert::AssertBool&lt;Predicate&gt;</highlight></codeline>
<codeline lineno="946"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal">namespace<sp/>detail<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal">template&lt;int<sp/>BeforeIntBits,<sp/>int<sp/>AfterIntBits,<sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Round<sp/>=<sp/>false,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>RightShift<sp/>=<sp/>(AfterIntBits<sp/>&gt;=<sp/>BeforeIntBits)&gt;</highlight></codeline>
<codeline lineno="953"><highlight class="normal">struct<sp/>FP16Align;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">template&lt;int<sp/>BeforeIntBits&gt;</highlight></codeline>
<codeline lineno="956"><highlight class="normal">struct<sp/>FP16Align&lt;BeforeIntBits,<sp/>BeforeIntBits,<sp/>true,<sp/>true&gt;</highlight></codeline>
<codeline lineno="957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>v)</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal">};</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal">template&lt;int<sp/>BeforeIntBits&gt;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">struct<sp/>FP16Align&lt;BeforeIntBits,<sp/>BeforeIntBits,<sp/>false,<sp/>true&gt;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>v)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal">};</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">template&lt;int<sp/>BeforeIntBits,<sp/>int<sp/>AfterIntBits&gt;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">struct<sp/>FP16Align&lt;BeforeIntBits,<sp/>AfterIntBits,<sp/>false,<sp/>true&gt;</highlight></codeline>
<codeline lineno="975"><highlight class="normal">{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>v)</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_error__Right_shift_operator_has_unsupported_semantics&lt;((-1<sp/>&gt;&gt;<sp/>8)<sp/>==<sp/>-1)&gt;));</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v<sp/>&gt;&gt;<sp/>(AfterIntBits<sp/>-<sp/>BeforeIntBits);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal">};</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal">template&lt;int<sp/>BeforeIntBits,<sp/>int<sp/>AfterIntBits&gt;</highlight></codeline>
<codeline lineno="984"><highlight class="normal">struct<sp/>FP16Align&lt;BeforeIntBits,<sp/>AfterIntBits,<sp/>true,<sp/>true&gt;</highlight></codeline>
<codeline lineno="985"><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>ONE_HALF<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>(AfterIntBits<sp/>-<sp/>BeforeIntBits<sp/>-<sp/>1)<sp/>};</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>v)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_error__Right_shift_operator_has_unsupported_semantics&lt;((-1<sp/>&gt;&gt;<sp/>8)<sp/>==<sp/>-1)&gt;));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(v<sp/>+<sp/>ONE_HALF)<sp/>&gt;&gt;<sp/>(AfterIntBits<sp/>-<sp/>BeforeIntBits);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal">};</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal">template&lt;int<sp/>BeforeIntBits,<sp/>int<sp/>AfterIntBits,<sp/>bool<sp/>Round&gt;</highlight></codeline>
<codeline lineno="995"><highlight class="normal">struct<sp/>FP16Align&lt;BeforeIntBits,<sp/>AfterIntBits,<sp/>Round,<sp/>false&gt;</highlight></codeline>
<codeline lineno="996"><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>v)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v<sp/>&lt;&lt;<sp/>(BeforeIntBits<sp/>-<sp/>AfterIntBits);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal">template<sp/>&lt;FPOverflowHandling<sp/>OverflowHandling<sp/>=<sp/>FPOverflowIgnore&gt;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">struct<sp/>FP16OverflowHandling</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>v)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(UInt32<sp/>v)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">struct<sp/>FP16OverflowHandling&lt;FPOverflowSaturate&gt;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>v)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(v<sp/>&gt;=<sp/>1<sp/>&lt;&lt;<sp/>15)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(1<sp/>&lt;&lt;<sp/>15)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(v<sp/>&lt;<sp/>-(1<sp/>&lt;&lt;<sp/>15))</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-(1<sp/>&lt;&lt;<sp/>15);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(UInt32<sp/>v)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(v<sp/>&gt;=<sp/>1<sp/>&lt;&lt;<sp/>15)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(1<sp/>&lt;&lt;<sp/>15)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">struct<sp/>FP16OverflowHandling&lt;FPOverflowError&gt;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>v)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(v<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>15)<sp/>&amp;&amp;<sp/>v<sp/>&gt;=<sp/>-(1<sp/>&lt;&lt;<sp/>15),</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FixedPoint16:<sp/>Operation<sp/>overflows.&quot;);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(UInt32<sp/>v)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(v<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>15),</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FixedPoint16:<sp/>Operation<sp/>overflows.&quot;);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>v;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>int<sp/>IntBits2,<sp/>int<sp/>IntBitsOut,<sp/></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPOverflowHandling<sp/>OverflowHandling<sp/>&gt;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">struct<sp/>FP16AddImpl</highlight></codeline>
<codeline lineno="1057"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MinIntBits<sp/>=<sp/>MetaMin&lt;IntBits1,<sp/>IntBits2&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>t1,<sp/>Int32<sp/>t2)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FP16OverflowHandling&lt;OverflowHandling&gt;::exec(</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP16Align&lt;MinIntBits,<sp/>IntBitsOut,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal"><sp/>true&gt;::exec(</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP16Align&lt;IntBits1,<sp/>MinIntBits,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal"><sp/>false&gt;::exec(t1)<sp/>+<sp/></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP16Align&lt;IntBits2,<sp/>MinIntBits,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal"><sp/>false&gt;::exec(t2)));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>int<sp/>IntBits2,<sp/>int<sp/>IntBitsOut,<sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPOverflowHandling<sp/>OverflowHandling<sp/>&gt;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">struct<sp/>FP16SubImpl</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MinIntBits<sp/>=<sp/>MetaMin&lt;IntBits1,<sp/>IntBits2&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>t1,<sp/>Int32<sp/>t2)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FP16OverflowHandling&lt;OverflowHandling&gt;::exec(</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP16Align&lt;MinIntBits,<sp/>IntBitsOut,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal"><sp/>true&gt;::exec(</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP16Align&lt;IntBits1,<sp/>MinIntBits,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal"><sp/>false&gt;::exec(t1)<sp/>-<sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP16Align&lt;IntBits2,<sp/>MinIntBits,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal"><sp/>false&gt;::exec(t2)));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>int<sp/>IntBits2,<sp/>int<sp/>IntBitsOut,<sp/></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPOverflowHandling<sp/>OverflowHandling<sp/>&gt;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">struct<sp/>FP16MulImpl</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>t1,<sp/>Int32<sp/>t2)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FP16OverflowHandling&lt;OverflowHandling&gt;::exec(</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP16Align&lt;IntBits1+IntBits2,<sp/>IntBitsOut+15,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal"><sp/>true&gt;::exec(t1*t2));</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>int<sp/>IntBits2,<sp/>int<sp/>IntBitsOut,<sp/></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPOverflowHandling<sp/>OverflowHandling<sp/>&gt;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">struct<sp/>FP16DivImpl</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>inline<sp/>Int32<sp/>exec(Int32<sp/>t1,<sp/>Int32<sp/>t2)</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(t2<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(t1<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><sp/>(1<sp/>&lt;&lt;<sp/>15)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>-(1<sp/>&lt;&lt;<sp/>15);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FP16OverflowHandling&lt;OverflowHandling&gt;::exec(</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FP16Align&lt;IntBits1-IntBits2,<sp/>IntBitsOut+1,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal"><sp/>true&gt;::exec((t1&lt;&lt;16)/t2));</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal">template<sp/>&lt;class<sp/>TARGET,<sp/>int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">TARGET<sp/>fixed_point_cast(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1119"><highlight class="comment">/**<sp/>Template<sp/>for<sp/>16-bit<sp/>signed<sp/>fixed<sp/>point<sp/>arithmetic.</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"></highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/><sp/>Fixed<sp/>point<sp/>arithmetic<sp/>is<sp/>used<sp/>when<sp/>computations<sp/>with<sp/>fractional<sp/>accuracy</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/><sp/><sp/>must<sp/>be<sp/>made<sp/>at<sp/>the<sp/>highest<sp/>speed<sp/>possible<sp/>(e.g.<sp/>in<sp/>the<sp/>inner<sp/>loop</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>a<sp/>volume<sp/>rendering<sp/>routine).<sp/>The<sp/>speed-up<sp/>relative<sp/>to<sp/>floating</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/><sp/>point<sp/>arithmetic<sp/>can<sp/>be<sp/>dramatic,<sp/>especially<sp/>when<sp/>one<sp/>can<sp/>avoid</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/><sp/><sp/>conversions<sp/>between<sp/>integer<sp/>and<sp/>floating<sp/>point<sp/>numbers<sp/>(these<sp/>are<sp/></highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/><sp/><sp/>very<sp/>expensive<sp/>because<sp/>integer<sp/>and<sp/>floating<sp/>point<sp/>arithmetic</highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/><sp/><sp/>resides<sp/>in<sp/>different<sp/>pipelines).<sp/></highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>template<sp/>wraps<sp/>an<sp/>&lt;tt&gt;Int16&lt;/tt&gt;<sp/>and<sp/>uses<sp/>&lt;tt&gt;IntBits&lt;/tt&gt;<sp/>to</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/>represent<sp/>the<sp/>integral<sp/>part<sp/>of<sp/>a<sp/>number,<sp/>and<sp/>&lt;tt&gt;15<sp/>-<sp/>IntBits&lt;/tt&gt;</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>the<sp/>fractional<sp/>part.<sp/>The<sp/>16th<sp/>bit<sp/>is<sp/>reserved<sp/>because<sp/>FixedPoint16<sp/></highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>a<sp/>signed<sp/>type.<sp/>Results<sp/>of<sp/>expressions<sp/>with<sp/>mixed<sp/>types<sp/>will<sp/>preserve</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/>larger<sp/>number<sp/>of<sp/>&lt;tt&gt;IntBits&lt;/tt&gt;<sp/>of<sp/>the<sp/>results,<sp/>in<sp/>order<sp/>to<sp/>minimize</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>possibility<sp/>for<sp/>overflow.<sp/>Nonetheless,<sp/>overflow<sp/>can<sp/>occur,<sp/>and<sp/>the<sp/></highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>parameter<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;<sp/>determines<sp/>how<sp/>this<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/><sp/>handled:</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DL&gt;</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DT&gt;FPOverflowIgnore&lt;DD&gt;<sp/>(default)<sp/>Ignore<sp/>overflow,<sp/>i.e.<sp/>use<sp/>the<sp/>usual<sp/>modulo<sp/>behavior<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>built-in<sp/>integer<sp/>types.</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DT&gt;FPOverflowSaturate&lt;DD&gt;<sp/>Use<sp/>the<sp/>largest<sp/>or<sp/>smallest<sp/>representable<sp/>number<sp/>(depending<sp/>on<sp/>sign)</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>case<sp/>of<sp/>overflow.</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"></highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;DT&gt;FPOverflowError&lt;DD&gt;<sp/>Throw<sp/>&lt;tt&gt;PreconditionViolation&lt;/tt&gt;<sp/>upon<sp/>overflow.<sp/>This<sp/>is<sp/>useful<sp/>for<sp/></highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debugging.</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/DL&gt;</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>implementation<sp/>relies<sp/>on<sp/>Int32-arithmetic<sp/>and<sp/>requires<sp/>that<sp/>the<sp/>right-shift<sp/>operator</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/><sp/><sp/><sp/>preserves<sp/>signedness.<sp/>Although<sp/>not<sp/>enforced<sp/>by<sp/>the<sp/>C++<sp/>standard,<sp/>this<sp/>is<sp/>implemented</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/><sp/><sp/>by<sp/>most<sp/>of<sp/>today&apos;s<sp/>processors.<sp/>This<sp/>property<sp/>is<sp/>checked<sp/>by<sp/>a<sp/></highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT(FixedPoint_error__Right_shift_operator_has_unsupported_semantics).</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"></highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;FixedPoint16&lt;/tt&gt;<sp/>implements<sp/>the<sp/>required<sp/>interface<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/><sp/><sp/>\ref<sp/>AlgebraicRing<sp/>and<sp/>the<sp/>required<sp/>numeric<sp/>and</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/><sp/><sp/>promotion<sp/>traits.<sp/>In<sp/>addition,<sp/>it<sp/>supports<sp/>functions<sp/>&lt;tt&gt;add&lt;/tt&gt;,<sp/></highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;sub&lt;/tt&gt;,<sp/>&lt;tt&gt;mul&lt;/tt&gt;,<sp/>and<sp/>&lt;tt&gt;div&lt;/tt&gt;,<sp/>where<sp/>a<sp/>particular<sp/>layout<sp/></highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>the<sp/>result<sp/>can<sp/>be<sp/>enforced.<sp/></highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/><sp/><sp/><sp/>Built-in<sp/>numeric<sp/>types<sp/>can<sp/>be<sp/>converted<sp/>into<sp/>&lt;tt&gt;FixedPoint16&lt;/tt&gt;<sp/>by<sp/>the<sp/></highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/><sp/><sp/>appropriate<sp/>constructors,<sp/>and<sp/>from<sp/>&lt;tt&gt;FixedPoint16&lt;/tt&gt;<sp/>by<sp/>means<sp/>of</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;fixed_point_cast&amp;lt;TargetType&amp;gt;(fixedPoint)&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"></highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;See<sp/>also:&lt;/b&gt;</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;ul&gt;</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>\ref<sp/>FixedPoint16Operations</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>\ref<sp/>FixedPoint16Traits</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/ul&gt;</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"></highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/fixedpoint.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="1172"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1174" refid="classvigra_1_1FixedPoint16" refkind="compound"><highlight class="normal">class<sp/>FixedPoint16</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">public:</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>TOTAL_BITS<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>15;<sp/></highlight><highlight class="comment">//<sp/>bit<sp/>16<sp/>is<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>INT_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>IntBits;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>FRACTIONAL_BITS<sp/>=<sp/>TOTAL_BITS<sp/>-<sp/>INT_BITS;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(Int32)((1u<sp/>&lt;&lt;<sp/>TOTAL_BITS)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>MIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>-(Int32)(1u<sp/>&lt;&lt;<sp/>TOTAL_BITS);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>ONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>FRACTIONAL_BITS;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>ONE_HALF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ONE<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>FRACTIONAL_MASK<sp/>=<sp/>(1u<sp/>&lt;&lt;<sp/>FRACTIONAL_BITS)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>INT_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0xffffffffu<sp/>^<sp/>FRACTIONAL_MASK;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>Int16<sp/>value;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16()</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(0)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_error__Right_shift_operator_has_unsupported_semantics&lt;((-1<sp/>&gt;&gt;<sp/>8)<sp/>==<sp/>-1)&gt;));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>from<sp/>an<sp/>int<sp/>(fractional<sp/>part<sp/>will<sp/>become<sp/>zero).</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Possible<sp/>overflow<sp/>is<sp/>handled<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198" refid="classvigra_1_1FixedPoint16_1ac77465fd5e307405395f7282d24053bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>FixedPoint16(Int32<sp/>v)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(v<sp/>&lt;&lt;<sp/>FRACTIONAL_BITS))</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_error__Right_shift_operator_has_unsupported_semantics&lt;((-1<sp/>&gt;&gt;<sp/>8)<sp/>==<sp/>-1)&gt;));</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>from<sp/>an<sp/>int<sp/>by<sp/>a<sp/>bitwise<sp/>copy.<sp/>This<sp/>is<sp/>normally<sp/>only<sp/>used<sp/>internally.</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206" refid="classvigra_1_1FixedPoint16_1a8213f1677b23d1a38d384f7d39d49af1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16(Int32<sp/>v,<sp/>FixedPointNoShift)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(v))</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_error__Right_shift_operator_has_unsupported_semantics&lt;((-1<sp/>&gt;&gt;<sp/>8)<sp/>==<sp/>-1)&gt;));</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>from<sp/>a<sp/>double<sp/>and<sp/>round<sp/>the<sp/>fractional<sp/>part<sp/>to<sp/></highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;FRACTIONAL_BITS&lt;/tt&gt;<sp/>accuracy.<sp/>Possible<sp/>overflow<sp/>is<sp/>handled<sp/>according<sp/></highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216" refid="classvigra_1_1FixedPoint16_1ad4e9f8e4524824e2dcaf4cc61d19de7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>FixedPoint16(double<sp/>rhs)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(roundi(rhs<sp/>*<sp/>ONE)))</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_error__Right_shift_operator_has_unsupported_semantics&lt;((-1<sp/>&gt;&gt;<sp/>8)<sp/>==<sp/>-1)&gt;));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>constructor.</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224" refid="classvigra_1_1FixedPoint16_1acb3aabaa535c7730dabf2f9d81a451d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16(const<sp/>FixedPoint16<sp/>&amp;other)</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(other.value)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_error__Right_shift_operator_has_unsupported_semantics&lt;((-1<sp/>&gt;&gt;<sp/>8)<sp/>==<sp/>-1)&gt;));</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>from<sp/>a<sp/>FixedPoint16<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate<sp/>and<sp/></highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handles<sp/>possible<sp/>overflow<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits2,<sp/>FPOverflowHandling<sp/>OverflowHandling2&gt;</highlight></codeline>
<codeline lineno="1234" refid="classvigra_1_1FixedPoint16_1aba70e4fea93ec45089e27b3685c08aa2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16(const<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling2&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value(detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::FP16Align&lt;IntBits2,<sp/>IntBits,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal">true&gt;::exec(other.value)))</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_STATIC_ASSERT((FixedPoint_error__Right_shift_operator_has_unsupported_semantics&lt;((-1<sp/>&gt;&gt;<sp/>8)<sp/>==<sp/>-1)&gt;));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Assignment<sp/>from<sp/>int.<sp/>The<sp/>fractional<sp/>part<sp/>will<sp/>become<sp/>zero.<sp/><sp/></highlight></codeline>
<codeline lineno="1242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Possible<sp/>overflow<sp/>is<sp/>handled<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244" refid="classvigra_1_1FixedPoint16_1a741738923ec362074eb763206a1029e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;operator=(Int32<sp/>rhs)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(rhs<sp/>&lt;&lt;<sp/>FRACTIONAL_BITS);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Assignment<sp/>form<sp/>double.<sp/>The<sp/>fractional<sp/>part<sp/>is<sp/>rounded,<sp/>and<sp/>possible<sp/>overflow<sp/>is<sp/></highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handled<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253" refid="classvigra_1_1FixedPoint16_1a2d2733f1ffbe25ad97eef8dd6b1f6484" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;operator=(double<sp/>rhs)</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(roundi(rhs<sp/>*<sp/>ONE));</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>assignment.</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261" refid="classvigra_1_1FixedPoint16_1a2f4163d532560f2d34ea1e7ba38a6d5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;<sp/>operator=(const<sp/>FixedPoint16<sp/>&amp;other)</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>other.value;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Assignment<sp/>from<sp/>a<sp/>FixedPoint16<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate,<sp/>and<sp/>possible<sp/>overflow<sp/>is<sp/></highlight></codeline>
<codeline lineno="1268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handled<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1271" refid="classvigra_1_1FixedPoint16_1a512058b5cf7dd3aa11702e598b033f39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;<sp/>operator=(const<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::FP16Align&lt;IntBits2,<sp/>IntBits,<sp/></highlight><highlight class="comment">/*Round*/</highlight><highlight class="normal">true&gt;::exec(other.value));</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Conversion<sp/>to<sp/>float</highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280" refid="classvigra_1_1FixedPoint16_1ae80f6077a5ac6ce1710cda5b30039890" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>operator<sp/>float()<sp/>const</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fixed_point_cast&lt;float&gt;(*this);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Conversion<sp/>to<sp/>double</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287" refid="classvigra_1_1FixedPoint16_1a5665dbc337111463ad23d3dba99f7ce3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>operator<sp/>double()<sp/>const</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fixed_point_cast&lt;double&gt;(*this);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Unary<sp/>plus.</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294" refid="classvigra_1_1FixedPoint16_1a6788fea067fa50badf11874a91bc7cff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>operator+()<sp/>const</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Negation.</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301" refid="classvigra_1_1FixedPoint16_1a36793fcc90447cfbfcfccbbde0de1eaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>operator-()<sp/>const</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FixedPoint16(-value,<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Pre-increment.</highlight></codeline>
<codeline lineno="1307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308" refid="classvigra_1_1FixedPoint16_1aa820f85367458a572b7414cfa5d403a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;<sp/>operator++()</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(value+ONE);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Post-increment.</highlight></codeline>
<codeline lineno="1315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316" refid="classvigra_1_1FixedPoint16_1a281665afd3ad4dee00212b1a9ef0de5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>operator++(int)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16<sp/>old(*this);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++(*this);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>old;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Pre-decrement.</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325" refid="classvigra_1_1FixedPoint16_1a7ab8f0ae4860089a068678e9ce99911b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;<sp/>operator--()</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(value-ONE);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Post-decrement.</highlight></codeline>
<codeline lineno="1332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333" refid="classvigra_1_1FixedPoint16_1a539a9b2cd7550715951814dc753908c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>operator--(int)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16<sp/>old(*this);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--(*this);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>old;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Add-assignment<sp/>from<sp/>a<sp/>FixedPoint16<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate,<sp/>and<sp/>possible<sp/>overflow<sp/>is<sp/></highlight></codeline>
<codeline lineno="1341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handled<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1344" refid="classvigra_1_1FixedPoint16_1a255ca89f77a26cb1d25da62397f2f78f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;<sp/>operator+=(const<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16AddImpl&lt;IntBits,<sp/>IntBits2,<sp/>IntBits,<sp/>OverflowHandling&gt;::exec(value,<sp/>other.value);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Subtract-assignment<sp/>from<sp/>a<sp/>FixedPoint16<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate,<sp/>and<sp/>possible<sp/>overflow<sp/>is<sp/></highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handled<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1354" refid="classvigra_1_1FixedPoint16_1aa4844d0ffc539843dc92d14efc62da89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;<sp/>operator-=(const<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16SubImpl&lt;IntBits,<sp/>IntBits2,<sp/>IntBits,<sp/>OverflowHandling&gt;::exec(value,<sp/>other.value);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Multiply-assignment<sp/>from<sp/>a<sp/>FixedPoint16<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate,<sp/>and<sp/>possible<sp/>overflow<sp/>is<sp/></highlight></codeline>
<codeline lineno="1361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handled<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1364" refid="classvigra_1_1FixedPoint16_1a992294cd09adba6fae24642030dbd0c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;<sp/>operator*=(const<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16MulImpl&lt;IntBits,<sp/>IntBits2,<sp/>IntBits,<sp/>OverflowHandling&gt;::exec(value,<sp/>other.value);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Divide-assignment<sp/>from<sp/>a<sp/>FixedPoint16<sp/>with<sp/>different<sp/>layout.<sp/>It<sp/>rounds<sp/>as<sp/>appropriate,<sp/>and<sp/>possible<sp/>overflow<sp/>is<sp/></highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handled<sp/>according<sp/>to<sp/>the<sp/>target<sp/>type&apos;s<sp/>&lt;tt&gt;OverflowHandling&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1374" refid="classvigra_1_1FixedPoint16_1a59593fa3ef20fc401134740bc7228b64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16<sp/>&amp;<sp/>operator/=(const<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&amp;other)</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>detail::FP16DivImpl&lt;IntBits,<sp/>IntBits2,<sp/>IntBits,<sp/>OverflowHandling&gt;::exec(value,<sp/>other.value);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal">namespace<sp/>detail<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">struct<sp/>FixedPoint16Cast;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">#define<sp/>VIGRA_FIXED_POINT_CAST(type)<sp/>\</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">template<sp/>&lt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">struct<sp/>FixedPoint16Cast&lt;type&gt;<sp/>\</highlight></codeline>
<codeline lineno="1389"><highlight class="normal">{<sp/>\</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;<sp/>\</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>type<sp/>cast(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)<sp/>\</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>round(v);<sp/>\</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal">VIGRA_FIXED_POINT_CAST(Int8)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal">VIGRA_FIXED_POINT_CAST(UInt8)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">VIGRA_FIXED_POINT_CAST(Int16)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">VIGRA_FIXED_POINT_CAST(UInt16)</highlight></codeline>
<codeline lineno="1401"><highlight class="normal">VIGRA_FIXED_POINT_CAST(Int32)</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">VIGRA_FIXED_POINT_CAST(UInt32)</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">VIGRA_FIXED_POINT_CAST(Int64)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal">VIGRA_FIXED_POINT_CAST(UInt64)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal">#undef<sp/>VIGRA_FIXED_POINT_CAST</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal">struct<sp/>FixedPoint16Cast&lt;float&gt;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>float<sp/>cast(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(float)v.value<sp/>/<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::ONE;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal">template<sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">struct<sp/>FixedPoint16Cast&lt;double&gt;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>cast(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(double)v.value<sp/>/<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::ONE;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16Operations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1436"><highlight class="comment">/**<sp/>\addtogroup<sp/>FixedPoint16Operations<sp/>Functions<sp/>for<sp/>FixedPoint16</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"></highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/><sp/><sp/><sp/>\brief<sp/><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/fixedpoint.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"></highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/><sp/><sp/><sp/>These<sp/>functions<sp/>fulfill<sp/>the<sp/>requirements<sp/>of<sp/>an<sp/>\ref<sp/>AlgebraicRing.</highlight></codeline>
<codeline lineno="1441"><highlight class="comment"></highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="1443"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;p&gt;</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"></highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1446"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Convert<sp/>a<sp/>FixedPoint16<sp/>to<sp/>a<sp/>built-in<sp/>type.</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>target<sp/>is<sp/>integral,<sp/>the<sp/>value<sp/>is<sp/>rounded.&lt;br&gt;</highlight></codeline>
<codeline lineno="1450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Usage:</highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="1452"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16&lt;16,15&gt;<sp/>fp(...);</highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>d<sp/>=<sp/>fixed_point_cast&lt;double&gt;(fp);</highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal">template<sp/>&lt;class<sp/>TARGET,<sp/>int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1458" refid="group__FixedPoint16Operations_1gac12bb448fd83be21e6e529cd1994abb3" refkind="member"><highlight class="normal">TARGET<sp/>fixed_point_cast(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>detail::FixedPoint16Cast&lt;TARGET&gt;::cast(v);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1464"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>equal</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1467" refid="group__FixedPoint16Operations_1gaf372af8944f118fcd7b755b60362d554" refkind="member"><highlight class="normal">bool<sp/>operator==(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MinIntBits<sp/>=<sp/>MetaMin&lt;IntBits1,<sp/>IntBits2&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(IntBits1<sp/>-<sp/>MinIntBits))<sp/>==<sp/>(r.value<sp/>&lt;&lt;<sp/>(IntBits2<sp/>-<sp/>MinIntBits));</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1473"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>not<sp/>equal</highlight></codeline>
<codeline lineno="1474"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1476" refid="group__FixedPoint16Operations_1gab061d27e4a29a3151a334ed02cf5cfa5" refkind="member"><highlight class="normal">bool<sp/>operator!=(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MinIntBits<sp/>=<sp/>MetaMin&lt;IntBits1,<sp/>IntBits2&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(IntBits1<sp/>-<sp/>MinIntBits))<sp/>!=<sp/>(r.value<sp/>&lt;&lt;<sp/>(IntBits2<sp/>-<sp/>MinIntBits));</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="1483"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1485" refid="group__FixedPoint16Operations_1ga83e570cad80273f6ab3805176ba6efbd" refkind="member"><highlight class="normal">bool<sp/>operator&lt;(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MinIntBits<sp/>=<sp/>MetaMin&lt;IntBits1,<sp/>IntBits2&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(IntBits1<sp/>-<sp/>MinIntBits))<sp/>&lt;<sp/>(r.value<sp/>&lt;&lt;<sp/>(IntBits2<sp/>-<sp/>MinIntBits));</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1491"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less<sp/>or<sp/>equal</highlight></codeline>
<codeline lineno="1492"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1494" refid="group__FixedPoint16Operations_1ga3fd04a99f83b89391848d284c9fe2c86" refkind="member"><highlight class="normal">bool<sp/>operator&lt;=(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MinIntBits<sp/>=<sp/>MetaMin&lt;IntBits1,<sp/>IntBits2&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(IntBits1<sp/>-<sp/>MinIntBits))<sp/>&lt;=<sp/>(r.value<sp/>&lt;&lt;<sp/>(IntBits2<sp/>-<sp/>MinIntBits));</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater</highlight></codeline>
<codeline lineno="1501"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1503" refid="group__FixedPoint16Operations_1gadd406409450f5e7dcceb7e4dcd6f8246" refkind="member"><highlight class="normal">bool<sp/>operator&gt;(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MinIntBits<sp/>=<sp/>MetaMin&lt;IntBits1,<sp/>IntBits2&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(IntBits1<sp/>-<sp/>MinIntBits))<sp/>&gt;<sp/>(r.value<sp/>&lt;&lt;<sp/>(IntBits2<sp/>-<sp/>MinIntBits));</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater<sp/>or<sp/>equal</highlight></codeline>
<codeline lineno="1510"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1512" refid="group__FixedPoint16Operations_1ga8dbcf24233b03449957220e8faced0ae" refkind="member"><highlight class="normal">bool<sp/>operator&gt;=(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>MinIntBits<sp/>=<sp/>MetaMin&lt;IntBits1,<sp/>IntBits2&gt;::value<sp/>};</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(l.value<sp/>&lt;&lt;<sp/>(IntBits1<sp/>-<sp/>MinIntBits))<sp/>&gt;=<sp/>(r.value<sp/>&lt;&lt;<sp/>(IntBits2<sp/>-<sp/>MinIntBits));</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>addition<sp/>with<sp/>automatic<sp/>determination<sp/>of<sp/>the<sp/>appropriate<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">typename<sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;::Promote</highlight></codeline>
<codeline lineno="1522" refid="group__FixedPoint16Operations_1ga9696782c029526a08b62fcdd4d1cd64b" refkind="member"><highlight class="normal">operator+(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>typename</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;::Promote</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Result(detail::FP16AddImpl&lt;IntBits1,<sp/>IntBits2,<sp/>Result::INT_BITS,<sp/>OverflowHandling&gt;::exec(l.value,<sp/>r.value),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>addition<sp/>with<sp/>enforced<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="1531"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2,<sp/>int<sp/>IntBits3&gt;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal">inline<sp/></highlight></codeline>
<codeline lineno="1533"><highlight class="normal">FixedPoint16&lt;IntBits3,<sp/>OverflowHandling&gt;<sp/>&amp;</highlight></codeline>
<codeline lineno="1534" refid="group__FixedPoint16Operations_1ga6c46b7a1b6bcad18a2a818143c8de239" refkind="member"><highlight class="normal">add(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r,</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits3,<sp/>OverflowHandling&gt;<sp/>&amp;<sp/>result)</highlight></codeline>
<codeline lineno="1536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>result.value<sp/>=<sp/>detail::FP16AddImpl&lt;IntBits1,<sp/>IntBits2,<sp/>IntBits3,<sp/>OverflowHandling&gt;::exec(l.value,<sp/>r.value);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1541"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>subtraction<sp/>with<sp/>automatic<sp/>determination<sp/>of<sp/>the<sp/>appropriate<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">typename<sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;::Promote</highlight></codeline>
<codeline lineno="1545" refid="group__FixedPoint16Operations_1gad9f66cf8e4b6e5c5440a76bf44a19920" refkind="member"><highlight class="normal">operator-(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>typename</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;::Promote</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Result(detail::FP16SubImpl&lt;IntBits1,<sp/>IntBits2,<sp/>Result::INT_BITS,<sp/>OverflowHandling&gt;::exec(l.value,<sp/>r.value),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1553"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>subtraction<sp/>with<sp/>enforced<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="1554"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2,<sp/>int<sp/>IntBits3&gt;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal">inline<sp/>FixedPoint16&lt;IntBits3,<sp/>OverflowHandling&gt;<sp/>&amp;</highlight></codeline>
<codeline lineno="1556" refid="group__FixedPoint16Operations_1gaf596c4c928259b41eb1b7da68affec8b" refkind="member"><highlight class="normal">sub(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r,</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits3,<sp/>OverflowHandling&gt;<sp/>&amp;<sp/>result)</highlight></codeline>
<codeline lineno="1558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>result.value<sp/>=<sp/>detail::FP16SubImpl&lt;IntBits1,<sp/>IntBits2,<sp/>IntBits3,<sp/>OverflowHandling&gt;::exec(l.value,<sp/>r.value);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>multiplication<sp/>with<sp/>automatic<sp/>determination<sp/>of<sp/>the<sp/>appropriate<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">typename<sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;::Promote</highlight></codeline>
<codeline lineno="1567" refid="group__FixedPoint16Operations_1ga1ca6e0e0fb80c2f350dda56853ac683a" refkind="member"><highlight class="normal">operator*(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>typename</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;::Promote</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Result(detail::FP16MulImpl&lt;IntBits1,<sp/>IntBits2,<sp/>Result::INT_BITS,<sp/>OverflowHandling&gt;::exec(l.value,<sp/>r.value),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1575"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>multiplication<sp/>with<sp/>enforced<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="1576"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2,<sp/>int<sp/>IntBits3&gt;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal">inline<sp/></highlight></codeline>
<codeline lineno="1578"><highlight class="normal">FixedPoint16&lt;IntBits3,<sp/>OverflowHandling&gt;<sp/>&amp;</highlight></codeline>
<codeline lineno="1579" refid="group__FixedPoint16Operations_1ga7a7b91fe8e1da3a17615e9ac1adc4182" refkind="member"><highlight class="normal">mul(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r,</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits3,<sp/>OverflowHandling&gt;<sp/>&amp;<sp/>result)</highlight></codeline>
<codeline lineno="1581"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>result.value<sp/>=<sp/>detail::FP16MulImpl&lt;IntBits1,<sp/>IntBits2,<sp/>IntBits3,<sp/>OverflowHandling&gt;::exec(l.value,<sp/>r.value);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1586"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>division<sp/>with<sp/>automatic<sp/>determination<sp/>of<sp/>the<sp/>appropriate<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="1587"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2&gt;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1589"><highlight class="normal">typename<sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;::Promote</highlight></codeline>
<codeline lineno="1590" refid="group__FixedPoint16Operations_1gab8a9b5981320a7a71b908b1b4ba434ac" refkind="member"><highlight class="normal">operator/(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r)</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>typename</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PromoteTraits&lt;FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>&gt;::Promote</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Result(detail::FP16DivImpl&lt;IntBits1,<sp/>IntBits2,<sp/>Result::INT_BITS,<sp/>OverflowHandling&gt;::exec(l.value,<sp/>r.value),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1598"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>division<sp/>with<sp/>enforced<sp/>result<sp/>type.</highlight></codeline>
<codeline lineno="1599"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits1,<sp/>FPOverflowHandling<sp/>OverflowHandling,<sp/>int<sp/>IntBits2,<sp/>int<sp/>IntBits3&gt;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">inline<sp/></highlight></codeline>
<codeline lineno="1601"><highlight class="normal">FixedPoint16&lt;IntBits3,<sp/>OverflowHandling&gt;<sp/>&amp;</highlight></codeline>
<codeline lineno="1602" refid="group__FixedPoint16Operations_1gac71b069a80f6decdb6fad1cfd508f5f8" refkind="member"><highlight class="normal">div(FixedPoint16&lt;IntBits1,<sp/>OverflowHandling&gt;<sp/>l,<sp/>FixedPoint16&lt;IntBits2,<sp/>OverflowHandling&gt;<sp/>r,</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits3,<sp/>OverflowHandling&gt;<sp/>&amp;<sp/>result)</highlight></codeline>
<codeline lineno="1604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>result.value<sp/>=<sp/>detail::FP16DivImpl&lt;IntBits1,<sp/>IntBits2,<sp/>IntBits3,<sp/>OverflowHandling&gt;::exec(l.value,<sp/>r.value);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>square<sp/>root.</highlight></codeline>
<codeline lineno="1610"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">inline<sp/>typename<sp/>SquareRootTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;::SquareRootResult</highlight></codeline>
<codeline lineno="1612" refid="group__FixedPoint16Operations_1gaeba9152f83152e566195b4a6600a1023" refkind="member"><highlight class="normal">sqrt(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>SquareRootTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;::SquareRootResult<sp/>Result;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>Shift<sp/>=<sp/>15<sp/>+<sp/>IntBits<sp/>-<sp/>2*Result::INT_BITS<sp/>};</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Result(sqrti(v.value<sp/>&lt;&lt;<sp/>Shift),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal">#ifndef<sp/>VIGRA_NO_HYPOT</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>::hypot;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1623"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Length<sp/>of<sp/>hypotenuse.<sp/></highlight></codeline>
<codeline lineno="1624"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">inline<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1626" refid="group__FixedPoint16Operations_1gac462ab7aeaeaa2af19c524e89c9ee1fd" refkind="member"><highlight class="normal">hypot(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v1,<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v2)</highlight></codeline>
<codeline lineno="1627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>UInt32<sp/>l<sp/>=<sp/>abs(v1.value),<sp/>r<sp/>=<sp/>abs(v2.value);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sq(l)<sp/>+<sp/>sq(r)<sp/>&lt;=<sp/>2**31,<sp/>so<sp/>overflow<sp/>handling<sp/>after<sp/>sqrti<sp/>is<sp/>sufficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;(</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::FP16OverflowHandling&lt;OverflowHandling&gt;::exec(sqrti(sq(l)<sp/>+<sp/>sq(r))),<sp/></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal">using<sp/>std::atan2;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1637"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Arctangent.<sp/>Accuracy<sp/>better<sp/>than<sp/>1/3<sp/>degree<sp/>(9<sp/>significant<sp/>bits).</highlight></codeline>
<codeline lineno="1638"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal">FixedPoint16&lt;2,<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1640" refid="group__FixedPoint16Operations_1gae83e1ae2e3dae6dc462c69a7c8175fc5" refkind="member"><highlight class="normal">atan2(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>y,<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>x)</highlight></codeline>
<codeline lineno="1641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>{<sp/>ResIntBits<sp/>=<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>FixedPoint16&lt;ResIntBits,<sp/>OverflowHandling&gt;<sp/>FP;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>FP<sp/>zero(0),<sp/>pi(M_PI),<sp/>pi_2(0.5<sp/>*<sp/>M_PI),<sp/>mpi_2(-0.5<sp/>*<sp/>M_PI);<sp/></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>Int32<sp/>Pi_4<sp/><sp/>=<sp/>roundi(0.25<sp/>*<sp/>M_PI<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>15)),<sp/></highlight><highlight class="comment">//<sp/>15<sp/>frac<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pi3_4<sp/>=<sp/>roundi(0.75<sp/>*<sp/>M_PI<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>15)),</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/><sp/><sp/><sp/>=<sp/>roundi(0.19826763260224867<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>15)),<sp/></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c2<sp/><sp/><sp/><sp/>=<sp/>roundi(-0.9757748231899761<sp/>*<sp/>(1<sp/>&lt;&lt;<sp/>30));<sp/></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coefficients<sp/>c1<sp/>and<sp/>c2<sp/>minimize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NIntegrate[(c1<sp/>r^3<sp/>+<sp/>c2<sp/>r<sp/>+<sp/>Pi/4<sp/>-<sp/>a)^4<sp/>/.<sp/>r<sp/>-&gt;<sp/>(Cos[a]<sp/>-<sp/>Sin[a])/(Cos[a]<sp/>+<sp/>Sin[a]),<sp/>{a,<sp/>0,<sp/>Pi/2}]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thanks<sp/>to<sp/>Jim<sp/>Shima,<sp/>http://www.dspguru.com/comp.dsp/tricks/alg/fxdatan2.htm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>if(x.value<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(y.value<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>pi_2</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(y.value<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>mpi_2</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>zero;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>Int32<sp/>abs_y<sp/>=<sp/>abs(y.value);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>Int32<sp/>r,<sp/>angle;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>if(x.value<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(y.value<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>zero;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>((x.value<sp/>-<sp/>abs_y)<sp/>&lt;&lt;<sp/>15)<sp/>/<sp/>(x.value<sp/>+<sp/>abs_y);<sp/></highlight><highlight class="comment">//<sp/>15<sp/>frac<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>Pi_4;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(y.value<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pi;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>((x.value<sp/>+<sp/>abs_y)<sp/>&lt;&lt;<sp/>15)<sp/>/<sp/>(abs_y<sp/>-<sp/>x.value);<sp/></highlight><highlight class="comment">//<sp/>15<sp/>frac<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>Pi3_4;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>+=<sp/>r*((c2<sp/>+<sp/>c1<sp/>*<sp/>(sq(r)<sp/>&gt;&gt;<sp/>15))<sp/>&gt;&gt;<sp/>15)<sp/>&gt;&gt;<sp/>15;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(y.value<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>FP(detail::FP16Align&lt;0,<sp/>ResIntBits,<sp/>true&gt;::exec(<sp/>angle),<sp/>FPNoShift)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>FP(detail::FP16Align&lt;0,<sp/>ResIntBits,<sp/>true&gt;::exec(-angle),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1686"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>absolute<sp/>value.</highlight></codeline>
<codeline lineno="1687"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">inline<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1689" refid="group__FixedPoint16Operations_1gaad996c0c0cd7877767d3e72097976c5b" refkind="member"><highlight class="normal">abs(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;(abs(v.value),<sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1694"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>squared<sp/>norm<sp/>(same<sp/>as<sp/>v*v).</highlight></codeline>
<codeline lineno="1695"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal">inline</highlight></codeline>
<codeline lineno="1697"><highlight class="normal">typename<sp/>NormTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;::SquaredNormType</highlight></codeline>
<codeline lineno="1698" refid="group__FixedPoint16Operations_1gad5ff4b2e985f4917da11535f352a847f" refkind="member"><highlight class="normal">squaredNorm(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>v*v;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1703"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>norm<sp/>(same<sp/>as<sp/>abs).</highlight></codeline>
<codeline lineno="1704"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">inline<sp/></highlight></codeline>
<codeline lineno="1706"><highlight class="normal">typename<sp/>NormTraits&lt;FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>&gt;::NormType</highlight></codeline>
<codeline lineno="1707" refid="group__FixedPoint16Operations_1ga9bc8f44c220da2d20d812be973983bb4" refkind="member"><highlight class="normal">norm(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>const<sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>abs(v);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1712"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>fractional<sp/>part.<sp/>(difference<sp/>between<sp/>v<sp/>and<sp/>its<sp/>floor)</highlight></codeline>
<codeline lineno="1713"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">inline<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1715" refid="group__FixedPoint16Operations_1ga51bbe37b56a46473c8041924e52b9826" refkind="member"><highlight class="normal">frac(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;(</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.value<sp/>-<sp/>(v.value<sp/>&amp;<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::INT_MASK),<sp/></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1722"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>dual<sp/>fractional<sp/>part.<sp/>(1<sp/>-<sp/>frac(v))</highlight></codeline>
<codeline lineno="1723"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal">inline<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1725" refid="group__FixedPoint16Operations_1gac21c347588d5301b43d42cce346995e8" refkind="member"><highlight class="normal">dual_frac(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;(</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::ONE<sp/>-<sp/>v.value<sp/>+<sp/>(v.value<sp/>&amp;<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::INT_MASK),<sp/></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FPNoShift);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>rounding<sp/>down.</highlight></codeline>
<codeline lineno="1733"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">inline<sp/>Int32</highlight></codeline>
<codeline lineno="1735" refid="group__FixedPoint16Operations_1gaf9acd2d5db732d3d15b3d30e7b70671d" refkind="member"><highlight class="normal">floor(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>return(v.value<sp/>&gt;&gt;<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::FRACTIONAL_BITS);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>rounding<sp/>up.</highlight></codeline>
<codeline lineno="1741"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal">inline<sp/>Int32</highlight></codeline>
<codeline lineno="1743" refid="group__FixedPoint16Operations_1ga3de623a9fcd9aa5b8515d2e602ad3441" refkind="member"><highlight class="normal">ceil(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>return((v.value<sp/>+<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::FRACTIONAL_MASK)<sp/>&gt;&gt;<sp/></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::FRACTIONAL_BITS);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1749"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>rounding<sp/>to<sp/>the<sp/>nearest<sp/>integer.</highlight></codeline>
<codeline lineno="1750"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal">inline<sp/>Int32</highlight></codeline>
<codeline lineno="1752" refid="group__FixedPoint16Operations_1gaad0bcd8708c6fe598780a675ad30e52d" refkind="member"><highlight class="normal">round(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>return((v.value<sp/>+<sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::ONE_HALF)<sp/>&gt;&gt;<sp/></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;::FRACTIONAL_BITS);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1758"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>rounding<sp/>to<sp/>the<sp/>nearest<sp/>integer.</highlight></codeline>
<codeline lineno="1759"><highlight class="comment"></highlight><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal">inline<sp/>Int32</highlight></codeline>
<codeline lineno="1761" refid="group__FixedPoint16Operations_1ga2d7df7a7ce314097e5d4be827ecb18d9" refkind="member"><highlight class="normal">roundi(FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>round(v);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1766"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal">namespace<sp/>std<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal">template<sp/>&lt;int<sp/>IntBits,<sp/>vigra::FPOverflowHandling<sp/>OverflowHandling&gt;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal">ostream<sp/>&amp;<sp/>operator&lt;&lt;(ostream<sp/>&amp;<sp/>s,<sp/>vigra::FixedPoint16&lt;IntBits,<sp/>OverflowHandling&gt;<sp/>v)</highlight></codeline>
<codeline lineno="1774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>vigra::fixed_point_cast&lt;float&gt;(v);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>s;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">//<sp/>VIGRA_FIXEDPOINT_HXX</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/fixedpoint.hxx"/>
  </compounddef>
</doxygen>
