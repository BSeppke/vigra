<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="multi__fft_8hxx" kind="file">
    <compoundname>multi_fft.hxx</compoundname>
    <includes refid="fftw3_8hxx" local="yes">fftw3.hxx</includes>
    <includes refid="multi__array_8hxx" local="yes">multi_array.hxx</includes>
    <includes refid="navigator_8hxx" local="yes">navigator.hxx</includes>
    <includes refid="copyimage_8hxx" local="yes">copyimage.hxx</includes>
    <incdepgraph>
      <node id="4867">
        <label>functional</label>
      </node>
      <node id="4876">
        <label>limits</label>
      </node>
      <node id="4880">
        <label>basicimage.hxx</label>
        <link refid="basicimage_8hxx_source"/>
        <childnode refid="4881" relation="include">
        </childnode>
        <childnode refid="4877" relation="include">
        </childnode>
        <childnode refid="4882" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4891" relation="include">
        </childnode>
        <childnode refid="4901" relation="include">
        </childnode>
      </node>
      <node id="4870">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="4871" relation="include">
        </childnode>
        <childnode refid="4876" relation="include">
        </childnode>
      </node>
      <node id="4889">
        <label>iterator</label>
      </node>
      <node id="4914">
        <label>multi_array.hxx</label>
        <link refid="multi__array_8hxx_source"/>
        <childnode refid="4881" relation="include">
        </childnode>
        <childnode refid="4877" relation="include">
        </childnode>
        <childnode refid="4891" relation="include">
        </childnode>
        <childnode refid="4903" relation="include">
        </childnode>
        <childnode refid="4902" relation="include">
        </childnode>
        <childnode refid="4915" relation="include">
        </childnode>
        <childnode refid="4916" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4918" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
        <childnode refid="4897" relation="include">
        </childnode>
      </node>
      <node id="4900">
        <label>inspector_passes.hxx</label>
        <link refid="inspector__passes_8hxx_source"/>
        <childnode refid="4871" relation="include">
        </childnode>
      </node>
      <node id="4894">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="4917">
        <label>initimage.hxx</label>
        <link refid="initimage_8hxx_source"/>
        <childnode refid="4882" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4907" relation="include">
        </childnode>
      </node>
      <node id="4899">
        <label>algorithm.hxx</label>
        <link refid="algorithm_8hxx_source"/>
        <childnode refid="4870" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4900" relation="include">
        </childnode>
        <childnode refid="4877" relation="include">
        </childnode>
        <childnode refid="4867" relation="include">
        </childnode>
        <childnode refid="4889" relation="include">
        </childnode>
      </node>
      <node id="4866">
        <label>cmath</label>
      </node>
      <node id="4874">
        <label>stdexcept</label>
      </node>
      <node id="4907">
        <label>functortraits.hxx</label>
        <link refid="functortraits_8hxx_source"/>
        <childnode refid="4867" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
      </node>
      <node id="4888">
        <label>iteratortags.hxx</label>
        <link refid="iteratortags_8hxx_source"/>
        <childnode refid="4889" relation="include">
        </childnode>
      </node>
      <node id="4885">
        <label>string</label>
      </node>
      <node id="4905">
        <label>copyimage.hxx</label>
        <link refid="copyimage_8hxx_source"/>
        <childnode refid="4882" relation="include">
        </childnode>
      </node>
      <node id="4915">
        <label>basicimageview.hxx</label>
        <link refid="basicimageview_8hxx_source"/>
        <childnode refid="4916" relation="include">
        </childnode>
        <childnode refid="4917" relation="include">
        </childnode>
      </node>
      <node id="4911">
        <label>imagecontainer.hxx</label>
        <link refid="imagecontainer_8hxx_source"/>
        <childnode refid="4882" relation="include">
        </childnode>
        <childnode refid="4912" relation="include">
        </childnode>
        <childnode refid="4905" relation="include">
        </childnode>
      </node>
      <node id="4890">
        <label>iteratortraits.hxx</label>
        <link refid="iteratortraits_8hxx_source"/>
        <childnode refid="4891" relation="include">
        </childnode>
        <childnode refid="4895" relation="include">
        </childnode>
      </node>
      <node id="4913">
        <label>fftw3.h</label>
      </node>
      <node id="4893">
        <label>cfloat</label>
      </node>
      <node id="4882">
        <label>utilities.hxx</label>
        <link refid="utilities_8hxx_source"/>
        <childnode refid="4872" relation="include">
        </childnode>
        <childnode refid="4883" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
        <childnode refid="4878" relation="include">
        </childnode>
        <childnode refid="4886" relation="include">
        </childnode>
        <childnode refid="4897" relation="include">
        </childnode>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4884" relation="include">
        </childnode>
      </node>
      <node id="4873">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="4906">
        <label>transformimage.hxx</label>
        <link refid="transformimage_8hxx_source"/>
        <childnode refid="4882" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4902" relation="include">
        </childnode>
        <childnode refid="4907" relation="include">
        </childnode>
        <childnode refid="4908" relation="include">
        </childnode>
      </node>
      <node id="4864">
        <label>vigra/multi_fft.hxx</label>
        <link refid="multi_fft.hxx"/>
        <childnode refid="4865" relation="include">
        </childnode>
        <childnode refid="4914" relation="include">
        </childnode>
        <childnode refid="4920" relation="include">
        </childnode>
        <childnode refid="4905" relation="include">
        </childnode>
      </node>
      <node id="4878">
        <label>tuple.hxx</label>
        <link refid="tuple_8hxx_source"/>
        <childnode refid="4879" relation="include">
        </childnode>
      </node>
      <node id="4903">
        <label>tinyvector.hxx</label>
        <link refid="tinyvector_8hxx_source"/>
        <childnode refid="4866" relation="include">
        </childnode>
        <childnode refid="4898" relation="include">
        </childnode>
        <childnode refid="4887" relation="include">
        </childnode>
        <childnode refid="4877" relation="include">
        </childnode>
        <childnode refid="4872" relation="include">
        </childnode>
        <childnode refid="4883" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4901" relation="include">
        </childnode>
        <childnode refid="4897" relation="include">
        </childnode>
        <childnode refid="4886" relation="include">
        </childnode>
      </node>
      <node id="4919">
        <label>sys/types.h</label>
      </node>
      <node id="4869">
        <label>stdimage.hxx</label>
        <link refid="stdimage_8hxx_source"/>
        <childnode refid="4870" relation="include">
        </childnode>
        <childnode refid="4878" relation="include">
        </childnode>
        <childnode refid="4880" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4891" relation="include">
        </childnode>
        <childnode refid="4902" relation="include">
        </childnode>
      </node>
      <node id="4908">
        <label>inspectimage.hxx</label>
        <link refid="inspectimage_8hxx_source"/>
        <childnode refid="4909" relation="include">
        </childnode>
        <childnode refid="4877" relation="include">
        </childnode>
        <childnode refid="4882" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4907" relation="include">
        </childnode>
        <childnode refid="4902" relation="include">
        </childnode>
        <childnode refid="4900" relation="include">
        </childnode>
      </node>
      <node id="4897">
        <label>mathutil.hxx</label>
        <link refid="mathutil_8hxx_source"/>
        <childnode refid="4866" relation="include">
        </childnode>
        <childnode refid="4898" relation="include">
        </childnode>
        <childnode refid="4868" relation="include">
        </childnode>
        <childnode refid="4872" relation="include">
        </childnode>
        <childnode refid="4883" relation="include">
        </childnode>
        <childnode refid="4878" relation="include">
        </childnode>
        <childnode refid="4870" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4899" relation="include">
        </childnode>
      </node>
      <node id="4872">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="4873" relation="include">
        </childnode>
        <childnode refid="4874" relation="include">
        </childnode>
      </node>
      <node id="4892">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="4875" relation="include">
        </childnode>
        <childnode refid="4876" relation="include">
        </childnode>
        <childnode refid="4893" relation="include">
        </childnode>
        <childnode refid="4868" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
        <childnode refid="4870" relation="include">
        </childnode>
        <childnode refid="4894" relation="include">
        </childnode>
      </node>
      <node id="4909">
        <label>vector</label>
      </node>
      <node id="4916">
        <label>imageiterator.hxx</label>
        <link refid="imageiterator_8hxx_source"/>
        <childnode refid="4882" relation="include">
        </childnode>
        <childnode refid="4891" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
      </node>
      <node id="4896">
        <label>iteratoradapter.hxx</label>
        <link refid="iteratoradapter_8hxx_source"/>
      </node>
      <node id="4895">
        <label>imageiteratoradapter.hxx</label>
        <link refid="imageiteratoradapter_8hxx_source"/>
        <childnode refid="4889" relation="include">
        </childnode>
      </node>
      <node id="4879">
        <label>utility</label>
      </node>
      <node id="4884">
        <label>sstream</label>
      </node>
      <node id="4902">
        <label>rgbvalue.hxx</label>
        <link refid="rgbvalue_8hxx_source"/>
        <childnode refid="4866" relation="include">
        </childnode>
        <childnode refid="4898" relation="include">
        </childnode>
        <childnode refid="4872" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4891" relation="include">
        </childnode>
        <childnode refid="4903" relation="include">
        </childnode>
        <childnode refid="4904" relation="include">
        </childnode>
      </node>
      <node id="4886">
        <label>diff2d.hxx</label>
        <link refid="diff2d_8hxx_source"/>
        <childnode refid="4866" relation="include">
        </childnode>
        <childnode refid="4887" relation="include">
        </childnode>
        <childnode refid="4872" relation="include">
        </childnode>
        <childnode refid="4888" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4896" relation="include">
        </childnode>
        <childnode refid="4878" relation="include">
        </childnode>
      </node>
      <node id="4883">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="4874" relation="include">
        </childnode>
        <childnode refid="4884" relation="include">
        </childnode>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4872" relation="include">
        </childnode>
      </node>
      <node id="4904">
        <label>static_assert.hxx</label>
        <link refid="static__assert_8hxx_source"/>
      </node>
      <node id="4912">
        <label>array_vector.hxx</label>
        <link refid="array__vector_8hxx_source"/>
        <childnode refid="4883" relation="include">
        </childnode>
        <childnode refid="4901" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4881" relation="include">
        </childnode>
        <childnode refid="4877" relation="include">
        </childnode>
        <childnode refid="4887" relation="include">
        </childnode>
      </node>
      <node id="4887">
        <label>iosfwd</label>
      </node>
      <node id="4898">
        <label>cstdlib</label>
      </node>
      <node id="4918">
        <label>multi_iterator.hxx</label>
        <link refid="multi__iterator_8hxx_source"/>
        <childnode refid="4919" relation="include">
        </childnode>
        <childnode refid="4903" relation="include">
        </childnode>
        <childnode refid="4888" relation="include">
        </childnode>
      </node>
      <node id="4875">
        <label>climits</label>
      </node>
      <node id="4871">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="4872" relation="include">
        </childnode>
        <childnode refid="4875" relation="include">
        </childnode>
        <childnode refid="4876" relation="include">
        </childnode>
        <childnode refid="4877" relation="include">
        </childnode>
      </node>
      <node id="4910">
        <label>combineimages.hxx</label>
        <link refid="combineimages_8hxx_source"/>
        <childnode refid="4882" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4907" relation="include">
        </childnode>
        <childnode refid="4866" relation="include">
        </childnode>
      </node>
      <node id="4868">
        <label>complex</label>
      </node>
      <node id="4877">
        <label>algorithm</label>
      </node>
      <node id="4901">
        <label>memory.hxx</label>
        <link refid="memory_8hxx_source"/>
        <childnode refid="4871" relation="include">
        </childnode>
      </node>
      <node id="4891">
        <label>accessor.hxx</label>
        <link refid="accessor_8hxx_source"/>
        <childnode refid="4871" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4878" relation="include">
        </childnode>
      </node>
      <node id="4881">
        <label>memory</label>
      </node>
      <node id="4920">
        <label>navigator.hxx</label>
        <link refid="navigator_8hxx_source"/>
      </node>
      <node id="4865">
        <label>fftw3.hxx</label>
        <link refid="fftw3_8hxx_source"/>
        <childnode refid="4866" relation="include">
        </childnode>
        <childnode refid="4867" relation="include">
        </childnode>
        <childnode refid="4868" relation="include">
        </childnode>
        <childnode refid="4869" relation="include">
        </childnode>
        <childnode refid="4905" relation="include">
        </childnode>
        <childnode refid="4906" relation="include">
        </childnode>
        <childnode refid="4910" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4911" relation="include">
        </childnode>
        <childnode refid="4913" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classvigra_1_1FFTWConvolvePlan" prot="public">vigra::FFTWConvolvePlan</innerclass>
    <innerclass refid="classvigra_1_1FFTWPlan" prot="public">vigra::FFTWPlan</innerclass>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2009-2010<sp/>by<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_MULTI_FFT_HXX</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_MULTI_FFT_HXX</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fftw3.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;multi_array.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;navigator.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;copyimage.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fourier<sp/>Transform<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>\addtogroup<sp/>FourierTransform<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment">*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>moveDCToCenterImpl(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startDimension)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;::traverser<sp/>Traverser;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MultiArrayNavigator&lt;Traverser,<sp/>N&gt;<sp/>Navigator;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Navigator::iterator<sp/>Iterator;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>startDimension;<sp/>d<sp/>&lt;<sp/>N;<sp/>++d)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Navigator<sp/>nav(a.traverser_begin(),<sp/>a.shape(),<sp/>d);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>nav.hasMore();<sp/>nav++<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator<sp/>i<sp/>=<sp/>nav.begin();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/><sp/>=<sp/>nav.end()<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>s/2;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__MathFunctions_1ga3cf86b8d2300cd08b69024eb89f90115" kindref="member">even</ref>(s))</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;s2;<sp/>++k)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(i[k],<sp/>i[k+s2]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>v<sp/>=<sp/>i[0];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;s2;<sp/>++k)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i[k]<sp/>=<sp/>i[k+s2+1];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i[k+s2+1]<sp/>=<sp/>i[k+1];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i[s2]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>moveDCToUpperLeftImpl(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>startDimension)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;::traverser<sp/>Traverser;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MultiArrayNavigator&lt;Traverser,<sp/>N&gt;<sp/>Navigator;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Navigator::iterator<sp/>Iterator;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>startDimension;<sp/>d<sp/>&lt;<sp/>N;<sp/>++d)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Navigator<sp/>nav(a.traverser_begin(),<sp/>a.shape(),<sp/>d);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>nav.hasMore();<sp/>nav++<sp/>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator<sp/>i<sp/>=<sp/>nav.begin();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/><sp/>=<sp/>nav.end()<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>s/2;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__MathFunctions_1ga3cf86b8d2300cd08b69024eb89f90115" kindref="member">even</ref>(s))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;s2;<sp/>++k)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(i[k],<sp/>i[k+s2]);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>v<sp/>=<sp/>i[s2];</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=s2;<sp/>k&gt;0;<sp/>--k)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i[k]<sp/>=<sp/>i[k+s2];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i[k+s2]<sp/>=<sp/>i[k-1];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i[0]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDCToCenter<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FourierTransform_1gaecb29642aab8a911b4f53e289d31e5e5" kindref="member" tooltip="Rearrange the quadrants of a Fourier image so that the origin is in the image center.">moveDCToCenter</ref>(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>a)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::moveDCToCenterImpl(a,<sp/>0);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__FourierTransform_1gaee27c376079af99e8e2148e7d23ffbbb" kindref="member" tooltip="Rearrange the quadrants of a Fourier image so that the origin is in the image&amp;#39;s upper left...">moveDCToUpperLeft</ref>(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>a)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::moveDCToUpperLeftImpl(a,<sp/>0);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>moveDCToHalfspaceCenter(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>a)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::moveDCToCenterImpl(a,<sp/>1);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>moveDCToHalfspaceUpperLeft(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>a)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::moveDCToUpperLeftImpl(a,<sp/>1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftw_plan<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;double&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;double&gt;<sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__MathFunctions_1ga99756ca23b738bdc82afba3b0e49df74" kindref="member">sign</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftw_plan_many_dft(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftw_complex<sp/>*)in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftw_complex<sp/>*)out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftw_plan<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;double&gt;<sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sign<sp/>is<sp/>ignored*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftw_plan_many_dft_r2c(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftw_complex<sp/>*)out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_flags);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftw_plan<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;double&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sign<sp/>is<sp/>ignored*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftw_plan_many_dft_c2r(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftw_complex<sp/>*)in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_flags);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftwf_plan<sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;float&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;float&gt;<sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftwf_plan_many_dft(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftwf_complex<sp/>*)in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftwf_complex<sp/>*)out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftwf_plan<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;float&gt;<sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sign<sp/>is<sp/>ignored*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftwf_plan_many_dft_r2c(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftwf_complex<sp/>*)out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_flags);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftwf_plan<sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;float&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sign<sp/>is<sp/>ignored*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftwf_plan_many_dft_c2r(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftwf_complex<sp/>*)in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_flags);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftwl_plan<sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;long<sp/>double&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;long<sp/>double&gt;<sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftwl_plan_many_dft(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftwl_complex<sp/>*)in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftwl_complex<sp/>*)out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftwl_plan<sp/></highlight></codeline>
<codeline lineno="254"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;long<sp/>double&gt;<sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sign<sp/>is<sp/>ignored*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftwl_plan_many_dft_r2c(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftwl_complex<sp/>*)out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_flags);</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>fftwl_plan<sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal">fftwPlanCreate(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>shape,<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWComplex&lt;long<sp/>double&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>instrides,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>instep,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>outstrides,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outstep,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*sign<sp/>is<sp/>ignored*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftwl_plan_many_dft_c2r(N,<sp/>shape,<sp/>1,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fftwl_complex<sp/>*)in,<sp/>instrides,<sp/>instep,<sp/>0,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/>outstrides,<sp/>outstep,<sp/>0,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_flags);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fftwPlanDestroy(fftw_plan<sp/>plan)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plan<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_destroy_plan(plan);</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fftwPlanDestroy(fftwf_plan<sp/>plan)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plan<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftwf_destroy_plan(plan);</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fftwPlanDestroy(fftwl_plan<sp/>plan)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(plan<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftwl_destroy_plan(plan);</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal">fftwPlanExecute(fftw_plan<sp/>plan)<sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_execute(plan);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal">fftwPlanExecute(fftwf_plan<sp/>plan)<sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>fftwf_execute(plan);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal">fftwPlanExecute(fftwl_plan<sp/>plan)<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>fftwl_execute(plan);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal">fftwPlanExecute(fftw_plan<sp/>plan,<sp/>FFTWComplex&lt;double&gt;<sp/>*<sp/>in,<sp/><sp/>FFTWComplex&lt;double&gt;<sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_execute_dft(plan,<sp/>(fftw_complex<sp/>*)in,<sp/>(fftw_complex<sp/>*)out);</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal">fftwPlanExecute(fftw_plan<sp/>plan,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>in,<sp/><sp/>FFTWComplex&lt;double&gt;<sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_execute_dft_r2c(plan,<sp/>in,<sp/>(fftw_complex<sp/>*)out);</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal">fftwPlanExecute(fftw_plan<sp/>plan,<sp/>FFTWComplex&lt;double&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_execute_dft_c2r(plan,<sp/>(fftw_complex<sp/>*)in,<sp/>out);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal">fftwPlanExecute(fftwf_plan<sp/>plan,<sp/>FFTWComplex&lt;float&gt;<sp/>*<sp/>in,<sp/><sp/>FFTWComplex&lt;float&gt;<sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>fftwf_execute_dft(plan,<sp/>(fftwf_complex<sp/>*)in,<sp/>(fftwf_complex<sp/>*)out);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal">fftwPlanExecute(fftwf_plan<sp/>plan,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>in,<sp/><sp/>FFTWComplex&lt;float&gt;<sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>fftwf_execute_dft_r2c(plan,<sp/>in,<sp/>(fftwf_complex<sp/>*)out);</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal">fftwPlanExecute(fftwf_plan<sp/>plan,<sp/>FFTWComplex&lt;float&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>fftwf_execute_dft_c2r(plan,<sp/>(fftwf_complex<sp/>*)in,<sp/>out);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal">fftwPlanExecute(fftwl_plan<sp/>plan,<sp/>FFTWComplex&lt;long<sp/>double&gt;<sp/>*<sp/>in,<sp/><sp/>FFTWComplex&lt;long<sp/>double&gt;<sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>fftwl_execute_dft(plan,<sp/>(fftwl_complex<sp/>*)in,<sp/>(fftwl_complex<sp/>*)out);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal">fftwPlanExecute(fftwl_plan<sp/>plan,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>in,<sp/><sp/>FFTWComplex&lt;long<sp/>double&gt;<sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>fftwl_execute_dft_r2c(plan,<sp/>in,<sp/>(fftwl_complex<sp/>*)out);</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal">fftwPlanExecute(fftwl_plan<sp/>plan,<sp/>FFTWComplex&lt;long<sp/>double&gt;<sp/>*<sp/>in,<sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>out)<sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>fftwl_execute_dft_c2r(plan,<sp/>(fftwl_complex<sp/>*)in,<sp/>out);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fftwPaddingSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Image<sp/>sizes<sp/>where<sp/>FFTW<sp/>is<sp/>fast.<sp/>The<sp/>list<sp/>contains<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>numbers<sp/>less<sp/>than<sp/>100000<sp/>whose<sp/>prime<sp/>decomposition<sp/>is<sp/>of<sp/>the<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2^a*3^b*5^c*7^d*11^e*13^f,<sp/>where<sp/>e+f<sp/>is<sp/>either<sp/>0<sp/>or<sp/>1,<sp/>and<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>exponents<sp/>are<sp/>arbitrary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>1330;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>goodSizes[size]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16,<sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18,<sp/>20,<sp/>21,<sp/>22,<sp/>24,<sp/>25,<sp/>26,<sp/>27,<sp/>28,<sp/>30,<sp/>32,<sp/>33,<sp/>35,<sp/>36,<sp/>39,<sp/>40,<sp/>42,<sp/>44,<sp/>45,<sp/>48,<sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49,<sp/>50,<sp/>52,<sp/>54,<sp/>55,<sp/>56,<sp/>60,<sp/>63,<sp/>64,<sp/>65,<sp/>66,<sp/>70,<sp/>72,<sp/>75,<sp/>77,<sp/>78,<sp/>80,<sp/>81,<sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>84,<sp/>88,<sp/>90,<sp/>91,<sp/>96,<sp/>98,<sp/>99,<sp/>100,<sp/>104,<sp/>105,<sp/>108,<sp/>110,<sp/>112,<sp/>117,<sp/>120,<sp/>125,<sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>126,<sp/>128,<sp/>130,<sp/>132,<sp/>135,<sp/>140,<sp/>144,<sp/>147,<sp/>150,<sp/>154,<sp/>156,<sp/>160,<sp/>162,<sp/>165,<sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>168,<sp/>175,<sp/>176,<sp/>180,<sp/>182,<sp/>189,<sp/>192,<sp/>195,<sp/>196,<sp/>198,<sp/>200,<sp/>208,<sp/>210,<sp/>216,<sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>220,<sp/>224,<sp/>225,<sp/>231,<sp/>234,<sp/>240,<sp/>243,<sp/>245,<sp/>250,<sp/>252,<sp/>256,<sp/>260,<sp/>264,<sp/>270,<sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>273,<sp/>275,<sp/>280,<sp/>288,<sp/>294,<sp/>297,<sp/>300,<sp/>308,<sp/>312,<sp/>315,<sp/>320,<sp/>324,<sp/>325,<sp/>330,<sp/></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>336,<sp/>343,<sp/>350,<sp/>351,<sp/>352,<sp/>360,<sp/>364,<sp/>375,<sp/>378,<sp/>384,<sp/>385,<sp/>390,<sp/>392,<sp/>396,<sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>400,<sp/>405,<sp/>416,<sp/>420,<sp/>432,<sp/>440,<sp/>441,<sp/>448,<sp/>450,<sp/>455,<sp/>462,<sp/>468,<sp/>480,<sp/>486,<sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>490,<sp/>495,<sp/>500,<sp/>504,<sp/>512,<sp/>520,<sp/>525,<sp/>528,<sp/>539,<sp/>540,<sp/>546,<sp/>550,<sp/>560,<sp/>567,<sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>576,<sp/>585,<sp/>588,<sp/>594,<sp/>600,<sp/>616,<sp/>624,<sp/>625,<sp/>630,<sp/>637,<sp/>640,<sp/>648,<sp/>650,<sp/>660,<sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>672,<sp/>675,<sp/>686,<sp/>693,<sp/>700,<sp/>702,<sp/>704,<sp/>720,<sp/>728,<sp/>729,<sp/>735,<sp/>750,<sp/>756,<sp/>768,<sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>770,<sp/>780,<sp/>784,<sp/>792,<sp/>800,<sp/>810,<sp/>819,<sp/>825,<sp/>832,<sp/>840,<sp/>864,<sp/>875,<sp/>880,<sp/>882,<sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>891,<sp/>896,<sp/>900,<sp/>910,<sp/>924,<sp/>936,<sp/>945,<sp/>960,<sp/>972,<sp/>975,<sp/>980,<sp/>990,<sp/>1000,<sp/>1008,<sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1024,<sp/>1029,<sp/>1040,<sp/>1050,<sp/>1053,<sp/>1056,<sp/>1078,<sp/>1080,<sp/>1092,<sp/>1100,<sp/>1120,<sp/>1125,<sp/></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1134,<sp/>1152,<sp/>1155,<sp/>1170,<sp/>1176,<sp/>1188,<sp/>1200,<sp/>1215,<sp/>1225,<sp/>1232,<sp/>1248,<sp/>1250,<sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1260,<sp/>1274,<sp/>1280,<sp/>1296,<sp/>1300,<sp/>1320,<sp/>1323,<sp/>1344,<sp/>1350,<sp/>1365,<sp/>1372,<sp/>1375,<sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1386,<sp/>1400,<sp/>1404,<sp/>1408,<sp/>1440,<sp/>1456,<sp/>1458,<sp/>1470,<sp/>1485,<sp/>1500,<sp/>1512,<sp/>1536,<sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1540,<sp/>1560,<sp/>1568,<sp/>1575,<sp/>1584,<sp/>1600,<sp/>1617,<sp/>1620,<sp/>1625,<sp/>1638,<sp/>1650,<sp/>1664,<sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1680,<sp/>1701,<sp/>1715,<sp/>1728,<sp/>1750,<sp/>1755,<sp/>1760,<sp/>1764,<sp/>1782,<sp/>1792,<sp/>1800,<sp/>1820,<sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1848,<sp/>1872,<sp/>1875,<sp/>1890,<sp/>1911,<sp/>1920,<sp/>1925,<sp/>1944,<sp/>1950,<sp/>1960,<sp/>1980,<sp/>2000,<sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2016,<sp/>2025,<sp/>2048,<sp/>2058,<sp/>2079,<sp/>2080,<sp/>2100,<sp/>2106,<sp/>2112,<sp/>2156,<sp/>2160,<sp/>2184,<sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2187,<sp/>2200,<sp/>2205,<sp/>2240,<sp/>2250,<sp/>2268,<sp/>2275,<sp/>2304,<sp/>2310,<sp/>2340,<sp/>2352,<sp/>2376,<sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2400,<sp/>2401,<sp/>2430,<sp/>2450,<sp/>2457,<sp/>2464,<sp/>2475,<sp/>2496,<sp/>2500,<sp/>2520,<sp/>2548,<sp/>2560,<sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2592,<sp/>2600,<sp/>2625,<sp/>2640,<sp/>2646,<sp/>2673,<sp/>2688,<sp/>2695,<sp/>2700,<sp/>2730,<sp/>2744,<sp/>2750,<sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2772,<sp/>2800,<sp/>2808,<sp/>2816,<sp/>2835,<sp/>2880,<sp/>2912,<sp/>2916,<sp/>2925,<sp/>2940,<sp/>2970,<sp/>3000,<sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3024,<sp/>3072,<sp/>3080,<sp/>3087,<sp/>3120,<sp/>3125,<sp/>3136,<sp/>3150,<sp/>3159,<sp/>3168,<sp/>3185,<sp/>3200,<sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3234,<sp/>3240,<sp/>3250,<sp/>3276,<sp/>3300,<sp/>3328,<sp/>3360,<sp/>3375,<sp/>3402,<sp/>3430,<sp/>3456,<sp/>3465,<sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3500,<sp/>3510,<sp/>3520,<sp/>3528,<sp/>3564,<sp/>3584,<sp/>3600,<sp/>3640,<sp/>3645,<sp/>3675,<sp/>3696,<sp/>3744,<sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3750,<sp/>3773,<sp/>3780,<sp/>3822,<sp/>3840,<sp/>3850,<sp/>3888,<sp/>3900,<sp/>3920,<sp/>3960,<sp/>3969,<sp/>4000,<sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4032,<sp/>4050,<sp/>4095,<sp/>4096,<sp/>4116,<sp/>4125,<sp/>4158,<sp/>4160,<sp/>4200,<sp/>4212,<sp/>4224,<sp/>4312,<sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4320,<sp/>4368,<sp/>4374,<sp/>4375,<sp/>4400,<sp/>4410,<sp/>4455,<sp/>4459,<sp/>4480,<sp/>4500,<sp/>4536,<sp/>4550,<sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4608,<sp/>4620,<sp/>4680,<sp/>4704,<sp/>4725,<sp/>4752,<sp/>4800,<sp/>4802,<sp/>4851,<sp/>4860,<sp/>4875,<sp/>4900,<sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4914,<sp/>4928,<sp/>4950,<sp/>4992,<sp/>5000,<sp/>5040,<sp/>5096,<sp/>5103,<sp/>5120,<sp/>5145,<sp/>5184,<sp/>5200,<sp/></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5250,<sp/>5265,<sp/>5280,<sp/>5292,<sp/>5346,<sp/>5376,<sp/>5390,<sp/>5400,<sp/>5460,<sp/>5488,<sp/>5500,<sp/>5544,<sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5600,<sp/>5616,<sp/>5625,<sp/>5632,<sp/>5670,<sp/>5733,<sp/>5760,<sp/>5775,<sp/>5824,<sp/>5832,<sp/>5850,<sp/>5880,<sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5940,<sp/>6000,<sp/>6048,<sp/>6075,<sp/>6125,<sp/>6144,<sp/>6160,<sp/>6174,<sp/>6237,<sp/>6240,<sp/>6250,<sp/>6272,<sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6300,<sp/>6318,<sp/>6336,<sp/>6370,<sp/>6400,<sp/>6468,<sp/>6480,<sp/>6500,<sp/>6552,<sp/>6561,<sp/>6600,<sp/>6615,<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6656,<sp/>6720,<sp/>6750,<sp/>6804,<sp/>6825,<sp/>6860,<sp/>6875,<sp/>6912,<sp/>6930,<sp/>7000,<sp/>7020,<sp/>7040,<sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7056,<sp/>7128,<sp/>7168,<sp/>7200,<sp/>7203,<sp/>7280,<sp/>7290,<sp/>7350,<sp/>7371,<sp/>7392,<sp/>7425,<sp/>7488,<sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7500,<sp/>7546,<sp/>7560,<sp/>7644,<sp/>7680,<sp/>7700,<sp/>7776,<sp/>7800,<sp/>7840,<sp/>7875,<sp/>7920,<sp/>7938,<sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8000,<sp/>8019,<sp/>8064,<sp/>8085,<sp/>8100,<sp/>8125,<sp/>8190,<sp/>8192,<sp/>8232,<sp/>8250,<sp/>8316,<sp/>8320,<sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8400,<sp/>8424,<sp/>8448,<sp/>8505,<sp/>8575,<sp/>8624,<sp/>8640,<sp/>8736,<sp/>8748,<sp/>8750,<sp/>8775,<sp/>8800,<sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8820,<sp/>8910,<sp/>8918,<sp/>8960,<sp/>9000,<sp/>9072,<sp/>9100,<sp/>9216,<sp/>9240,<sp/>9261,<sp/>9360,<sp/>9375,<sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9408,<sp/>9450,<sp/>9477,<sp/>9504,<sp/>9555,<sp/>9600,<sp/>9604,<sp/>9625,<sp/>9702,<sp/>9720,<sp/>9750,<sp/>9800,<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9828,<sp/>9856,<sp/>9900,<sp/>9984,<sp/>10000,<sp/>10080,<sp/>10125,<sp/>10192,<sp/>10206,<sp/>10240,<sp/>10290,<sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10368,<sp/>10395,<sp/>10400,<sp/>10500,<sp/>10530,<sp/>10560,<sp/>10584,<sp/>10692,<sp/>10752,<sp/>10780,<sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10800,<sp/>10920,<sp/>10935,<sp/>10976,<sp/>11000,<sp/>11025,<sp/>11088,<sp/>11200,<sp/>11232,<sp/>11250,<sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11264,<sp/>11319,<sp/>11340,<sp/>11375,<sp/>11466,<sp/>11520,<sp/>11550,<sp/>11648,<sp/>11664,<sp/>11700,<sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11760,<sp/>11880,<sp/>11907,<sp/>12000,<sp/>12005,<sp/>12096,<sp/>12150,<sp/>12250,<sp/>12285,<sp/>12288,<sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12320,<sp/>12348,<sp/>12375,<sp/>12474,<sp/>12480,<sp/>12500,<sp/>12544,<sp/>12600,<sp/>12636,<sp/>12672,<sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12740,<sp/>12800,<sp/>12936,<sp/>12960,<sp/>13000,<sp/>13104,<sp/>13122,<sp/>13125,<sp/>13200,<sp/>13230,<sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13312,<sp/>13365,<sp/>13377,<sp/>13440,<sp/>13475,<sp/>13500,<sp/>13608,<sp/>13650,<sp/>13720,<sp/>13750,<sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13824,<sp/>13860,<sp/>14000,<sp/>14040,<sp/>14080,<sp/>14112,<sp/>14175,<sp/>14256,<sp/>14336,<sp/>14400,<sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14406,<sp/>14553,<sp/>14560,<sp/>14580,<sp/>14625,<sp/>14700,<sp/>14742,<sp/>14784,<sp/>14850,<sp/>14976,<sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15000,<sp/>15092,<sp/>15120,<sp/>15288,<sp/>15309,<sp/>15360,<sp/>15400,<sp/>15435,<sp/>15552,<sp/>15600,<sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15625,<sp/>15680,<sp/>15750,<sp/>15795,<sp/>15840,<sp/>15876,<sp/>15925,<sp/>16000,<sp/>16038,<sp/>16128,<sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16170,<sp/>16200,<sp/>16250,<sp/>16380,<sp/>16384,<sp/>16464,<sp/>16500,<sp/>16632,<sp/>16640,<sp/>16800,<sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16807,<sp/>16848,<sp/>16875,<sp/>16896,<sp/>17010,<sp/>17150,<sp/>17199,<sp/>17248,<sp/>17280,<sp/>17325,<sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17472,<sp/>17496,<sp/>17500,<sp/>17550,<sp/>17600,<sp/>17640,<sp/>17820,<sp/>17836,<sp/>17920,<sp/>18000,<sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18144,<sp/>18200,<sp/>18225,<sp/>18375,<sp/>18432,<sp/>18480,<sp/>18522,<sp/>18711,<sp/>18720,<sp/>18750,<sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18816,<sp/>18865,<sp/>18900,<sp/>18954,<sp/>19008,<sp/>19110,<sp/>19200,<sp/>19208,<sp/>19250,<sp/>19404,<sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19440,<sp/>19500,<sp/>19600,<sp/>19656,<sp/>19683,<sp/>19712,<sp/>19800,<sp/>19845,<sp/>19968,<sp/>20000,<sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20160,<sp/>20250,<sp/>20384,<sp/>20412,<sp/>20475,<sp/>20480,<sp/>20580,<sp/>20625,<sp/>20736,<sp/>20790,<sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20800,<sp/>21000,<sp/>21060,<sp/>21120,<sp/>21168,<sp/>21384,<sp/>21504,<sp/>21560,<sp/>21600,<sp/>21609,<sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21840,<sp/>21870,<sp/>21875,<sp/>21952,<sp/>22000,<sp/>22050,<sp/>22113,<sp/>22176,<sp/>22275,<sp/>22295,<sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22400,<sp/>22464,<sp/>22500,<sp/>22528,<sp/>22638,<sp/>22680,<sp/>22750,<sp/>22932,<sp/>23040,<sp/>23100,<sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23296,<sp/>23328,<sp/>23400,<sp/>23520,<sp/>23625,<sp/>23760,<sp/>23814,<sp/>24000,<sp/>24010,<sp/>24057,<sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24192,<sp/>24255,<sp/>24300,<sp/>24375,<sp/>24500,<sp/>24570,<sp/>24576,<sp/>24640,<sp/>24696,<sp/>24750,<sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24948,<sp/>24960,<sp/>25000,<sp/>25088,<sp/>25200,<sp/>25272,<sp/>25344,<sp/>25480,<sp/>25515,<sp/>25600,<sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25725,<sp/>25872,<sp/>25920,<sp/>26000,<sp/>26208,<sp/>26244,<sp/>26250,<sp/>26325,<sp/>26400,<sp/>26411,<sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>26460,<sp/>26624,<sp/>26730,<sp/>26754,<sp/>26880,<sp/>26950,<sp/>27000,<sp/>27216,<sp/>27300,<sp/>27440,<sp/></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>27500,<sp/>27648,<sp/>27720,<sp/>27783,<sp/>28000,<sp/>28080,<sp/>28125,<sp/>28160,<sp/>28224,<sp/>28350,<sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>28431,<sp/>28512,<sp/>28665,<sp/>28672,<sp/>28800,<sp/>28812,<sp/>28875,<sp/>29106,<sp/>29120,<sp/>29160,<sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>29250,<sp/>29400,<sp/>29484,<sp/>29568,<sp/>29700,<sp/>29952,<sp/>30000,<sp/>30184,<sp/>30240,<sp/>30375,<sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>30576,<sp/>30618,<sp/>30625,<sp/>30720,<sp/>30800,<sp/>30870,<sp/>31104,<sp/>31185,<sp/>31200,<sp/>31213,<sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>31250,<sp/>31360,<sp/>31500,<sp/>31590,<sp/>31680,<sp/>31752,<sp/>31850,<sp/>32000,<sp/>32076,<sp/>32256,<sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32340,<sp/>32400,<sp/>32500,<sp/>32760,<sp/>32768,<sp/>32805,<sp/>32928,<sp/>33000,<sp/>33075,<sp/>33264,<sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>33280,<sp/>33600,<sp/>33614,<sp/>33696,<sp/>33750,<sp/>33792,<sp/>33957,<sp/>34020,<sp/>34125,<sp/>34300,<sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>34375,<sp/>34398,<sp/>34496,<sp/>34560,<sp/>34650,<sp/>34944,<sp/>34992,<sp/>35000,<sp/>35100,<sp/>35200,<sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>35280,<sp/>35640,<sp/>35672,<sp/>35721,<sp/>35840,<sp/>36000,<sp/>36015,<sp/>36288,<sp/>36400,<sp/>36450,<sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>36750,<sp/>36855,<sp/>36864,<sp/>36960,<sp/>37044,<sp/>37125,<sp/>37422,<sp/>37440,<sp/>37500,<sp/>37632,<sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>37730,<sp/>37800,<sp/>37908,<sp/>38016,<sp/>38220,<sp/>38400,<sp/>38416,<sp/>38500,<sp/>38808,<sp/>38880,<sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>39000,<sp/>39200,<sp/>39312,<sp/>39366,<sp/>39375,<sp/>39424,<sp/>39600,<sp/>39690,<sp/>39936,<sp/>40000,<sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>40095,<sp/>40131,<sp/>40320,<sp/>40425,<sp/>40500,<sp/>40625,<sp/>40768,<sp/>40824,<sp/>40950,<sp/>40960,<sp/></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41160,<sp/>41250,<sp/>41472,<sp/>41580,<sp/>41600,<sp/>42000,<sp/>42120,<sp/>42240,<sp/>42336,<sp/>42525,<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>42768,<sp/>42875,<sp/>43008,<sp/>43120,<sp/>43200,<sp/>43218,<sp/>43659,<sp/>43680,<sp/>43740,<sp/>43750,<sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>43875,<sp/>43904,<sp/>44000,<sp/>44100,<sp/>44226,<sp/>44352,<sp/>44550,<sp/>44590,<sp/>44800,<sp/>44928,<sp/></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>45000,<sp/>45056,<sp/>45276,<sp/>45360,<sp/>45500,<sp/>45864,<sp/>45927,<sp/>46080,<sp/>46200,<sp/>46305,<sp/></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>46592,<sp/>46656,<sp/>46800,<sp/>46875,<sp/>47040,<sp/>47250,<sp/>47385,<sp/>47520,<sp/>47628,<sp/>47775,<sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>48000,<sp/>48020,<sp/>48114,<sp/>48125,<sp/>48384,<sp/>48510,<sp/>48600,<sp/>48750,<sp/>49000,<sp/>49140,<sp/></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49152,<sp/>49280,<sp/>49392,<sp/>49500,<sp/>49896,<sp/>49920,<sp/>50000,<sp/>50176,<sp/>50400,<sp/>50421,<sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>50544,<sp/>50625,<sp/>50688,<sp/>50960,<sp/>51030,<sp/>51200,<sp/>51450,<sp/>51597,<sp/>51744,<sp/>51840,<sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>51975,<sp/>52000,<sp/>52416,<sp/>52488,<sp/>52500,<sp/>52650,<sp/>52800,<sp/>52822,<sp/>52920,<sp/>53248,<sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>53460,<sp/>53508,<sp/>53760,<sp/>53900,<sp/>54000,<sp/>54432,<sp/>54600,<sp/>54675,<sp/>54880,<sp/>55000,<sp/></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>55125,<sp/>55296,<sp/>55440,<sp/>55566,<sp/>56000,<sp/>56133,<sp/>56160,<sp/>56250,<sp/>56320,<sp/>56448,<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>56595,<sp/>56700,<sp/>56862,<sp/>56875,<sp/>57024,<sp/>57330,<sp/>57344,<sp/>57600,<sp/>57624,<sp/>57750,<sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>58212,<sp/>58240,<sp/>58320,<sp/>58500,<sp/>58800,<sp/>58968,<sp/>59049,<sp/>59136,<sp/>59400,<sp/>59535,<sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>59904,<sp/>60000,<sp/>60025,<sp/>60368,<sp/>60480,<sp/>60750,<sp/>61152,<sp/>61236,<sp/>61250,<sp/>61425,<sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>61440,<sp/>61600,<sp/>61740,<sp/>61875,<sp/>62208,<sp/>62370,<sp/>62400,<sp/>62426,<sp/>62500,<sp/>62720,<sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>63000,<sp/>63180,<sp/>63360,<sp/>63504,<sp/>63700,<sp/>64000,<sp/>64152,<sp/>64512,<sp/>64680,<sp/>64800,<sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64827,<sp/>65000,<sp/>65520,<sp/>65536,<sp/>65610,<sp/>65625,<sp/>65856,<sp/>66000,<sp/>66150,<sp/>66339,<sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>66528,<sp/>66560,<sp/>66825,<sp/>66885,<sp/>67200,<sp/>67228,<sp/>67375,<sp/>67392,<sp/>67500,<sp/>67584,<sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>67914,<sp/>68040,<sp/>68250,<sp/>68600,<sp/>68750,<sp/>68796,<sp/>68992,<sp/>69120,<sp/>69300,<sp/>69888,<sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>69984,<sp/>70000,<sp/>70200,<sp/>70400,<sp/>70560,<sp/>70875,<sp/>71280,<sp/>71344,<sp/>71442,<sp/>71680,<sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>72000,<sp/>72030,<sp/>72171,<sp/>72576,<sp/>72765,<sp/>72800,<sp/>72900,<sp/>73125,<sp/>73500,<sp/>73710,<sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>73728,<sp/>73920,<sp/>74088,<sp/>74250,<sp/>74844,<sp/>74880,<sp/>75000,<sp/>75264,<sp/>75460,<sp/>75600,<sp/></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>75816,<sp/>76032,<sp/>76440,<sp/>76545,<sp/>76800,<sp/>76832,<sp/>77000,<sp/>77175,<sp/>77616,<sp/>77760,<sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>78000,<sp/>78125,<sp/>78400,<sp/>78624,<sp/>78732,<sp/>78750,<sp/>78848,<sp/>78975,<sp/>79200,<sp/>79233,<sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>79380,<sp/>79625,<sp/>79872,<sp/>80000,<sp/>80190,<sp/>80262,<sp/>80640,<sp/>80850,<sp/>81000,<sp/>81250,<sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>81536,<sp/>81648,<sp/>81900,<sp/>81920,<sp/>82320,<sp/>82500,<sp/>82944,<sp/>83160,<sp/>83200,<sp/>83349,<sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>84000,<sp/>84035,<sp/>84240,<sp/>84375,<sp/>84480,<sp/>84672,<sp/>85050,<sp/>85293,<sp/>85536,<sp/>85750,<sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>85995,<sp/>86016,<sp/>86240,<sp/>86400,<sp/>86436,<sp/>86625,<sp/>87318,<sp/>87360,<sp/>87480,<sp/>87500,<sp/></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>87750,<sp/>87808,<sp/>88000,<sp/>88200,<sp/>88452,<sp/>88704,<sp/>89100,<sp/>89180,<sp/>89600,<sp/>89856,<sp/></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>90000,<sp/>90112,<sp/>90552,<sp/>90720,<sp/>91000,<sp/>91125,<sp/>91728,<sp/>91854,<sp/>91875,<sp/>92160,<sp/></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>92400,<sp/>92610,<sp/>93184,<sp/>93312,<sp/>93555,<sp/>93600,<sp/>93639,<sp/>93750,<sp/>94080,<sp/>94325,<sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>94500,<sp/>94770,<sp/>95040,<sp/>95256,<sp/>95550,<sp/>96000,<sp/>96040,<sp/>96228,<sp/>96250,<sp/>96768,<sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>97020,<sp/>97200,<sp/>97500,<sp/>98000,<sp/>98280,<sp/>98304,<sp/>98415,<sp/>98560,<sp/>98784,<sp/>99000,<sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>99225,<sp/>99792,<sp/>99840<sp/>};<sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s<sp/>&lt;=<sp/>0<sp/>||<sp/>s<sp/>&gt;<sp/>goodSizes[size-1])</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::upper_bound(goodSizes,<sp/>goodSizes+size,<sp/>s,<sp/>std::less_equal&lt;int&gt;());</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fftwEvenPaddingSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Image<sp/>sizes<sp/>where<sp/>FFTW<sp/>is<sp/>fast.<sp/>The<sp/>list<sp/>contains<sp/>all<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>numbers<sp/>less<sp/>than<sp/>100000<sp/>whose<sp/>prime<sp/>decomposition<sp/>is<sp/>of<sp/>the<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2^a*3^b*5^c*7^d*11^e*13^f,<sp/>where<sp/>a<sp/>&gt;=<sp/>1,<sp/>e+f<sp/>is<sp/>either<sp/>0<sp/>or<sp/>1,<sp/>and<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>exponents<sp/>are<sp/>arbitrary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>1063;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>goodSizes[size]<sp/>=<sp/>{<sp/>2,<sp/>4,<sp/>6,<sp/>8,<sp/>10,<sp/>12,<sp/>14,<sp/>16,<sp/>18,<sp/>20,<sp/>22,<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24,<sp/>26,<sp/>28,<sp/>30,<sp/>32,<sp/>36,<sp/>40,<sp/>42,<sp/>44,<sp/>48,<sp/>50,<sp/>52,<sp/>54,<sp/>56,<sp/>60,<sp/>64,<sp/>66,<sp/>70,<sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>72,<sp/>78,<sp/>80,<sp/>84,<sp/>88,<sp/>90,<sp/>96,<sp/>98,<sp/>100,<sp/>104,<sp/>108,<sp/>110,<sp/>112,<sp/>120,<sp/>126,<sp/>128,<sp/></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130,<sp/>132,<sp/>140,<sp/>144,<sp/>150,<sp/>154,<sp/>156,<sp/>160,<sp/>162,<sp/>168,<sp/>176,<sp/>180,<sp/>182,<sp/>192,<sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>196,<sp/>198,<sp/>200,<sp/>208,<sp/>210,<sp/>216,<sp/>220,<sp/>224,<sp/>234,<sp/>240,<sp/>250,<sp/>252,<sp/>256,<sp/>260,<sp/></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>264,<sp/>270,<sp/>280,<sp/>288,<sp/>294,<sp/>300,<sp/>308,<sp/>312,<sp/>320,<sp/>324,<sp/>330,<sp/>336,<sp/>350,<sp/>352,<sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>360,<sp/>364,<sp/>378,<sp/>384,<sp/>390,<sp/>392,<sp/>396,<sp/>400,<sp/>416,<sp/>420,<sp/>432,<sp/>440,<sp/>448,<sp/>450,<sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>462,<sp/>468,<sp/>480,<sp/>486,<sp/>490,<sp/>500,<sp/>504,<sp/>512,<sp/>520,<sp/>528,<sp/>540,<sp/>546,<sp/>550,<sp/>560,<sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>576,<sp/>588,<sp/>594,<sp/>600,<sp/>616,<sp/>624,<sp/>630,<sp/>640,<sp/>648,<sp/>650,<sp/>660,<sp/>672,<sp/>686,<sp/>700,<sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>702,<sp/>704,<sp/>720,<sp/>728,<sp/>750,<sp/>756,<sp/>768,<sp/>770,<sp/>780,<sp/>784,<sp/>792,<sp/>800,<sp/>810,<sp/>832,<sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>840,<sp/>864,<sp/>880,<sp/>882,<sp/>896,<sp/>900,<sp/>910,<sp/>924,<sp/>936,<sp/>960,<sp/>972,<sp/>980,<sp/>990,<sp/>1000,<sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1008,<sp/>1024,<sp/>1040,<sp/>1050,<sp/>1056,<sp/>1078,<sp/>1080,<sp/>1092,<sp/>1100,<sp/>1120,<sp/>1134,<sp/>1152,<sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1170,<sp/>1176,<sp/>1188,<sp/>1200,<sp/>1232,<sp/>1248,<sp/>1250,<sp/>1260,<sp/>1274,<sp/>1280,<sp/>1296,<sp/>1300,<sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1320,<sp/>1344,<sp/>1350,<sp/>1372,<sp/>1386,<sp/>1400,<sp/>1404,<sp/>1408,<sp/>1440,<sp/>1456,<sp/>1458,<sp/>1470,<sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1500,<sp/>1512,<sp/>1536,<sp/>1540,<sp/>1560,<sp/>1568,<sp/>1584,<sp/>1600,<sp/>1620,<sp/>1638,<sp/>1650,<sp/>1664,<sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1680,<sp/>1728,<sp/>1750,<sp/>1760,<sp/>1764,<sp/>1782,<sp/>1792,<sp/>1800,<sp/>1820,<sp/>1848,<sp/>1872,<sp/>1890,<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1920,<sp/>1944,<sp/>1950,<sp/>1960,<sp/>1980,<sp/>2000,<sp/>2016,<sp/>2048,<sp/>2058,<sp/>2080,<sp/>2100,<sp/>2106,<sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2112,<sp/>2156,<sp/>2160,<sp/>2184,<sp/>2200,<sp/>2240,<sp/>2250,<sp/>2268,<sp/>2304,<sp/>2310,<sp/>2340,<sp/>2352,<sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2376,<sp/>2400,<sp/>2430,<sp/>2450,<sp/>2464,<sp/>2496,<sp/>2500,<sp/>2520,<sp/>2548,<sp/>2560,<sp/>2592,<sp/>2600,<sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2640,<sp/>2646,<sp/>2688,<sp/>2700,<sp/>2730,<sp/>2744,<sp/>2750,<sp/>2772,<sp/>2800,<sp/>2808,<sp/>2816,<sp/>2880,<sp/></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2912,<sp/>2916,<sp/>2940,<sp/>2970,<sp/>3000,<sp/>3024,<sp/>3072,<sp/>3080,<sp/>3120,<sp/>3136,<sp/>3150,<sp/>3168,<sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3200,<sp/>3234,<sp/>3240,<sp/>3250,<sp/>3276,<sp/>3300,<sp/>3328,<sp/>3360,<sp/>3402,<sp/>3430,<sp/>3456,<sp/>3500,<sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3510,<sp/>3520,<sp/>3528,<sp/>3564,<sp/>3584,<sp/>3600,<sp/>3640,<sp/>3696,<sp/>3744,<sp/>3750,<sp/>3780,<sp/>3822,<sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3840,<sp/>3850,<sp/>3888,<sp/>3900,<sp/>3920,<sp/>3960,<sp/>4000,<sp/>4032,<sp/>4050,<sp/>4096,<sp/>4116,<sp/>4158,<sp/></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4160,<sp/>4200,<sp/>4212,<sp/>4224,<sp/>4312,<sp/>4320,<sp/>4368,<sp/>4374,<sp/>4400,<sp/>4410,<sp/>4480,<sp/>4500,<sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4536,<sp/>4550,<sp/>4608,<sp/>4620,<sp/>4680,<sp/>4704,<sp/>4752,<sp/>4800,<sp/>4802,<sp/>4860,<sp/>4900,<sp/>4914,<sp/></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4928,<sp/>4950,<sp/>4992,<sp/>5000,<sp/>5040,<sp/>5096,<sp/>5120,<sp/>5184,<sp/>5200,<sp/>5250,<sp/>5280,<sp/>5292,<sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5346,<sp/>5376,<sp/>5390,<sp/>5400,<sp/>5460,<sp/>5488,<sp/>5500,<sp/>5544,<sp/>5600,<sp/>5616,<sp/>5632,<sp/>5670,<sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5760,<sp/>5824,<sp/>5832,<sp/>5850,<sp/>5880,<sp/>5940,<sp/>6000,<sp/>6048,<sp/>6144,<sp/>6160,<sp/>6174,<sp/>6240,<sp/></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6250,<sp/>6272,<sp/>6300,<sp/>6318,<sp/>6336,<sp/>6370,<sp/>6400,<sp/>6468,<sp/>6480,<sp/>6500,<sp/>6552,<sp/>6600,<sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6656,<sp/>6720,<sp/>6750,<sp/>6804,<sp/>6860,<sp/>6912,<sp/>6930,<sp/>7000,<sp/>7020,<sp/>7040,<sp/>7056,<sp/>7128,<sp/></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7168,<sp/>7200,<sp/>7280,<sp/>7290,<sp/>7350,<sp/>7392,<sp/>7488,<sp/>7500,<sp/>7546,<sp/>7560,<sp/>7644,<sp/>7680,<sp/></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7700,<sp/>7776,<sp/>7800,<sp/>7840,<sp/>7920,<sp/>7938,<sp/>8000,<sp/>8064,<sp/>8100,<sp/>8190,<sp/>8192,<sp/>8232,<sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8250,<sp/>8316,<sp/>8320,<sp/>8400,<sp/>8424,<sp/>8448,<sp/>8624,<sp/>8640,<sp/>8736,<sp/>8748,<sp/>8750,<sp/>8800,<sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8820,<sp/>8910,<sp/>8918,<sp/>8960,<sp/>9000,<sp/>9072,<sp/>9100,<sp/>9216,<sp/>9240,<sp/>9360,<sp/>9408,<sp/>9450,<sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9504,<sp/>9600,<sp/>9604,<sp/>9702,<sp/>9720,<sp/>9750,<sp/>9800,<sp/>9828,<sp/>9856,<sp/>9900,<sp/>9984,<sp/>10000,<sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10080,<sp/>10192,<sp/>10206,<sp/>10240,<sp/>10290,<sp/>10368,<sp/>10400,<sp/>10500,<sp/>10530,<sp/>10560,<sp/></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10584,<sp/>10692,<sp/>10752,<sp/>10780,<sp/>10800,<sp/>10920,<sp/>10976,<sp/>11000,<sp/>11088,<sp/>11200,<sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11232,<sp/>11250,<sp/>11264,<sp/>11340,<sp/>11466,<sp/>11520,<sp/>11550,<sp/>11648,<sp/>11664,<sp/>11700,<sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11760,<sp/>11880,<sp/>12000,<sp/>12096,<sp/>12150,<sp/>12250,<sp/>12288,<sp/>12320,<sp/>12348,<sp/>12474,<sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12480,<sp/>12500,<sp/>12544,<sp/>12600,<sp/>12636,<sp/>12672,<sp/>12740,<sp/>12800,<sp/>12936,<sp/>12960,<sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13000,<sp/>13104,<sp/>13122,<sp/>13200,<sp/>13230,<sp/>13312,<sp/>13440,<sp/>13500,<sp/>13608,<sp/>13650,<sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>13720,<sp/>13750,<sp/>13824,<sp/>13860,<sp/>14000,<sp/>14040,<sp/>14080,<sp/>14112,<sp/>14256,<sp/>14336,<sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>14400,<sp/>14406,<sp/>14560,<sp/>14580,<sp/>14700,<sp/>14742,<sp/>14784,<sp/>14850,<sp/>14976,<sp/>15000,<sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15092,<sp/>15120,<sp/>15288,<sp/>15360,<sp/>15400,<sp/>15552,<sp/>15600,<sp/>15680,<sp/>15750,<sp/>15840,<sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15876,<sp/>16000,<sp/>16038,<sp/>16128,<sp/>16170,<sp/>16200,<sp/>16250,<sp/>16380,<sp/>16384,<sp/>16464,<sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>16500,<sp/>16632,<sp/>16640,<sp/>16800,<sp/>16848,<sp/>16896,<sp/>17010,<sp/>17150,<sp/>17248,<sp/>17280,<sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17472,<sp/>17496,<sp/>17500,<sp/>17550,<sp/>17600,<sp/>17640,<sp/>17820,<sp/>17836,<sp/>17920,<sp/>18000,<sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>18144,<sp/>18200,<sp/>18432,<sp/>18480,<sp/>18522,<sp/>18720,<sp/>18750,<sp/>18816,<sp/>18900,<sp/>18954,<sp/></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19008,<sp/>19110,<sp/>19200,<sp/>19208,<sp/>19250,<sp/>19404,<sp/>19440,<sp/>19500,<sp/>19600,<sp/>19656,<sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19712,<sp/>19800,<sp/>19968,<sp/>20000,<sp/>20160,<sp/>20250,<sp/>20384,<sp/>20412,<sp/>20480,<sp/>20580,<sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>20736,<sp/>20790,<sp/>20800,<sp/>21000,<sp/>21060,<sp/>21120,<sp/>21168,<sp/>21384,<sp/>21504,<sp/>21560,<sp/></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21600,<sp/>21840,<sp/>21870,<sp/>21952,<sp/>22000,<sp/>22050,<sp/>22176,<sp/>22400,<sp/>22464,<sp/>22500,<sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22528,<sp/>22638,<sp/>22680,<sp/>22750,<sp/>22932,<sp/>23040,<sp/>23100,<sp/>23296,<sp/>23328,<sp/>23400,<sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23520,<sp/>23760,<sp/>23814,<sp/>24000,<sp/>24010,<sp/>24192,<sp/>24300,<sp/>24500,<sp/>24570,<sp/>24576,<sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24640,<sp/>24696,<sp/>24750,<sp/>24948,<sp/>24960,<sp/>25000,<sp/>25088,<sp/>25200,<sp/>25272,<sp/>25344,<sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25480,<sp/>25600,<sp/>25872,<sp/>25920,<sp/>26000,<sp/>26208,<sp/>26244,<sp/>26250,<sp/>26400,<sp/>26460,<sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>26624,<sp/>26730,<sp/>26754,<sp/>26880,<sp/>26950,<sp/>27000,<sp/>27216,<sp/>27300,<sp/>27440,<sp/>27500,<sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>27648,<sp/>27720,<sp/>28000,<sp/>28080,<sp/>28160,<sp/>28224,<sp/>28350,<sp/>28512,<sp/>28672,<sp/>28800,<sp/></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>28812,<sp/>29106,<sp/>29120,<sp/>29160,<sp/>29250,<sp/>29400,<sp/>29484,<sp/>29568,<sp/>29700,<sp/>29952,<sp/></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>30000,<sp/>30184,<sp/>30240,<sp/>30576,<sp/>30618,<sp/>30720,<sp/>30800,<sp/>30870,<sp/>31104,<sp/>31200,<sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>31250,<sp/>31360,<sp/>31500,<sp/>31590,<sp/>31680,<sp/>31752,<sp/>31850,<sp/>32000,<sp/>32076,<sp/>32256,<sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32340,<sp/>32400,<sp/>32500,<sp/>32760,<sp/>32768,<sp/>32928,<sp/>33000,<sp/>33264,<sp/>33280,<sp/>33600,<sp/></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>33614,<sp/>33696,<sp/>33750,<sp/>33792,<sp/>34020,<sp/>34300,<sp/>34398,<sp/>34496,<sp/>34560,<sp/>34650,<sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>34944,<sp/>34992,<sp/>35000,<sp/>35100,<sp/>35200,<sp/>35280,<sp/>35640,<sp/>35672,<sp/>35840,<sp/>36000,<sp/></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>36288,<sp/>36400,<sp/>36450,<sp/>36750,<sp/>36864,<sp/>36960,<sp/>37044,<sp/>37422,<sp/>37440,<sp/>37500,<sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>37632,<sp/>37730,<sp/>37800,<sp/>37908,<sp/>38016,<sp/>38220,<sp/>38400,<sp/>38416,<sp/>38500,<sp/>38808,<sp/></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>38880,<sp/>39000,<sp/>39200,<sp/>39312,<sp/>39366,<sp/>39424,<sp/>39600,<sp/>39690,<sp/>39936,<sp/>40000,<sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>40320,<sp/>40500,<sp/>40768,<sp/>40824,<sp/>40950,<sp/>40960,<sp/>41160,<sp/>41250,<sp/>41472,<sp/>41580,<sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41600,<sp/>42000,<sp/>42120,<sp/>42240,<sp/>42336,<sp/>42768,<sp/>43008,<sp/>43120,<sp/>43200,<sp/>43218,<sp/></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>43680,<sp/>43740,<sp/>43750,<sp/>43904,<sp/>44000,<sp/>44100,<sp/>44226,<sp/>44352,<sp/>44550,<sp/>44590,<sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>44800,<sp/>44928,<sp/>45000,<sp/>45056,<sp/>45276,<sp/>45360,<sp/>45500,<sp/>45864,<sp/>46080,<sp/>46200,<sp/></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>46592,<sp/>46656,<sp/>46800,<sp/>47040,<sp/>47250,<sp/>47520,<sp/>47628,<sp/>48000,<sp/>48020,<sp/>48114,<sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>48384,<sp/>48510,<sp/>48600,<sp/>48750,<sp/>49000,<sp/>49140,<sp/>49152,<sp/>49280,<sp/>49392,<sp/>49500,<sp/></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49896,<sp/>49920,<sp/>50000,<sp/>50176,<sp/>50400,<sp/>50544,<sp/>50688,<sp/>50960,<sp/>51030,<sp/>51200,<sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>51450,<sp/>51744,<sp/>51840,<sp/>52000,<sp/>52416,<sp/>52488,<sp/>52500,<sp/>52650,<sp/>52800,<sp/>52822,<sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>52920,<sp/>53248,<sp/>53460,<sp/>53508,<sp/>53760,<sp/>53900,<sp/>54000,<sp/>54432,<sp/>54600,<sp/>54880,<sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>55000,<sp/>55296,<sp/>55440,<sp/>55566,<sp/>56000,<sp/>56160,<sp/>56250,<sp/>56320,<sp/>56448,<sp/>56700,<sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>56862,<sp/>57024,<sp/>57330,<sp/>57344,<sp/>57600,<sp/>57624,<sp/>57750,<sp/>58212,<sp/>58240,<sp/>58320,<sp/></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>58500,<sp/>58800,<sp/>58968,<sp/>59136,<sp/>59400,<sp/>59904,<sp/>60000,<sp/>60368,<sp/>60480,<sp/>60750,<sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>61152,<sp/>61236,<sp/>61250,<sp/>61440,<sp/>61600,<sp/>61740,<sp/>62208,<sp/>62370,<sp/>62400,<sp/>62426,<sp/></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>62500,<sp/>62720,<sp/>63000,<sp/>63180,<sp/>63360,<sp/>63504,<sp/>63700,<sp/>64000,<sp/>64152,<sp/>64512,<sp/></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64680,<sp/>64800,<sp/>65000,<sp/>65520,<sp/>65536,<sp/>65610,<sp/>65856,<sp/>66000,<sp/>66150,<sp/>66528,<sp/></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>66560,<sp/>67200,<sp/>67228,<sp/>67392,<sp/>67500,<sp/>67584,<sp/>67914,<sp/>68040,<sp/>68250,<sp/>68600,<sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>68750,<sp/>68796,<sp/>68992,<sp/>69120,<sp/>69300,<sp/>69888,<sp/>69984,<sp/>70000,<sp/>70200,<sp/>70400,<sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>70560,<sp/>71280,<sp/>71344,<sp/>71442,<sp/>71680,<sp/>72000,<sp/>72030,<sp/>72576,<sp/>72800,<sp/>72900,<sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>73500,<sp/>73710,<sp/>73728,<sp/>73920,<sp/>74088,<sp/>74250,<sp/>74844,<sp/>74880,<sp/>75000,<sp/>75264,<sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>75460,<sp/>75600,<sp/>75816,<sp/>76032,<sp/>76440,<sp/>76800,<sp/>76832,<sp/>77000,<sp/>77616,<sp/>77760,<sp/></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>78000,<sp/>78400,<sp/>78624,<sp/>78732,<sp/>78750,<sp/>78848,<sp/>79200,<sp/>79380,<sp/>79872,<sp/>80000,<sp/></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>80190,<sp/>80262,<sp/>80640,<sp/>80850,<sp/>81000,<sp/>81250,<sp/>81536,<sp/>81648,<sp/>81900,<sp/>81920,<sp/></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>82320,<sp/>82500,<sp/>82944,<sp/>83160,<sp/>83200,<sp/>84000,<sp/>84240,<sp/>84480,<sp/>84672,<sp/>85050,<sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>85536,<sp/>85750,<sp/>86016,<sp/>86240,<sp/>86400,<sp/>86436,<sp/>87318,<sp/>87360,<sp/>87480,<sp/>87500,<sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>87750,<sp/>87808,<sp/>88000,<sp/>88200,<sp/>88452,<sp/>88704,<sp/>89100,<sp/>89180,<sp/>89600,<sp/>89856,<sp/></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>90000,<sp/>90112,<sp/>90552,<sp/>90720,<sp/>91000,<sp/>91728,<sp/>91854,<sp/>92160,<sp/>92400,<sp/>92610,<sp/></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>93184,<sp/>93312,<sp/>93600,<sp/>93750,<sp/>94080,<sp/>94500,<sp/>94770,<sp/>95040,<sp/>95256,<sp/>95550,<sp/></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>96000,<sp/>96040,<sp/>96228,<sp/>96250,<sp/>96768,<sp/>97020,<sp/>97200,<sp/>97500,<sp/>98000,<sp/>98280,<sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>98304,<sp/>98560,<sp/>98784,<sp/>99000,<sp/>99792,<sp/>99840<sp/>};<sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s<sp/>&lt;=<sp/>0<sp/>||<sp/>s<sp/>&gt;<sp/>goodSizes[size-1])</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::upper_bound(goodSizes,<sp/>goodSizes+size,<sp/>s,<sp/>std::less_equal&lt;int&gt;());</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FFTEmbedKernel</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape&gt;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>exec(MultiArrayView&lt;N,<sp/>Real,<sp/>C&gt;<sp/>&amp;<sp/>out,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>kernelShape,<sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape<sp/>&amp;<sp/>srcPoint,<sp/>Shape<sp/>&amp;<sp/>destPoint,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copyIt)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(srcPoint[M]=0;<sp/>srcPoint[M]&lt;kernelShape[M];<sp/>++srcPoint[M])</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(srcPoint[M]<sp/>&lt;<sp/>(kernelShape[M]<sp/>+<sp/>1)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destPoint[M]<sp/>=<sp/>srcPoint[M];</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destPoint[M]<sp/>=<sp/>srcPoint[M]<sp/>+<sp/>out.shape(M)<sp/>-<sp/>kernelShape[M];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyIt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTEmbedKernel&lt;M-1&gt;::exec(out,<sp/>kernelShape,<sp/>srcPoint,<sp/>destPoint,<sp/>copyIt);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal">};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FFTEmbedKernel&lt;0&gt;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape&gt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>exec(MultiArrayView&lt;N,<sp/>Real,<sp/>C&gt;<sp/>&amp;<sp/>out,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>kernelShape,<sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape<sp/>&amp;<sp/>srcPoint,<sp/>Shape<sp/>&amp;<sp/>destPoint,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copyIt)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(srcPoint[0]=0;<sp/>srcPoint[0]&lt;kernelShape[0];<sp/>++srcPoint[0])</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(srcPoint[0]<sp/>&lt;<sp/>(kernelShape[0]<sp/>+<sp/>1)<sp/>/<sp/>2)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destPoint[0]<sp/>=<sp/>srcPoint[0];</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destPoint[0]<sp/>=<sp/>srcPoint[0]<sp/>+<sp/>out.shape(0)<sp/>-<sp/>kernelShape[0];</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyIt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(copyIt)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[destPoint]<sp/>=<sp/>out[srcPoint];</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[srcPoint]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal">};</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="666"><highlight class="normal">fftEmbedKernel(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;<sp/>out,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/><ref refid="group__FFTWComplexOperators_1ga396baa79e8bd78a178597d32d5152041" kindref="member" tooltip="norm (= magnitude)">norm</ref><sp/>=<sp/>1.0)</highlight></codeline>
<codeline lineno="669"><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;N&gt;::type<sp/>Shape;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;<sp/>kout<sp/>=<sp/>out.subarray(Shape(),<sp/>kernel.shape());</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>out.init(0.0);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>kout<sp/>=<sp/>kernel;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__FFTWComplexOperators_1ga396baa79e8bd78a178597d32d5152041" kindref="member" tooltip="norm (= magnitude)">norm</ref><sp/>!=<sp/>1.0)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kout<sp/>*=<sp/><ref refid="group__FFTWComplexOperators_1ga396baa79e8bd78a178597d32d5152041" kindref="member" tooltip="norm (= magnitude)">norm</ref>;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__FourierTransform_1gaee27c376079af99e8e2148e7d23ffbbb" kindref="member" tooltip="Rearrange the quadrants of a Fourier image so that the origin is in the image&amp;#39;s upper left...">moveDCToUpperLeft</ref>(kout);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>srcPoint,<sp/>destPoint;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTEmbedKernel&lt;(int)N-1&gt;::exec(out,<sp/>kernel.shape(),<sp/>srcPoint,<sp/>destPoint,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="686"><highlight class="normal">fftEmbedArray(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;<sp/>out)</highlight></codeline>
<codeline lineno="688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;N&gt;::type<sp/>Shape;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>diff<sp/>=<sp/>out.shape()<sp/>-<sp/>in.shape(),<sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leftDiff<sp/>=<sp/><ref refid="group__FixedPoint16Operations_1gac71b069a80f6decdb6fad1cfd508f5f8" kindref="member" tooltip="division with enforced result type.">div</ref>(diff,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(2)),</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rightDiff<sp/>=<sp/>diff<sp/>-<sp/>leftDiff,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>in.shape()<sp/>+<sp/>leftDiff;<sp/></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>out.subarray(leftDiff,<sp/>right)<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;::traverser<sp/>Traverser;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MultiArrayNavigator&lt;Traverser,<sp/>N&gt;<sp/>Navigator;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Navigator::iterator<sp/>Iterator;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>N;<sp/>++d)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Navigator<sp/>nav(out.traverser_begin(),<sp/>out.shape(),<sp/>d);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>nav.hasMore();<sp/>nav++<sp/>)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator<sp/>i<sp/>=<sp/>nav.begin();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=1;<sp/>k&lt;=leftDiff[d];<sp/>++k)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i[leftDiff[d]<sp/>-<sp/>k]<sp/>=<sp/>i[leftDiff[d]<sp/>+<sp/>k];</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;rightDiff[d];<sp/>++k)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i[right[d]<sp/>+<sp/>k]<sp/>=<sp/>i[right[d]<sp/>-<sp/>k<sp/>-<sp/>2];</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">TinyVector&lt;T,<sp/>N&gt;</highlight></codeline>
<codeline lineno="721"><highlight class="normal">fftwBestPaddedShape(TinyVector&lt;T,<sp/>N&gt;<sp/>shape)</highlight></codeline>
<codeline lineno="722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;N;<sp/>++k)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape[k]<sp/>=<sp/>detail::fftwPaddingSize(shape[k]);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape;</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="729"><highlight class="normal">TinyVector&lt;T,<sp/>N&gt;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">fftwBestPaddedShapeR2C(TinyVector&lt;T,<sp/>N&gt;<sp/>shape)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>shape[0]<sp/>=<sp/>detail::fftwEvenPaddingSize(shape[0]);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=1;<sp/>k&lt;N;<sp/>++k)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape[k]<sp/>=<sp/>detail::fftwPaddingSize(shape[k]);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="738"><highlight class="comment">/**<sp/>\brief<sp/>Find<sp/>frequency<sp/>domain<sp/>shape<sp/>for<sp/>a<sp/>R2C<sp/>Fourier<sp/>transform.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"></highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/>When<sp/>a<sp/>real<sp/>valued<sp/>array<sp/>is<sp/>transformed<sp/>to<sp/>the<sp/>frequency<sp/>domain,<sp/>about<sp/>half<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/>Fourier<sp/>coefficients<sp/>are<sp/>redundant.<sp/>The<sp/>transform<sp/>can<sp/>be<sp/>optimized<sp/>as<sp/>a<sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Multi_002dDimensional-DFTs-of-Real-Data.html&quot;&gt;R2C<sp/></highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/>transform&lt;/a&gt;<sp/>that<sp/>doesn&apos;t<sp/>compute<sp/>and<sp/>store<sp/>the<sp/>redundant<sp/>coefficients.<sp/>This<sp/>function</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/>computes<sp/>the<sp/>appropriate<sp/>frequency<sp/>domain<sp/>shape<sp/>for<sp/>a<sp/>given<sp/>shape<sp/>in<sp/>the<sp/>spatial<sp/>domain.</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/>It<sp/>simply<sp/>replaces<sp/>&lt;tt&gt;shape[0]&lt;/tt&gt;<sp/>with<sp/>&lt;tt&gt;shape[0]<sp/>/<sp/>2<sp/>+<sp/>1&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/multi_fft.hxx\&gt;</highlight></codeline>
<codeline lineno="747"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="749"><highlight class="normal">TinyVector&lt;T,<sp/>N&gt;</highlight></codeline>
<codeline lineno="750" refid="group__FourierTransform_1gafbea828444f49163293b1d81fcd05da8" refkind="member"><highlight class="normal"><ref refid="group__FourierTransform_1gafbea828444f49163293b1d81fcd05da8" kindref="member" tooltip="Find frequency domain shape for a R2C Fourier transform.">fftwCorrespondingShapeR2C</ref>(<ref refid="classvigra_1_1TinyVector" kindref="compound" tooltip="Class for fixed size vectors.This class contains an array of size SIZE of the specified VALUETYPE...">TinyVector&lt;T, N&gt;</ref><sp/>shape)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>shape[0]<sp/>=<sp/>shape[0]<sp/>/<sp/>2<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="757"><highlight class="normal">TinyVector&lt;T,<sp/>N&gt;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">fftwCorrespondingShapeC2R(TinyVector&lt;T,<sp/>N&gt;<sp/>shape,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>oddDimension0<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>shape[0]<sp/>=<sp/>oddDimension0</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(shape[0]<sp/>-<sp/>1)<sp/>*<sp/>2<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(shape[0]<sp/>-<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape;</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWPlan<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="772"><highlight class="comment">/**<sp/>C++<sp/>wrapper<sp/>for<sp/>FFTW<sp/>plans.</highlight></codeline>
<codeline lineno="773"><highlight class="comment"></highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>class<sp/>encapsulates<sp/>the<sp/>calls<sp/>to<sp/>&lt;tt&gt;fftw_plan_dft_2d&lt;/tt&gt;,<sp/>&lt;tt&gt;fftw_execute&lt;/tt&gt;,<sp/>and</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;fftw_destroy_plan&lt;/tt&gt;<sp/>(and<sp/>their<sp/>&lt;tt&gt;float&lt;/tt&gt;<sp/>and<sp/>&lt;tt&gt;long<sp/>double&lt;/tt&gt;<sp/>counterparts)</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>an<sp/>easy-to-use<sp/>interface.</highlight></codeline>
<codeline lineno="777"><highlight class="comment"></highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/><sp/><sp/>Usually,<sp/>you<sp/>use<sp/>this<sp/>class<sp/>only<sp/>indirectly<sp/>via<sp/>\ref<sp/>fourierTransform()<sp/></highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>\ref<sp/>fourierTransformInverse().<sp/>You<sp/>only<sp/>need<sp/>this<sp/>class<sp/>if<sp/>you<sp/>want<sp/>to<sp/>have<sp/>more<sp/>control</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/><sp/><sp/>about<sp/>FFTW&apos;s<sp/>planning<sp/>process<sp/>(by<sp/>providing<sp/>non-default<sp/>planning<sp/>flags)<sp/>and/or<sp/>want<sp/>to<sp/>re-use</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/><sp/>plans<sp/>for<sp/>several<sp/>transformations.</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;<sp/>Usage:&lt;/b&gt;</highlight></codeline>
<codeline lineno="784"><highlight class="comment"></highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/multi_fft.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="787"><highlight class="comment"></highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>compute<sp/>complex<sp/>Fourier<sp/>transform<sp/>of<sp/>a<sp/>real<sp/>image</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>src(Shape2(w,<sp/>h));</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>FFTWComplex&lt;double&gt;<sp/>&gt;<sp/>fourier(Shape2(w,<sp/>h));</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>create<sp/>an<sp/>optimized<sp/>plan<sp/>by<sp/>measuring<sp/>the<sp/>speed<sp/>of<sp/>several<sp/>algorithm<sp/>variants</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/><sp/>FFTWPlan&lt;2,<sp/>double&gt;<sp/>plan(src,<sp/>fourier,<sp/>FFTW_MEASURE);</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/>plan.execute(src,<sp/>fourier);<sp/></highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="798"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real<sp/>=<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="800" refid="classvigra_1_1FFTWPlan" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan</ref></highlight></codeline>
<codeline lineno="801"><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;int&gt;</ref><sp/>Shape;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FFTWReal2Complex&lt;Real&gt;::plan_type<sp/>PlanType;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWComplex_1a03263059650009980dd1a55eba9ac3e7" kindref="member">FFTWComplex&lt;Real&gt;::complex_type</ref><sp/>Complex;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>PlanType<sp/>plan;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>shape,<sp/>instrides,<sp/>outstrides;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>an<sp/>empty<sp/>plan.</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>plan<sp/>can<sp/>be<sp/>initialized<sp/>later<sp/>by<sp/>one<sp/>of<sp/>the<sp/>init()<sp/>functions.</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815" refid="classvigra_1_1FFTWPlan_1ae4d9a442304fdf6acf732f345fb09e22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1ae4d9a442304fdf6acf732f345fb09e22" kindref="member" tooltip="Create an empty plan.">FFTWPlan</ref>()</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>plan(0)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>a<sp/>plan<sp/>for<sp/>a<sp/>complex-to-complex<sp/>transform.</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>SIGN<sp/>must<sp/>be<sp/>&lt;tt&gt;FFTW_FORWARD&lt;/tt&gt;<sp/>or<sp/>&lt;tt&gt;FFTW_BACKWARD&lt;/tt&gt;<sp/>according<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desired<sp/>transformation<sp/>direction.</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>planner_flags<sp/>must<sp/>be<sp/>a<sp/>combination<sp/>of<sp/>the<sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Planner-Flags.html&quot;&gt;planner<sp/></highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags&lt;/a&gt;<sp/>defined<sp/>by<sp/>the<sp/>FFTW<sp/>library.<sp/>The<sp/>default<sp/>&lt;tt&gt;FFTW_ESTIMATE&lt;/tt&gt;<sp/>will<sp/>guess</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal<sp/>algorithm<sp/>settings<sp/>or<sp/>read<sp/>them<sp/>from<sp/>pre-loaded<sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Wisdom.html&quot;&gt;&quot;wisdom&quot;&lt;/a&gt;.</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="828" refid="classvigra_1_1FFTWPlan_1a169cc3462162ceae01c4497026dfce59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1ae4d9a442304fdf6acf732f345fb09e22" kindref="member" tooltip="Create an empty plan.">FFTWPlan</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>out,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SIGN,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>plan(0)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1aa9e4cc0ad553e551d915ef90fc5ed3f6" kindref="member" tooltip="Init a complex-to-complex transform.">init</ref>(in,<sp/>out,<sp/>SIGN,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>a<sp/>plan<sp/>for<sp/>a<sp/>real-to-complex<sp/>transform.</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>always<sp/>refers<sp/>to<sp/>a<sp/>forward<sp/>transform.<sp/>The<sp/>shape<sp/>of<sp/>the<sp/>output<sp/>determines</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>a<sp/>standard<sp/>transform<sp/>(when<sp/>&lt;tt&gt;out.shape()<sp/>==<sp/>in.shape()&lt;/tt&gt;)<sp/>or<sp/>an<sp/></highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Multi_002dDimensional-DFTs-of-Real-Data.html&quot;&gt;R2C<sp/></highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform&lt;/a&gt;<sp/>(when<sp/>&lt;tt&gt;out.shape()<sp/>==<sp/>fftwCorrespondingShapeR2C(in.shape())&lt;/tt&gt;)<sp/>will<sp/>be<sp/>executed.<sp/></highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>planner_flags<sp/>must<sp/>be<sp/>a<sp/>combination<sp/>of<sp/>the<sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Planner-Flags.html&quot;&gt;planner<sp/></highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags&lt;/a&gt;<sp/>defined<sp/>by<sp/>the<sp/>FFTW<sp/>library.<sp/>The<sp/>default<sp/>&lt;tt&gt;FFTW_ESTIMATE&lt;/tt&gt;<sp/>will<sp/>guess</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal<sp/>algorithm<sp/>settings<sp/>or<sp/>read<sp/>them<sp/>from<sp/>pre-loaded<sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Wisdom.html&quot;&gt;&quot;wisdom&quot;&lt;/a&gt;.</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="848" refid="classvigra_1_1FFTWPlan_1adcde64f1a0148f4625468ad470c785ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1ae4d9a442304fdf6acf732f345fb09e22" kindref="member" tooltip="Create an empty plan.">FFTWPlan</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>out,</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>plan(0)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1aa9e4cc0ad553e551d915ef90fc5ed3f6" kindref="member" tooltip="Init a complex-to-complex transform.">init</ref>(in,<sp/>out,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>a<sp/>plan<sp/>for<sp/>a<sp/>complex-to-real<sp/>transform.</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>always<sp/>refers<sp/>to<sp/>a<sp/>inverse<sp/>transform.<sp/>The<sp/>shape<sp/>of<sp/>the<sp/>input<sp/>determines</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>a<sp/>standard<sp/>transform<sp/>(when<sp/>&lt;tt&gt;in.shape()<sp/>==<sp/>out.shape()&lt;/tt&gt;)<sp/>or<sp/>a<sp/></highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Multi_002dDimensional-DFTs-of-Real-Data.html&quot;&gt;C2R<sp/></highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform&lt;/a&gt;<sp/>(when<sp/>&lt;tt&gt;in.shape()<sp/>==<sp/>fftwCorrespondingShapeR2C(out.shape())&lt;/tt&gt;)<sp/>will<sp/>be<sp/>executed.<sp/></highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>planner_flags<sp/>must<sp/>be<sp/>a<sp/>combination<sp/>of<sp/>the<sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Planner-Flags.html&quot;&gt;planner<sp/></highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags&lt;/a&gt;<sp/>defined<sp/>by<sp/>the<sp/>FFTW<sp/>library.<sp/>The<sp/>default<sp/>&lt;tt&gt;FFTW_ESTIMATE&lt;/tt&gt;<sp/>will<sp/>guess</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal<sp/>algorithm<sp/>settings<sp/>or<sp/>read<sp/>them<sp/>from<sp/>pre-loaded<sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Wisdom.html&quot;&gt;&quot;wisdom&quot;&lt;/a&gt;.</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="868" refid="classvigra_1_1FFTWPlan_1a5743bcaa3c6285361d43368f4eba8d68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1ae4d9a442304fdf6acf732f345fb09e22" kindref="member" tooltip="Create an empty plan.">FFTWPlan</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C2&gt;</ref><sp/>out,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>plan(0)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1aa9e4cc0ad553e551d915ef90fc5ed3f6" kindref="member" tooltip="Init a complex-to-complex transform.">init</ref>(in,<sp/>out,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Copy<sp/>constructor.</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="classvigra_1_1FFTWPlan_1a0a99a0851c9bc7fbd16a17a843835143" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1ae4d9a442304fdf6acf732f345fb09e22" kindref="member" tooltip="Create an empty plan.">FFTWPlan</ref>(<ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>plan(other.plan),</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sign(other.sign)</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan</ref><sp/>&amp;<sp/>o<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.swap(o.shape);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instrides.swap(o.instrides);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outstrides.swap(o.outstrides);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o.plan<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>act<sp/>like<sp/>std::auto_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Copy<sp/>assigment.</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="classvigra_1_1FFTWPlan_1a49a933f109d7a4c027cd9f2d350e3630" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1FFTWPlan_1a49a933f109d7a4c027cd9f2d350e3630" kindref="member" tooltip="Copy assigment.">operator=</ref>(<ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan</ref><sp/>&amp;<sp/>o<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan<sp/>=<sp/>o.plan;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape.swap(o.shape);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instrides.swap(o.instrides);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outstrides.swap(o.outstrides);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>o.sign;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o.plan<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>act<sp/>like<sp/>std::auto_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Destructor.</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908" refid="classvigra_1_1FFTWPlan_1a2027c60e66cf80c4e6051d2a20492865" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan_1a2027c60e66cf80c4e6051d2a20492865" kindref="member" tooltip="Destructor.">~FFTWPlan</ref>()</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::fftwPlanDestroy(plan);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Init<sp/>a<sp/>complex-to-complex<sp/>transform.</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>constructor<sp/>with<sp/>the<sp/>same<sp/>signature<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="918" refid="classvigra_1_1FFTWPlan_1aa9e4cc0ad553e551d915ef90fc5ed3f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWPlan_1aa9e4cc0ad553e551d915ef90fc5ed3f6" kindref="member" tooltip="Init a complex-to-complex transform.">init</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>out,</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SIGN,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in.strideOrdering()<sp/>==<sp/>out.strideOrdering(),</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan.init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>stride<sp/>ordering.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(in.permuteStridesDescending(),<sp/>out.permuteStridesDescending(),<sp/></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIGN,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Init<sp/>a<sp/>real-to-complex<sp/>transform.</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>constructor<sp/>with<sp/>the<sp/>same<sp/>signature<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="934" refid="classvigra_1_1FFTWPlan_1a92782368c20db1cd1a72b389d9e39a76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWPlan_1aa9e4cc0ad553e551d915ef90fc5ed3f6" kindref="member" tooltip="Init a complex-to-complex transform.">init</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>out,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in.<ref refid="classvigra_1_1MultiArrayView_1a614a382ab304114f19a2c1168502647d" kindref="member">strideOrdering</ref>()<sp/>==<sp/>out.strideOrdering(),</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan.init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>stride<sp/>ordering.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(in.<ref refid="classvigra_1_1MultiArrayView_1a421ac71c17f86f900041784e3c77857a" kindref="member">permuteStridesDescending</ref>(),<sp/>out.permuteStridesDescending(),<sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTW_FORWARD,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Init<sp/>a<sp/>complex-to-real<sp/>transform.</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>constructor<sp/>with<sp/>the<sp/>same<sp/>signature<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="950" refid="classvigra_1_1FFTWPlan_1a2f9ed902747a03caf77a131b7691f523" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWPlan_1aa9e4cc0ad553e551d915ef90fc5ed3f6" kindref="member" tooltip="Init a complex-to-complex transform.">init</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C2&gt;</ref><sp/>out,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in.strideOrdering()<sp/>==<sp/>out.<ref refid="classvigra_1_1MultiArrayView_1a614a382ab304114f19a2c1168502647d" kindref="member">strideOrdering</ref>(),</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan.init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>stride<sp/>ordering.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(in.permuteStridesDescending(),<sp/>out.<ref refid="classvigra_1_1MultiArrayView_1a421ac71c17f86f900041784e3c77857a" kindref="member">permuteStridesDescending</ref>(),<sp/></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTW_BACKWARD,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Execute<sp/>a<sp/>complex-to-complex<sp/>transform.</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>shapes<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>corresponding<sp/>init<sp/>function</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>constructor.<sp/>However,<sp/>execute()<sp/>can<sp/>be<sp/>called<sp/>several<sp/>times<sp/>on</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>plan,<sp/>even<sp/>with<sp/>different<sp/>arrays,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>have<sp/>the<sp/>appropriate<sp/></highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="969" refid="classvigra_1_1FFTWPlan_1ac2451d98863694afea345ea9a5e7c5d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWPlan_1ac2451d98863694afea345ea9a5e7c5d4" kindref="member" tooltip="Execute a complex-to-complex transform.">execute</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>out)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="971"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executeImpl(in.permuteStridesDescending(),<sp/>out.permuteStridesDescending());</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Execute<sp/>a<sp/>real-to-complex<sp/>transform.</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>shapes<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>corresponding<sp/>init<sp/>function</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>constructor.<sp/>However,<sp/>execute()<sp/>can<sp/>be<sp/>called<sp/>several<sp/>times<sp/>on</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>plan,<sp/>even<sp/>with<sp/>different<sp/>arrays,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>have<sp/>the<sp/>appropriate<sp/></highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="983" refid="classvigra_1_1FFTWPlan_1ab40d51a194c564ec0a620cf89a2f5ae7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWPlan_1ac2451d98863694afea345ea9a5e7c5d4" kindref="member" tooltip="Execute a complex-to-complex transform.">execute</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>out)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="985"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executeImpl(in.<ref refid="classvigra_1_1MultiArrayView_1a421ac71c17f86f900041784e3c77857a" kindref="member">permuteStridesDescending</ref>(),<sp/>out.permuteStridesDescending());</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Execute<sp/>a<sp/>complex-to-real<sp/>transform.</highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>shapes<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>corresponding<sp/>init<sp/>function</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>constructor.<sp/>However,<sp/>execute()<sp/>can<sp/>be<sp/>called<sp/>several<sp/>times<sp/>on</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>plan,<sp/>even<sp/>with<sp/>different<sp/>arrays,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>have<sp/>the<sp/>appropriate<sp/></highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="997" refid="classvigra_1_1FFTWPlan_1ab5bb3a651936156a78010cd157bd9fd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWPlan_1ac2451d98863694afea345ea9a5e7c5d4" kindref="member" tooltip="Execute a complex-to-complex transform.">execute</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C2&gt;</ref><sp/>out)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="999"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executeImpl(in.permuteStridesDescending(),<sp/>out.<ref refid="classvigra_1_1MultiArrayView_1a421ac71c17f86f900041784e3c77857a" kindref="member">permuteStridesDescending</ref>());</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MI,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MO&gt;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initImpl(MI<sp/>ins,<sp/>MO<sp/>outs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SIGN,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MI,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MO&gt;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>executeImpl(MI<sp/>ins,<sp/>MO<sp/>outs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkShapes(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/><ref refid="structvigra_1_1StridedArrayTag" kindref="compound">StridedArrayTag</ref>&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/><ref refid="structvigra_1_1StridedArrayTag" kindref="compound">StridedArrayTag</ref>&gt;<sp/>out)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1013"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in.shape()<sp/>==<sp/>out.shape(),</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan.init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkShapes(MultiArrayView&lt;N,<sp/>Real,<sp/>StridedArrayTag&gt;<sp/>ins,<sp/></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>StridedArrayTag&gt;<sp/>outs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1020"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;(int)N-1;<sp/>++k)</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(ins.shape(k)<sp/>==<sp/>outs.shape(k),</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan.init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>matching<sp/>shapes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(ins.shape(N-1)<sp/>/<sp/>2<sp/>+<sp/>1<sp/>==<sp/>outs.shape(N-1),</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan.init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>matching<sp/>shapes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkShapes(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>StridedArrayTag&gt;<sp/>ins,<sp/></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>StridedArrayTag&gt;<sp/>outs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1030"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;(int)N-1;<sp/>++k)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(ins.shape(k)<sp/>==<sp/>outs.shape(k),</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan.init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>matching<sp/>shapes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(outs.shape(N-1)<sp/>/<sp/>2<sp/>+<sp/>1<sp/>==<sp/>ins.shape(N-1),</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan.init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>matching<sp/>shapes.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MI,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MO&gt;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal">FFTWPlan&lt;N,<sp/>Real&gt;::initImpl(MI<sp/>ins,<sp/>MO<sp/>outs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SIGN,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>checkShapes(ins,<sp/>outs);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;N&gt;::type<sp/>logicalShape(SIGN<sp/>==<sp/>FFTW_FORWARD</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>ins.shape()</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>outs.shape());</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>newShape(logicalShape.begin(),<sp/>logicalShape.end()),</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newIStrides(ins.stride().begin(),<sp/>ins.stride().end()),</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newOStrides(outs.stride().begin(),<sp/>outs.stride().end()),</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itotal(ins.shape().begin(),<sp/>ins.shape().end()),<sp/></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ototal(outs.shape().begin(),<sp/>outs.shape().end());</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;N;<sp/>++j)</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itotal[j]<sp/>=<sp/>ins.stride(j-1)<sp/>/<sp/>ins.stride(j);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ototal[j]<sp/>=<sp/>outs.stride(j-1)<sp/>/<sp/>outs.stride(j);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>PlanType<sp/>newPlan<sp/>=<sp/>detail::fftwPlanCreate(N,<sp/>newShape.begin(),<sp/></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ins.data(),<sp/>itotal.begin(),<sp/>ins.stride(N-1),</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs.data(),<sp/>ototal.begin(),<sp/>outs.stride(N-1),</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIGN,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftwPlanDestroy(plan);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>plan<sp/>=<sp/>newPlan;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>shape.swap(newShape);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>instrides.swap(newIStrides);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>outstrides.swap(newOStrides);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>SIGN;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MI,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MO&gt;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FFTWPlan&lt;N,<sp/>Real&gt;::executeImpl(MI<sp/>ins,<sp/>MO<sp/>outs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1077"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(plan<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan::execute():<sp/>plan<sp/>is<sp/>NULL.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;N&gt;::type<sp/>lshape(sign<sp/>==<sp/>FFTW_FORWARD</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>ins.shape()</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>outs.shape());</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition((lshape<sp/>==<sp/>TinyVectorView&lt;int,<sp/>N&gt;(shape.data())),</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan::execute():<sp/>shape<sp/>mismatch<sp/>between<sp/>plan<sp/>and<sp/>data.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition((ins.stride()<sp/>==<sp/>TinyVectorView&lt;int,<sp/>N&gt;(instrides.data())),</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan::execute():<sp/>strides<sp/>mismatch<sp/>between<sp/>plan<sp/>and<sp/>input<sp/>data.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition((outs.stride()<sp/>==<sp/>TinyVectorView&lt;int,<sp/>N&gt;(outstrides.data())),</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWPlan::execute():<sp/>strides<sp/>mismatch<sp/>between<sp/>plan<sp/>and<sp/>output<sp/>data.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftwPlanExecute(plan,<sp/>ins.data(),<sp/>outs.data());</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MO::value_type<sp/>V;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sign<sp/>==<sp/>FFTW_BACKWARD)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outs<sp/>*=<sp/>V(1.0)<sp/>/<sp/>Real(outs.size());</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWConvolvePlan<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1104"><highlight class="comment">/**<sp/>C++<sp/>wrapper<sp/>for<sp/>a<sp/>pair<sp/>of<sp/>FFTW<sp/>plans<sp/>used<sp/>to<sp/>perform<sp/>FFT-based<sp/>convolution.</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"></highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>class<sp/>encapsulates<sp/>the<sp/>calls<sp/>to<sp/>&lt;tt&gt;fftw_plan_dft_2d&lt;/tt&gt;,<sp/>&lt;tt&gt;fftw_execute&lt;/tt&gt;,<sp/>and</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;fftw_destroy_plan&lt;/tt&gt;<sp/>(and<sp/>their<sp/>&lt;tt&gt;float&lt;/tt&gt;<sp/>and<sp/>&lt;tt&gt;long<sp/>double&lt;/tt&gt;<sp/>counterparts)</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>an<sp/>easy-to-use<sp/>interface.<sp/>It<sp/>always<sp/>creates<sp/>a<sp/>pair<sp/>of<sp/>plans,<sp/>one<sp/>for<sp/>the<sp/>forward<sp/>and<sp/>one</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>the<sp/>inverse<sp/>transform<sp/>required<sp/>for<sp/>convolution.</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"></highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/><sp/>Usually,<sp/>you<sp/>use<sp/>this<sp/>class<sp/>only<sp/>indirectly<sp/>via<sp/>\ref<sp/>convolveFFT()<sp/>and<sp/>its<sp/>variants.<sp/></highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>only<sp/>need<sp/>this<sp/>class<sp/>if<sp/>you<sp/>want<sp/>to<sp/>have<sp/>more<sp/>control<sp/>about<sp/>FFTW&apos;s<sp/>planning<sp/>process<sp/></highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/><sp/>(by<sp/>providing<sp/>non-default<sp/>planning<sp/>flags)<sp/>and/or<sp/>want<sp/>to<sp/>re-use<sp/>plans<sp/>for<sp/>several<sp/>convolutions.</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;<sp/>Usage:&lt;/b&gt;</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"></highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/multi_fft.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"></highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>real<sp/>kernel</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>src(Shape2(w,<sp/>h)),<sp/>dest(Shape2(w,<sp/>h));</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>spatial_kernel(Shape2(9,<sp/>9));</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/><sp/><sp/>Gaussian&lt;double&gt;<sp/>gauss(1.0);</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>y=0;<sp/>y&lt;9;<sp/>++y)</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>x=0;<sp/>x&lt;9;<sp/>++x)</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spatial_kernel(x,<sp/>y)<sp/>=<sp/>gauss(x-4.0)*gauss(y-4.0);</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>create<sp/>an<sp/>optimized<sp/>plan<sp/>by<sp/>measuring<sp/>the<sp/>speed<sp/>of<sp/>several<sp/>algorithm<sp/>variants</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/><sp/><sp/>FFTWConvolvePlan&lt;2,<sp/>double&gt;<sp/>plan(src,<sp/>spatial_kernel,<sp/>dest,<sp/>FFTW_MEASURE);</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/>plan.execute(src,<sp/>spatial_kernel,<sp/>dest);<sp/></highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="1136"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1138" refid="classvigra_1_1FFTWConvolvePlan" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvigra_1_1FFTWConvolvePlan" kindref="compound">FFTWConvolvePlan</ref></highlight></codeline>
<codeline lineno="1139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref><sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">Complex</ref>;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;N, Real, UnstridedArrayTag &gt;</ref><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">RArray</ref>;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">MultiArray&lt;N, Complex, FFTWAllocator&lt;Complex&gt;</ref><sp/>&gt;<sp/><ref refid="classvigra_1_1MultiArray" kindref="compound">CArray</ref>;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan&lt;N, Real&gt;</ref><sp/>forward_plan,<sp/>backward_plan;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">RArray</ref><sp/>realArray,<sp/>realKernel;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound">CArray</ref><sp/>fourierArray,<sp/>fourierKernel;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useFourierKernel;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1TinyVector" kindref="compound" tooltip="Class for fixed size vectors.This class contains an array of size SIZE of the specified VALUETYPE...">MultiArrayShape&lt;N&gt;::type</ref><sp/>Shape;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>an<sp/>empty<sp/>plan.</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>plan<sp/>can<sp/>be<sp/>initialized<sp/>later<sp/>by<sp/>one<sp/>of<sp/>the<sp/>init()<sp/>functions.</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157" refid="classvigra_1_1FFTWConvolvePlan_1ad2aede80344b005ce5b40fefaa8610eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad2aede80344b005ce5b40fefaa8610eb" kindref="member" tooltip="Create an empty plan.">FFTWConvolvePlan</ref>()</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>useFourierKernel(false)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>real<sp/>kernel.</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>kernel<sp/>must<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>spatial<sp/>domain.</highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>\ref<sp/>convolveFFT()<sp/>for<sp/>detailed<sp/>information<sp/>on<sp/>required<sp/>shapes<sp/>and<sp/>internal<sp/>padding.</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>planner_flags<sp/>must<sp/>be<sp/>a<sp/>combination<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Planner-Flags.html&quot;&gt;planner<sp/></highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags&lt;/a&gt;<sp/>defined<sp/>by<sp/>the<sp/>FFTW<sp/>library.<sp/>The<sp/>default<sp/>&lt;tt&gt;FFTW_ESTIMATE&lt;/tt&gt;<sp/>will<sp/>guess</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal<sp/>algorithm<sp/>settings<sp/>or<sp/>read<sp/>them<sp/>from<sp/>pre-loaded<sp/></highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Wisdom.html&quot;&gt;&quot;wisdom&quot;&lt;/a&gt;.</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1173" refid="classvigra_1_1FFTWConvolvePlan_1a7995087149900c780a60ebd66ce4ee74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad2aede80344b005ce5b40fefaa8610eb" kindref="member" tooltip="Create an empty plan.">FFTWConvolvePlan</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C2&gt;</ref><sp/>kernel,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C3&gt;</ref><sp/>out,</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>useFourierKernel(false)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(in,<sp/>kernel,<sp/>out,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>complex<sp/>kernel.</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>kernel<sp/>must<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>Fourier<sp/>domain,<sp/>using<sp/>the<sp/>half-space<sp/>format.<sp/></highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>\ref<sp/>convolveFFT()<sp/>for<sp/>detailed<sp/>information<sp/>on<sp/>required<sp/>shapes<sp/>and<sp/>internal<sp/>padding.</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>planner_flags<sp/>must<sp/>be<sp/>a<sp/>combination<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Planner-Flags.html&quot;&gt;planner<sp/></highlight></codeline>
<codeline lineno="1189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags&lt;/a&gt;<sp/>defined<sp/>by<sp/>the<sp/>FFTW<sp/>library.<sp/>The<sp/>default<sp/>&lt;tt&gt;FFTW_ESTIMATE&lt;/tt&gt;<sp/>will<sp/>guess</highlight></codeline>
<codeline lineno="1190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal<sp/>algorithm<sp/>settings<sp/>or<sp/>read<sp/>them<sp/>from<sp/>pre-loaded<sp/></highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Wisdom.html&quot;&gt;&quot;wisdom&quot;&lt;/a&gt;.</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1194" refid="classvigra_1_1FFTWConvolvePlan_1acce83f9504e3581a7bd9d2353536aff1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad2aede80344b005ce5b40fefaa8610eb" kindref="member" tooltip="Create an empty plan.">FFTWConvolvePlan</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C3&gt;</ref><sp/>out,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>useFourierKernel(true)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(in,<sp/>kernel,<sp/>out,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>complex<sp/>array<sp/>with<sp/>a<sp/>complex<sp/>kernel.</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>\ref<sp/>convolveFFT()<sp/>for<sp/>detailed<sp/>information<sp/>on<sp/>required<sp/>shapes<sp/>and<sp/>internal<sp/>padding.</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>fourierDomainKernel<sp/>determines<sp/>if<sp/>the<sp/>kernel<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>spatial<sp/>or</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fourier<sp/>domain.</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>planner_flags<sp/>must<sp/>be<sp/>a<sp/>combination<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Planner-Flags.html&quot;&gt;planner<sp/></highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags&lt;/a&gt;<sp/>defined<sp/>by<sp/>the<sp/>FFTW<sp/>library.<sp/>The<sp/>default<sp/>&lt;tt&gt;FFTW_ESTIMATE&lt;/tt&gt;<sp/>will<sp/>guess</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal<sp/>algorithm<sp/>settings<sp/>or<sp/>read<sp/>them<sp/>from<sp/>pre-loaded<sp/></highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Wisdom.html&quot;&gt;&quot;wisdom&quot;&lt;/a&gt;.</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1216" refid="classvigra_1_1FFTWConvolvePlan_1a4f5b2a8bae780fb9f32fb7753380f3e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad2aede80344b005ce5b40fefaa8610eb" kindref="member" tooltip="Create an empty plan.">FFTWConvolvePlan</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C3&gt;<sp/>out,<sp/></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fourierDomainKernel,</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(in,<sp/>kernel,<sp/>out,<sp/>fourierDomainKernel,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Create<sp/>a<sp/>plan<sp/>from<sp/>just<sp/>the<sp/>shape<sp/>information.</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>\ref<sp/>convolveFFT()<sp/>for<sp/>detailed<sp/>information<sp/>on<sp/>required<sp/>shapes<sp/>and<sp/>internal<sp/>padding.</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>fourierDomainKernel<sp/>determines<sp/>if<sp/>the<sp/>kernel<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>spatial<sp/>or</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fourier<sp/>domain.</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\arg<sp/>planner_flags<sp/>must<sp/>be<sp/>a<sp/>combination<sp/>of<sp/>the<sp/></highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Planner-Flags.html&quot;&gt;planner<sp/></highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags&lt;/a&gt;<sp/>defined<sp/>by<sp/>the<sp/>FFTW<sp/>library.<sp/>The<sp/>default<sp/>&lt;tt&gt;FFTW_ESTIMATE&lt;/tt&gt;<sp/>will<sp/>guess</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal<sp/>algorithm<sp/>settings<sp/>or<sp/>read<sp/>them<sp/>from<sp/>pre-loaded<sp/></highlight></codeline>
<codeline lineno="1236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Wisdom.html&quot;&gt;&quot;wisdom&quot;&lt;/a&gt;.</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1239" refid="classvigra_1_1FFTWConvolvePlan_1a1f2c8c91209f144f5d5826674306c8a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad2aede80344b005ce5b40fefaa8610eb" kindref="member" tooltip="Create an empty plan.">FFTWConvolvePlan</ref>(Shape<sp/>inOut,<sp/>Shape<sp/>kernel,<sp/></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useFourierKernel<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useFourierKernel)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(inOut,<sp/>kernel,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initFourierKernel(inOut,<sp/>kernel,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Init<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>real<sp/>kernel.</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>constructor<sp/>with<sp/>the<sp/>same<sp/>signature<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1254" refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C2&gt;</ref><sp/>kernel,</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C3&gt;</ref><sp/>out,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>()<sp/>==<sp/>out.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(in.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),<sp/>kernel.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Init<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>complex<sp/>kernel.</highlight></codeline>
<codeline lineno="1265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>constructor<sp/>with<sp/>the<sp/>same<sp/>signature<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1269" refid="classvigra_1_1FFTWConvolvePlan_1a5abef66c257f6addd22c3c59f2443d0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C3&gt;</ref><sp/>out,</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>()<sp/>==<sp/>out.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initFourierKernel(in.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),<sp/>kernel.shape(),<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Init<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>complex<sp/>array<sp/>with<sp/>a<sp/>complex<sp/>kernel.</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>constructor<sp/>with<sp/>the<sp/>same<sp/>signature<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="1282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1284" refid="classvigra_1_1FFTWConvolvePlan_1a59801be1ed33732b2dfe35a0179bb877" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C3&gt;<sp/>out,<sp/></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fourierDomainKernel,</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in.shape()<sp/>==<sp/>out.shape(),</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::init():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useFourierKernel<sp/>=<sp/>fourierDomainKernel;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initComplex(in.shape(),<sp/>kernel.shape(),<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Init<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>sequence<sp/>of<sp/>kernels.</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>kernels<sp/>can<sp/>be<sp/>either<sp/>real<sp/>or<sp/>complex.<sp/>The<sp/>sequences<sp/>\a<sp/>kernels<sp/>and<sp/>\a<sp/>outs</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>have<sp/>the<sp/>same<sp/>length.<sp/>See<sp/>the<sp/>corresponding<sp/>constructors<sp/></highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>single<sp/>kernels<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1303" refid="classvigra_1_1FFTWConvolvePlan_1acfbe09c8e5215dfe7026a89a6cac3fe4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1acfbe09c8e5215dfe7026a89a6cac3fe4" kindref="member" tooltip="Init a plan to convolve a real array with a sequence of kernels.">initMany</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;KernelIterator&gt;::value_type<sp/>KernelArray;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KernelArray::value_type<sp/>KernelValue;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;OutIterator&gt;::value_type<sp/>OutArray;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutArray::value_type<sp/>OutValue;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>realKernel<sp/>=<sp/>IsSameType&lt;KernelValue,<sp/>Real&gt;::value;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fourierKernel<sp/>=<sp/>IsSameType&lt;KernelValue,<sp/>Complex&gt;::value;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(realKernel<sp/>||<sp/>fourierKernel,</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::initMany():<sp/>kernels<sp/>have<sp/>unsuitable<sp/>value_type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition((IsSameType&lt;OutValue,<sp/>Real&gt;::value),</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::initMany():<sp/>outputs<sp/>have<sp/>unsuitable<sp/>value_type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(realKernel)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1acfbe09c8e5215dfe7026a89a6cac3fe4" kindref="member" tooltip="Init a plan to convolve a real array with a sequence of kernels.">initMany</ref>(in.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),<sp/>checkShapes(in.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),<sp/>kernels,<sp/>kernelsEnd,<sp/>outs),</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_flags);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initFourierKernelMany(in.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),<sp/></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkShapesFourier(in.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>(),<sp/>kernels,<sp/>kernelsEnd,<sp/>outs),</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>planner_flags);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Init<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>complex<sp/>array<sp/>with<sp/>a<sp/>sequence<sp/>of<sp/>kernels.</highlight></codeline>
<codeline lineno="1334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>kernels<sp/>must<sp/>be<sp/>complex<sp/>as<sp/>well.<sp/>The<sp/>sequences<sp/>\a<sp/>kernels<sp/>and<sp/>\a<sp/>outs</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>have<sp/>the<sp/>same<sp/>length.<sp/>See<sp/>the<sp/>corresponding<sp/>constructors<sp/></highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>single<sp/>kernels<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1340" refid="classvigra_1_1FFTWConvolvePlan_1a8267c39162b1469cb4137fb2dc36ae27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1acfbe09c8e5215dfe7026a89a6cac3fe4" kindref="member" tooltip="Init a plan to convolve a real array with a sequence of kernels.">initMany</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView</ref>&lt;N,<sp/><ref refid="classvigra_1_1FFTWComplex" kindref="compound" tooltip="Wrapper class for the FFTW complex types &amp;#39;fftw_complex&amp;#39;.">FFTWComplex&lt;Real&gt;</ref>,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs,</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fourierDomainKernels,</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;KernelIterator&gt;::value_type<sp/>KernelArray;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KernelArray::value_type<sp/>KernelValue;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;OutIterator&gt;::value_type<sp/>OutArray;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutArray::value_type<sp/>OutValue;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition((IsSameType&lt;KernelValue,<sp/>Complex&gt;::value),</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::initMany():<sp/>kernels<sp/>have<sp/>unsuitable<sp/>value_type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition((IsSameType&lt;OutValue,<sp/>Complex&gt;::value),</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::initMany():<sp/>outputs<sp/>have<sp/>unsuitable<sp/>value_type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useFourierKernel<sp/>=<sp/>fourierDomainKernels;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape<sp/>paddedShape<sp/>=<sp/>checkShapesComplex(in.shape(),<sp/>kernels,<sp/>kernelsEnd,<sp/>outs);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound">CArray</ref><sp/>newFourierArray(paddedShape),<sp/>newFourierKernel(paddedShape);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan&lt;N, Real&gt;</ref><sp/>fplan(newFourierArray,<sp/>newFourierArray,<sp/>FFTW_FORWARD,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWPlan" kindref="compound">FFTWPlan&lt;N, Real&gt;</ref><sp/>bplan(newFourierArray,<sp/>newFourierArray,<sp/>FFTW_BACKWARD,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_plan<sp/>=<sp/>fplan;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_plan<sp/>=<sp/>bplan;</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierArray.<ref refid="classvigra_1_1MultiArray_1a2e15da47fd16916e4165a55e99a0ed3b" kindref="member">swap</ref>(newFourierArray);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierKernel.<ref refid="classvigra_1_1MultiArray_1a2e15da47fd16916e4165a55e99a0ed3b" kindref="member">swap</ref>(newFourierKernel);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(Shape<sp/>inOut,<sp/>Shape<sp/>kernel,</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initFourierKernel(Shape<sp/>inOut,<sp/>Shape<sp/>kernel,</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initComplex(Shape<sp/>inOut,<sp/>Shape<sp/>kernel,</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1acfbe09c8e5215dfe7026a89a6cac3fe4" kindref="member" tooltip="Init a plan to convolve a real array with a sequence of kernels.">initMany</ref>(Shape<sp/>inOut,<sp/>Shape<sp/>maxKernel,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">init</ref>(inOut,<sp/>maxKernel,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initFourierKernelMany(Shape<sp/>inOut,<sp/>Shape<sp/>kernels,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags<sp/>=<sp/>FFTW_ESTIMATE)</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initFourierKernel(inOut,<sp/>kernels,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Execute<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>real<sp/>kernel.</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>shapes<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>corresponding<sp/>init<sp/>function</highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>constructor.<sp/>However,<sp/>execute()<sp/>can<sp/>be<sp/>called<sp/>several<sp/>times<sp/>on</highlight></codeline>
<codeline lineno="1396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>plan,<sp/>even<sp/>with<sp/>different<sp/>arrays,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>have<sp/>the<sp/>appropriate<sp/></highlight></codeline>
<codeline lineno="1397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.</highlight></codeline>
<codeline lineno="1398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1a2ae5bbb04636ee6be7c356968e232a4d" kindref="member" tooltip="Execute a plan to convolve a real array with a real kernel.">execute</ref>(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C3&gt;<sp/>out);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Execute<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>complex<sp/>kernel.</highlight></codeline>
<codeline lineno="1405"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1406"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>shapes<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>corresponding<sp/>init<sp/>function</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>constructor.<sp/>However,<sp/>execute()<sp/>can<sp/>be<sp/>called<sp/>several<sp/>times<sp/>on</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>plan,<sp/>even<sp/>with<sp/>different<sp/>arrays,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>have<sp/>the<sp/>appropriate<sp/></highlight></codeline>
<codeline lineno="1409"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.</highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1a2ae5bbb04636ee6be7c356968e232a4d" kindref="member" tooltip="Execute a plan to convolve a real array with a real kernel.">execute</ref>(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C3&gt;<sp/>out);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Execute<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>complex<sp/>array<sp/>with<sp/>a<sp/>complex<sp/>kernel.</highlight></codeline>
<codeline lineno="1417"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1418"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>shapes<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>corresponding<sp/>init<sp/>function</highlight></codeline>
<codeline lineno="1419"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>constructor.<sp/>However,<sp/>execute()<sp/>can<sp/>be<sp/>called<sp/>several<sp/>times<sp/>on</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>plan,<sp/>even<sp/>with<sp/>different<sp/>arrays,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>have<sp/>the<sp/>appropriate<sp/></highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1a2ae5bbb04636ee6be7c356968e232a4d" kindref="member" tooltip="Execute a plan to convolve a real array with a real kernel.">execute</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C3&gt;<sp/>out);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Execute<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>complex<sp/>array<sp/>with<sp/>a<sp/>sequence<sp/>of<sp/>kernels.</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>shapes<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>corresponding<sp/>init<sp/>function</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>constructor.<sp/>However,<sp/>executeMany()<sp/>can<sp/>be<sp/>called<sp/>several<sp/>times<sp/>on</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>plan,<sp/>even<sp/>with<sp/>different<sp/>arrays,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>have<sp/>the<sp/>appropriate<sp/></highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.</highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1a8a6e128726ee1662ba1b75f562e63148" kindref="member" tooltip="Execute a plan to convolve a complex array with a sequence of kernels.">executeMany</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>\brief<sp/>Execute<sp/>a<sp/>plan<sp/>to<sp/>convolve<sp/>a<sp/>real<sp/>array<sp/>with<sp/>a<sp/>sequence<sp/>of<sp/>kernels.</highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>array<sp/>shapes<sp/>must<sp/>be<sp/>the<sp/>same<sp/>as<sp/>in<sp/>the<sp/>corresponding<sp/>init<sp/>function</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>constructor.<sp/>However,<sp/>executeMany()<sp/>can<sp/>be<sp/>called<sp/>several<sp/>times<sp/>on</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>same<sp/>plan,<sp/>even<sp/>with<sp/>different<sp/>arrays,<sp/>as<sp/>long<sp/>as<sp/>they<sp/>have<sp/>the<sp/>appropriate<sp/></highlight></codeline>
<codeline lineno="1446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapes.</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1449" refid="classvigra_1_1FFTWConvolvePlan_1a55d55e5da33a1f6babd2702a055a6b01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1FFTWConvolvePlan_1a8a6e128726ee1662ba1b75f562e63148" kindref="member" tooltip="Execute a plan to convolve a complex array with a sequence of kernels.">executeMany</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs)</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;KernelIterator&gt;::value_type<sp/>KernelArray;</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KernelArray::value_type<sp/>KernelValue;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IsSameType&lt;KernelValue,<sp/>Complex&gt;::type<sp/>UseFourierKernel;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;OutIterator&gt;::value_type<sp/>OutArray;</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutArray::value_type<sp/>OutValue;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>realKernel<sp/>=<sp/>IsSameType&lt;KernelValue,<sp/>Real&gt;::value;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fourierKernel<sp/>=<sp/>IsSameType&lt;KernelValue,<sp/>Complex&gt;::value;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(realKernel<sp/>||<sp/>fourierKernel,</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::executeMany():<sp/>kernels<sp/>have<sp/>unsuitable<sp/>value_type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition((IsSameType&lt;OutValue,<sp/>Real&gt;::value),</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::executeMany():<sp/>outputs<sp/>have<sp/>unsuitable<sp/>value_type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executeManyImpl(in,<sp/>kernels,<sp/>kernelsEnd,<sp/>outs,<sp/>UseFourierKernel());</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>checkShapes(Shape<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>checkShapesFourier(Shape<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>checkShapesComplex(Shape<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>executeManyImpl(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs,<sp/>VigraFalseType<sp/></highlight><highlight class="comment">/*<sp/>useFourierKernel*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>executeManyImpl(<ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;N, Real, C1&gt;</ref><sp/>in,<sp/></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs,<sp/>VigraTrueType<sp/></highlight><highlight class="comment">/*<sp/>useFourierKernel*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1499"><highlight class="normal">};<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><ref refid="classvigra_1_1FFTWConvolvePlan_1ad9cee0fbde7dd62b6f5d3101269d1e50" kindref="member" tooltip="Init a plan to convolve a real array with a real kernel.">FFTWConvolvePlan&lt;N, Real&gt;::init</ref>(Shape<sp/>in,<sp/>Shape<sp/>kernel,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>paddedShape<sp/>=<sp/>fftwBestPaddedShapeR2C(in<sp/>+<sp/>kernel<sp/>-<sp/>Shape(1)),</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complexShape<sp/>=<sp/><ref refid="group__FourierTransform_1gafbea828444f49163293b1d81fcd05da8" kindref="member" tooltip="Find frequency domain shape for a R2C Fourier transform.">fftwCorrespondingShapeR2C</ref>(paddedShape);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>CArray<sp/>newFourierArray(complexShape),<sp/>newFourierKernel(complexShape);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>realStrides<sp/>=<sp/>2*newFourierArray.stride();</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>realStrides[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>RArray<sp/>newRealArray(paddedShape,<sp/>realStrides,<sp/>(Real*)newFourierArray.data());</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>RArray<sp/>newRealKernel(paddedShape,<sp/>realStrides,<sp/>(Real*)newFourierKernel.data());</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;<sp/>fplan(newRealArray,<sp/>newFourierArray,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;<sp/>bplan(newFourierArray,<sp/>newRealArray,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan<sp/>=<sp/>fplan;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>backward_plan<sp/>=<sp/>bplan;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>realArray<sp/>=<sp/>newRealArray;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>realKernel<sp/>=<sp/>newRealKernel;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierArray.swap(newFourierArray);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierKernel.swap(newFourierKernel);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>useFourierKernel<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1530"><highlight class="normal">FFTWConvolvePlan&lt;N,<sp/>Real&gt;::initFourierKernel(Shape<sp/>in,<sp/>Shape<sp/>kernel,</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="1532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>complexShape<sp/>=<sp/>kernel,</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddedShape<sp/><sp/>=<sp/>fftwCorrespondingShapeC2R(complexShape);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;N;<sp/>++k)</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in[k]<sp/>&lt;=<sp/>paddedShape[k],</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::init():<sp/>kernel<sp/>too<sp/>small<sp/>for<sp/>given<sp/>input.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>CArray<sp/>newFourierArray(complexShape),<sp/>newFourierKernel(complexShape);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>realStrides<sp/>=<sp/>2*newFourierArray.stride();</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>realStrides[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>RArray<sp/>newRealArray(paddedShape,<sp/>realStrides,<sp/>(Real*)newFourierArray.data());</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/>RArray<sp/>newRealKernel(paddedShape,<sp/>realStrides,<sp/>(Real*)newFourierKernel.data());</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;<sp/>fplan(newRealArray,<sp/>newFourierArray,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;<sp/>bplan(newFourierArray,<sp/>newRealArray,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan<sp/>=<sp/>fplan;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>backward_plan<sp/>=<sp/>bplan;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>realArray<sp/>=<sp/>newRealArray;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>realKernel<sp/>=<sp/>newRealKernel;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierArray.swap(newFourierArray);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierKernel.swap(newFourierKernel);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>useFourierKernel<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1561"><highlight class="normal">FFTWConvolvePlan&lt;N,<sp/>Real&gt;::initComplex(Shape<sp/>in,<sp/>Shape<sp/>kernel,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>planner_flags)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>paddedShape;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useFourierKernel)</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;N;<sp/>++k)</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in[k]<sp/>&lt;=<sp/>kernel[k],</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::init():<sp/>kernel<sp/>too<sp/>small<sp/>for<sp/>given<sp/>input.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddedShape<sp/>=<sp/>kernel;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddedShape<sp/><sp/>=<sp/>fftwBestPaddedShape(in<sp/>+<sp/>kernel<sp/>-<sp/>Shape(1));</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>CArray<sp/>newFourierArray(paddedShape),<sp/>newFourierKernel(paddedShape);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;<sp/>fplan(newFourierArray,<sp/>newFourierArray,<sp/>FFTW_FORWARD,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;<sp/>bplan(newFourierArray,<sp/>newFourierArray,<sp/>FFTW_BACKWARD,<sp/>planner_flags);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan<sp/>=<sp/>fplan;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>backward_plan<sp/>=<sp/>bplan;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierArray.swap(newFourierArray);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierKernel.swap(newFourierKernel);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOXYGEN<sp/>//<sp/>doxygen<sp/>documents<sp/>these<sp/>functions<sp/>as<sp/>free<sp/>functions</highlight></codeline>
<codeline lineno="1591"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><ref refid="classvigra_1_1FFTWConvolvePlan_1a2ae5bbb04636ee6be7c356968e232a4d" kindref="member" tooltip="Execute a plan to convolve a real array with a real kernel.">FFTWConvolvePlan&lt;N, Real&gt;::execute</ref>(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C3&gt;<sp/>out)</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(!useFourierKernel,</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>plan<sp/>was<sp/>generated<sp/>for<sp/>Fourier<sp/>kernel,<sp/>got<sp/>spatial<sp/>kernel.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(in.shape()<sp/>==<sp/>out.shape(),</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>paddedShape<sp/>=<sp/>fftwBestPaddedShapeR2C(in.shape()<sp/>+<sp/>kernel.shape()<sp/>-<sp/>Shape(1)),</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>paddedShape<sp/>-<sp/>in.shape(),<sp/></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__FixedPoint16Operations_1gac71b069a80f6decdb6fad1cfd508f5f8" kindref="member" tooltip="division with enforced result type.">div</ref>(diff,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(2)),</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>in.shape()<sp/>+<sp/>left;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(paddedShape<sp/>==<sp/>realArray.shape(),</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>plan.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftEmbedArray(in,<sp/>realArray);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan.execute(realArray,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftEmbedKernel(kernel,<sp/>realKernel);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan.execute(realKernel,<sp/>fourierKernel);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierArray<sp/>*=<sp/>fourierKernel;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>backward_plan.execute(fourierArray,<sp/>realArray);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>realArray.subarray(left,<sp/>right);</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><ref refid="classvigra_1_1FFTWConvolvePlan_1a2ae5bbb04636ee6be7c356968e232a4d" kindref="member" tooltip="Execute a plan to convolve a real array with a real kernel.">FFTWConvolvePlan&lt;N, Real&gt;::execute</ref>(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C3&gt;<sp/>out)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(useFourierKernel,</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>plan<sp/>was<sp/>generated<sp/>for<sp/>spatial<sp/>kernel,<sp/>got<sp/>Fourier<sp/>kernel.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(in.shape()<sp/>==<sp/>out.shape(),</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(kernel.shape()<sp/>==<sp/>fourierArray.shape(),</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>shape<sp/>mismatch<sp/>between<sp/>kernel<sp/>and<sp/>plan.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>paddedShape<sp/>=<sp/>fftwCorrespondingShapeC2R(kernel.shape(),<sp/><ref refid="group__MathFunctions_1ga48f661149941ebaa90ddd99ee5eee145" kindref="member">odd</ref>(in.shape(0))),</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>paddedShape<sp/>-<sp/>in.shape(),<sp/></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__FixedPoint16Operations_1gac71b069a80f6decdb6fad1cfd508f5f8" kindref="member" tooltip="division with enforced result type.">div</ref>(diff,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(2)),</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>in.shape()<sp/>+<sp/>left;</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(paddedShape<sp/>==<sp/>realArray.shape(),</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>plan.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftEmbedArray(in,<sp/>realArray);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan.execute(realArray,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierKernel<sp/>=<sp/>kernel;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>moveDCToHalfspaceUpperLeft(fourierKernel);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierArray<sp/>*=<sp/>fourierKernel;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>backward_plan.execute(fourierArray,<sp/>realArray);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>realArray.subarray(left,<sp/>right);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><ref refid="classvigra_1_1FFTWConvolvePlan_1a2ae5bbb04636ee6be7c356968e232a4d" kindref="member" tooltip="Execute a plan to convolve a real array with a real kernel.">FFTWConvolvePlan&lt;N, Real&gt;::execute</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C3&gt;<sp/>out)</highlight></codeline>
<codeline lineno="1669"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(in.shape()<sp/>==<sp/>out.shape(),</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>input<sp/>and<sp/>output<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>paddedShape<sp/>=<sp/>fourierArray.shape(),</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>paddedShape<sp/>-<sp/>in.shape(),<sp/></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__FixedPoint16Operations_1gac71b069a80f6decdb6fad1cfd508f5f8" kindref="member" tooltip="division with enforced result type.">div</ref>(diff,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(2)),</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>in.shape()<sp/>+<sp/>left;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useFourierKernel)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(kernel.shape()<sp/>==<sp/>fourierArray.shape(),</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>shape<sp/>mismatch<sp/>between<sp/>kernel<sp/>and<sp/>plan.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierKernel<sp/>=<sp/>kernel;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__FourierTransform_1gaee27c376079af99e8e2148e7d23ffbbb" kindref="member" tooltip="Rearrange the quadrants of a Fourier image so that the origin is in the image&amp;#39;s upper left...">moveDCToUpperLeft</ref>(fourierKernel);</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::fftEmbedKernel(kernel,<sp/>fourierKernel);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_plan.execute(fourierKernel,<sp/>fourierKernel);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftEmbedArray(in,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan.execute(fourierArray,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>fourierArray<sp/>*=<sp/>fourierKernel;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>backward_plan.execute(fourierArray,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>fourierArray.subarray(left,<sp/>right);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1705"><highlight class="normal">FFTWConvolvePlan&lt;N,<sp/>Real&gt;::executeManyImpl(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs,<sp/>VigraFalseType<sp/></highlight><highlight class="comment">/*useFourierKernel*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(!useFourierKernel,</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>plan<sp/>was<sp/>generated<sp/>for<sp/>Fourier<sp/>kernel,<sp/>got<sp/>spatial<sp/>kernel.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>kernelMax<sp/>=<sp/>checkShapes(in.shape(),<sp/>kernels,<sp/>kernelsEnd,<sp/>outs),</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddedShape<sp/>=<sp/>fftwBestPaddedShapeR2C(in.shape()<sp/>+<sp/>kernelMax<sp/>-<sp/>Shape(1)),</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>paddedShape<sp/>-<sp/>in.shape(),<sp/></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__FixedPoint16Operations_1gac71b069a80f6decdb6fad1cfd508f5f8" kindref="member" tooltip="division with enforced result type.">div</ref>(diff,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(2)),</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>in.shape()<sp/>+<sp/>left;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(paddedShape<sp/>==<sp/>realArray.shape(),</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::executeMany():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>plan.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftEmbedArray(in,<sp/>realArray);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan.execute(realArray,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>kernels<sp/>!=<sp/>kernelsEnd;<sp/>++kernels,<sp/>++outs)</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::fftEmbedKernel(*kernels,<sp/>realKernel);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_plan.execute(realKernel,<sp/>fourierKernel);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierKernel<sp/>*=<sp/>fourierArray;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_plan.execute(fourierKernel,<sp/>realKernel);</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outs<sp/>=<sp/>realKernel.subarray(left,<sp/>right);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1740"><highlight class="normal">FFTWConvolvePlan&lt;N,<sp/>Real&gt;::executeManyImpl(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs,<sp/>VigraTrueType<sp/></highlight><highlight class="comment">/*useFourierKernel*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(useFourierKernel,</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::execute():<sp/>plan<sp/>was<sp/>generated<sp/>for<sp/>spatial<sp/>kernel,<sp/>got<sp/>Fourier<sp/>kernel.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>complexShape<sp/>=<sp/>checkShapesFourier(in.shape(),<sp/>kernels,<sp/>kernelsEnd,<sp/>outs),</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddedShape<sp/>=<sp/>fftwCorrespondingShapeC2R(complexShape,<sp/><ref refid="group__MathFunctions_1ga48f661149941ebaa90ddd99ee5eee145" kindref="member">odd</ref>(in.shape(0))),</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>paddedShape<sp/>-<sp/>in.shape(),<sp/></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__FixedPoint16Operations_1gac71b069a80f6decdb6fad1cfd508f5f8" kindref="member" tooltip="division with enforced result type.">div</ref>(diff,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(2)),</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>in.shape()<sp/>+<sp/>left;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(complexShape<sp/>==<sp/>fourierArray.shape(),</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::executeFourierKernelMany():<sp/>shape<sp/>mismatch<sp/>between<sp/>kernels<sp/>and<sp/>plan.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(paddedShape<sp/>==<sp/>realArray.shape(),</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::executeFourierKernelMany():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>plan.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftEmbedArray(in,<sp/>realArray);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan.execute(realArray,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>kernels<sp/>!=<sp/>kernelsEnd;<sp/>++kernels,<sp/>++outs)</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierKernel<sp/>=<sp/>*kernels;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveDCToHalfspaceUpperLeft(fourierKernel);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierKernel<sp/>*=<sp/>fourierArray;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_plan.execute(fourierKernel,<sp/>realKernel);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outs<sp/>=<sp/>realKernel.subarray(left,<sp/>right);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><ref refid="classvigra_1_1FFTWConvolvePlan_1a8a6e128726ee1662ba1b75f562e63148" kindref="member" tooltip="Execute a plan to convolve a complex array with a sequence of kernels.">FFTWConvolvePlan&lt;N, Real&gt;::executeMany</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;KernelIterator&gt;::value_type<sp/>KernelArray;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KernelArray::value_type<sp/>KernelValue;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;OutIterator&gt;::value_type<sp/>OutArray;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutArray::value_type<sp/>OutValue;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition((IsSameType&lt;KernelValue,<sp/>Complex&gt;::value),</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::executeMany():<sp/>kernels<sp/>have<sp/>unsuitable<sp/>value_type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition((IsSameType&lt;OutValue,<sp/>Complex&gt;::value),</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::executeMany():<sp/>outputs<sp/>have<sp/>unsuitable<sp/>value_type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>paddedShape<sp/>=<sp/>checkShapesComplex(in.shape(),<sp/>kernels,<sp/>kernelsEnd,<sp/>outs),</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff<sp/>=<sp/>paddedShape<sp/>-<sp/>in.shape(),<sp/></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/><ref refid="group__FixedPoint16Operations_1gac71b069a80f6decdb6fad1cfd508f5f8" kindref="member" tooltip="division with enforced result type.">div</ref>(diff,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(2)),</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>in.shape()<sp/>+<sp/>left;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::fftEmbedArray(in,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>forward_plan.execute(fourierArray,<sp/>fourierArray);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>kernels<sp/>!=<sp/>kernelsEnd;<sp/>++kernels,<sp/>++outs)</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useFourierKernel)</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierKernel<sp/>=<sp/>*kernels;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__FourierTransform_1gaee27c376079af99e8e2148e7d23ffbbb" kindref="member" tooltip="Rearrange the quadrants of a Fourier image so that the origin is in the image&amp;#39;s upper left...">moveDCToUpperLeft</ref>(fourierKernel);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::fftEmbedKernel(*kernels,<sp/>fourierKernel);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forward_plan.execute(fourierKernel,<sp/>fourierKernel);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierKernel<sp/>*=<sp/>fourierArray;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backward_plan.execute(fourierKernel,<sp/>fourierKernel);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outs<sp/>=<sp/>fourierKernel.subarray(left,<sp/>right);</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>DOXYGEN</highlight></codeline>
<codeline lineno="1821"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FFTWConvolvePlan&lt;N,<sp/>Real&gt;::Shape<sp/></highlight></codeline>
<codeline lineno="1825"><highlight class="normal">FFTWConvolvePlan&lt;N,<sp/>Real&gt;::checkShapes(Shape<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs)</highlight></codeline>
<codeline lineno="1828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(kernels<sp/>!=<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapes():<sp/>empty<sp/>kernel<sp/>sequence.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>kernelMax;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>kernels<sp/>!=<sp/>kernelsEnd;<sp/>++kernels,<sp/>++outs)</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in<sp/>==<sp/>outs-&gt;shape(),</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapes():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>(one)<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernelMax<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">max</ref>(kernelMax,<sp/>kernels-&gt;shape());</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__TinyVectorOperators_1gaa49e08e69b54385f9434ffe32a32f299" kindref="member" tooltip="product of the vector&amp;#39;s elements">prod</ref>(kernelMax)<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapes():<sp/>all<sp/>kernels<sp/>have<sp/>size<sp/>0.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kernelMax;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FFTWConvolvePlan&lt;N,<sp/>Real&gt;::Shape<sp/></highlight></codeline>
<codeline lineno="1847"><highlight class="normal">FFTWConvolvePlan&lt;N,<sp/>Real&gt;::checkShapesFourier(Shape<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs)</highlight></codeline>
<codeline lineno="1850"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(kernels<sp/>!=<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesFourier():<sp/>empty<sp/>kernel<sp/>sequence.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>complexShape<sp/>=<sp/>kernels-&gt;shape(),</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddedShape<sp/><sp/>=<sp/>fftwCorrespondingShapeC2R(complexShape);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;N;<sp/>++k)</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in[k]<sp/>&lt;=<sp/>paddedShape[k],</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesFourier():<sp/>kernels<sp/>too<sp/>small<sp/>for<sp/>given<sp/>input.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>kernels<sp/>!=<sp/>kernelsEnd;<sp/>++kernels,<sp/>++outs)</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in<sp/>==<sp/>outs-&gt;shape(),</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesFourier():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>(one)<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(complexShape<sp/>==<sp/>kernels-&gt;shape(),</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesFourier():<sp/>all<sp/>kernels<sp/>must<sp/>have<sp/>the<sp/>same<sp/>size.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>complexShape;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real&gt;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>KernelIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FFTWConvolvePlan&lt;N,<sp/>Real&gt;::Shape<sp/></highlight></codeline>
<codeline lineno="1874"><highlight class="normal">FFTWConvolvePlan&lt;N,<sp/>Real&gt;::checkShapesComplex(Shape<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs)</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(kernels<sp/>!=<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesComplex():<sp/>empty<sp/>kernel<sp/>sequence.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>kernelShape<sp/>=<sp/>kernels-&gt;shape();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>kernels<sp/>!=<sp/>kernelsEnd;<sp/>++kernels,<sp/>++outs)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in<sp/>==<sp/>outs-&gt;shape(),</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesComplex():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>(one)<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useFourierKernel)</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(kernelShape<sp/>==<sp/>kernels-&gt;shape(),</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesComplex():<sp/>Fourier<sp/>domain<sp/>kernels<sp/>must<sp/>have<sp/>identical<sp/>size.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernelShape<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">max</ref>(kernelShape,<sp/>kernels-&gt;shape());</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__TinyVectorOperators_1gaa49e08e69b54385f9434ffe32a32f299" kindref="member" tooltip="product of the vector&amp;#39;s elements">prod</ref>(kernelShape)<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesComplex():<sp/>all<sp/>kernels<sp/>have<sp/>size<sp/>0.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(useFourierKernel)</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;N;<sp/>++k)</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(in[k]<sp/>&lt;=<sp/>kernelShape[k],</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FFTWConvolvePlan::checkShapesComplex():<sp/>kernels<sp/>too<sp/>small<sp/>for<sp/>given<sp/>input.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kernelShape;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftwBestPaddedShape(in<sp/>+<sp/>kernelShape<sp/>-<sp/>Shape(1));</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourierTransform<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><ref refid="group__FourierTransform_1gadd9dce5cef45cda228466002d00a0666" kindref="member" tooltip="Compute forward and inverse Fourier transforms.">fourierTransform</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>out)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;(in,<sp/>out,<sp/>FFTW_FORWARD).execute(in,<sp/>out);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><ref refid="group__FourierTransform_1ga478712099cf479694c81ccc5918aca73" kindref="member" tooltip="Compute inverse Fourier transforms.">fourierTransformInverse</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>out)</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;(in,<sp/>out,<sp/>FFTW_BACKWARD).execute(in,<sp/>out);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><ref refid="group__FourierTransform_1gadd9dce5cef45cda228466002d00a0666" kindref="member" tooltip="Compute forward and inverse Fourier transforms.">fourierTransform</ref>(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>out)</highlight></codeline>
<codeline lineno="1939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.shape()<sp/>==<sp/>out.shape())</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>the<sp/>input<sp/>array<sp/>into<sp/>the<sp/>output<sp/>and<sp/>then<sp/>perform<sp/>an<sp/>in-place<sp/>FFT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;(out,<sp/>out,<sp/>FFTW_FORWARD).execute(out,<sp/>out);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(out.shape()<sp/>==<sp/><ref refid="group__FourierTransform_1gafbea828444f49163293b1d81fcd05da8" kindref="member" tooltip="Find frequency domain shape for a R2C Fourier transform.">fftwCorrespondingShapeR2C</ref>(in.shape()))</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;(in,<sp/>out).execute(in,<sp/>out);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fourierTransform():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><ref refid="group__FourierTransform_1ga478712099cf479694c81ccc5918aca73" kindref="member" tooltip="Compute inverse Fourier transforms.">fourierTransformInverse</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;<sp/>out)</highlight></codeline>
<codeline lineno="1959"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(in.shape()<sp/>==<sp/><ref refid="group__FourierTransform_1gafbea828444f49163293b1d81fcd05da8" kindref="member" tooltip="Find frequency domain shape for a R2C Fourier transform.">fftwCorrespondingShapeR2C</ref>(out.shape()),</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fourierTransformInverse():<sp/>shape<sp/>mismatch<sp/>between<sp/>input<sp/>and<sp/>output.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWPlan&lt;N,<sp/>Real&gt;(in,<sp/>out).execute(in,<sp/>out);</highlight></codeline>
<codeline lineno="1963"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1965"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="1966"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1967"><highlight class="comment">/**<sp/>\addtogroup<sp/>MultiArrayConvolutionFilters</highlight></codeline>
<codeline lineno="1968"><highlight class="comment">*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1969"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="1970"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convolveFFT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1977"><highlight class="comment">/**<sp/>\brief<sp/>Convolve<sp/>an<sp/>array<sp/>with<sp/>a<sp/>kernel<sp/>by<sp/>means<sp/>of<sp/>the<sp/>Fourier<sp/>transform.</highlight></codeline>
<codeline lineno="1978"><highlight class="comment"></highlight></codeline>
<codeline lineno="1979"><highlight class="comment"><sp/><sp/><sp/><sp/>Thanks<sp/>to<sp/>the<sp/>convolution<sp/>theorem<sp/>of<sp/>Fourier<sp/>theory,<sp/>a<sp/>convolution<sp/>in<sp/>the<sp/>spatial<sp/>domain</highlight></codeline>
<codeline lineno="1980"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>equivalent<sp/>to<sp/>a<sp/>multiplication<sp/>in<sp/>the<sp/>frequency<sp/>domain.<sp/>Thus,<sp/>for<sp/>certain<sp/>kernels</highlight></codeline>
<codeline lineno="1981"><highlight class="comment"><sp/><sp/><sp/><sp/>(especially<sp/>large,<sp/>non-separable<sp/>ones),<sp/>it<sp/>is<sp/>advantageous<sp/>to<sp/>perform<sp/>the<sp/>convolution<sp/>by<sp/>first</highlight></codeline>
<codeline lineno="1982"><highlight class="comment"><sp/><sp/><sp/><sp/>transforming<sp/>both<sp/>array<sp/>and<sp/>kernel<sp/>to<sp/>the<sp/>frequency<sp/>domain,<sp/>multiplying<sp/>the<sp/>frequency<sp/></highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/><sp/><sp/><sp/>representations,<sp/>and<sp/>transforming<sp/>the<sp/>result<sp/>back<sp/>into<sp/>the<sp/>spatial<sp/>domain.<sp/></highlight></codeline>
<codeline lineno="1984"><highlight class="comment"><sp/><sp/><sp/><sp/>Some<sp/>kernels<sp/>have<sp/>a<sp/>much<sp/>simpler<sp/>definition<sp/>in<sp/>the<sp/>frequency<sp/>domain,<sp/>so<sp/>that<sp/>they<sp/>are<sp/>readily<sp/></highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/><sp/><sp/><sp/>computed<sp/>there<sp/>directly,<sp/>avoiding<sp/>Fourier<sp/>transformation<sp/>of<sp/>those<sp/>kernels.<sp/></highlight></codeline>
<codeline lineno="1986"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1987"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>following<sp/>functions<sp/>implement<sp/>various<sp/>variants<sp/>of<sp/>FFT-based<sp/>convolution:</highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1989"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DL&gt;</highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;convolveFFT&lt;/b&gt;&lt;DD&gt;<sp/>Convolve<sp/>a<sp/>real-valued<sp/>input<sp/>array<sp/>with<sp/>a<sp/>kernel<sp/>such<sp/>that<sp/>the<sp/></highlight></codeline>
<codeline lineno="1991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>is<sp/>also<sp/>real-valued.<sp/>That<sp/>is,<sp/>the<sp/>kernel<sp/>is<sp/>either<sp/>provided</highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>a<sp/>real-valued<sp/>array<sp/>in<sp/>the<sp/>spatial<sp/>domain,<sp/>or<sp/>as<sp/>a<sp/></highlight></codeline>
<codeline lineno="1993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex-valued<sp/>array<sp/>in<sp/>the<sp/>Fourier<sp/>domain,<sp/>using<sp/>the<sp/>half-space<sp/>format<sp/></highlight></codeline>
<codeline lineno="1994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>R2C<sp/>Fourier<sp/>transform<sp/>(see<sp/>below).</highlight></codeline>
<codeline lineno="1995"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;convolveFFTMany&lt;/b&gt;&lt;DD&gt;<sp/>Like<sp/>&lt;tt&gt;convolveFFT&lt;/tt&gt;,<sp/>but<sp/>you<sp/>may<sp/>provide<sp/>many<sp/>kernels<sp/>at<sp/>once<sp/></highlight></codeline>
<codeline lineno="1996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(using<sp/>an<sp/>iterator<sp/>pair<sp/>specifying<sp/>the<sp/>kernel<sp/>sequence).<sp/></highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>has<sp/>the<sp/>advantage<sp/>that<sp/>the<sp/>forward<sp/>transform<sp/>of<sp/>the<sp/>input<sp/>array<sp/>needs<sp/></highlight></codeline>
<codeline lineno="1998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>executed<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="1999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;convolveFFTComplex&lt;/b&gt;&lt;DD&gt;<sp/>Convolve<sp/>a<sp/>complex-valued<sp/>input<sp/>array<sp/>with<sp/>a<sp/>complex-valued<sp/>kernel,<sp/></highlight></codeline>
<codeline lineno="2000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resulting<sp/>in<sp/>a<sp/>complex-valued<sp/>output<sp/>array.<sp/>An<sp/>additional<sp/>flag<sp/>is<sp/>used<sp/>to<sp/></highlight></codeline>
<codeline lineno="2001"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specify<sp/>whether<sp/>the<sp/>kernel<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>spatial<sp/>or<sp/>frequency<sp/>domain.</highlight></codeline>
<codeline lineno="2002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;convolveFFTComplexMany&lt;/b&gt;&lt;DD&gt;<sp/>Like<sp/>&lt;tt&gt;convolveFFTComplex&lt;/tt&gt;,<sp/>but<sp/>you<sp/>may<sp/>provide<sp/>many<sp/>kernels<sp/>at<sp/>once<sp/></highlight></codeline>
<codeline lineno="2003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(using<sp/>an<sp/>iterator<sp/>pair<sp/>specifying<sp/>the<sp/>kernel<sp/>sequence).<sp/></highlight></codeline>
<codeline lineno="2004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>has<sp/>the<sp/>advantage<sp/>that<sp/>the<sp/>forward<sp/>transform<sp/>of<sp/>the<sp/>input<sp/>array<sp/>needs<sp/></highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>executed<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/DL&gt;</highlight></codeline>
<codeline lineno="2007"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>output<sp/>arrays<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape<sp/>as<sp/>the<sp/>input<sp/>arrays.<sp/>In<sp/>the<sp/>&quot;Many&quot;<sp/>variants<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/><sp/><sp/><sp/>convolution<sp/>functions,<sp/>the<sp/>kernels<sp/>must<sp/>all<sp/>have<sp/>the<sp/>same<sp/>shape.</highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2011"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>origin<sp/>of<sp/>the<sp/>kernel<sp/>is<sp/>always<sp/>assumed<sp/>to<sp/>be<sp/>in<sp/>the<sp/>center<sp/>of<sp/>the<sp/>kernel<sp/>array<sp/>(precisely,</highlight></codeline>
<codeline lineno="2012"><highlight class="comment"><sp/><sp/><sp/><sp/>at<sp/>the<sp/>point<sp/>&lt;tt&gt;floor(kernel.shape()<sp/>/<sp/>2.0)&lt;/tt&gt;,<sp/>except<sp/>when<sp/>the<sp/>half-space<sp/>format<sp/>is<sp/>used,<sp/>see<sp/>below).<sp/></highlight></codeline>
<codeline lineno="2013"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>function<sp/>\ref<sp/>moveDCToUpperLeft()<sp/>will<sp/>be<sp/>called<sp/>internally<sp/>to<sp/>align<sp/>the<sp/>kernel<sp/>with<sp/>the<sp/>transformed<sp/></highlight></codeline>
<codeline lineno="2014"><highlight class="comment"><sp/><sp/><sp/><sp/>input<sp/>as<sp/>appropriate.</highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2016"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>a<sp/>real<sp/>input<sp/>is<sp/>combined<sp/>with<sp/>a<sp/>real<sp/>kernel,<sp/>the<sp/>kernel<sp/>is<sp/>automatically<sp/>assumed<sp/>to<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="2017"><highlight class="comment"><sp/><sp/><sp/><sp/>in<sp/>the<sp/>spatial<sp/>domain.<sp/>If<sp/>a<sp/>real<sp/>input<sp/>is<sp/>combined<sp/>with<sp/>a<sp/>complex<sp/>kernel,<sp/>the<sp/>kernel<sp/>is<sp/>assumed<sp/></highlight></codeline>
<codeline lineno="2018"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>Fourier<sp/>domain<sp/>in<sp/>half-space<sp/>format.<sp/>If<sp/>the<sp/>input<sp/>array<sp/>is<sp/>complex,<sp/>a<sp/>flag<sp/></highlight></codeline>
<codeline lineno="2019"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;fourierDomainKernel&lt;/tt&gt;<sp/>determines<sp/>where<sp/>the<sp/>kernel<sp/>is<sp/>defined.</highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2021"><highlight class="comment"><sp/><sp/><sp/><sp/>When<sp/>the<sp/>kernel<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>spatial<sp/>domain,<sp/>the<sp/>convolution<sp/>functions<sp/>will<sp/>automatically<sp/>pad</highlight></codeline>
<codeline lineno="2022"><highlight class="comment"><sp/><sp/><sp/><sp/>(enlarge)<sp/>the<sp/>input<sp/>array<sp/>by<sp/>at<sp/>least<sp/>the<sp/>kernel<sp/>radius<sp/>in<sp/>each<sp/>direction.<sp/>The<sp/>newly<sp/>added<sp/>space<sp/>is</highlight></codeline>
<codeline lineno="2023"><highlight class="comment"><sp/><sp/><sp/><sp/>filled<sp/>according<sp/>to<sp/>reflective<sp/>boundary<sp/>conditions<sp/>in<sp/>order<sp/>to<sp/>minimize<sp/>border<sp/>artifacts<sp/>during<sp/></highlight></codeline>
<codeline lineno="2024"><highlight class="comment"><sp/><sp/><sp/><sp/>convolution.<sp/>It<sp/>is<sp/>thus<sp/>ensured<sp/>that<sp/>convolution<sp/>in<sp/>the<sp/>Fourier<sp/>domain<sp/>yields<sp/>the<sp/>same<sp/>results<sp/>as<sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="comment"><sp/><sp/><sp/><sp/>convolution<sp/>in<sp/>the<sp/>spatial<sp/>domain<sp/>(e.g.<sp/>when<sp/>\ref<sp/>separableConvolveMultiArray()<sp/>is<sp/>called<sp/>with<sp/>the<sp/></highlight></codeline>
<codeline lineno="2026"><highlight class="comment"><sp/><sp/><sp/><sp/>same<sp/>kernel).<sp/>A<sp/>little<sp/>further<sp/>padding<sp/>may<sp/>be<sp/>added<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>padded<sp/>array<sp/>shape</highlight></codeline>
<codeline lineno="2027"><highlight class="comment"><sp/><sp/><sp/><sp/>uses<sp/>integers<sp/>which<sp/>have<sp/>only<sp/>small<sp/>prime<sp/>factors,<sp/>because<sp/>FFTW<sp/>is<sp/>then<sp/>able<sp/>to<sp/>use<sp/>the<sp/>fastest</highlight></codeline>
<codeline lineno="2028"><highlight class="comment"><sp/><sp/><sp/><sp/>possible<sp/>algorithms.<sp/>Any<sp/>padding<sp/>is<sp/>automatically<sp/>removed<sp/>from<sp/>the<sp/>result<sp/>arrays<sp/>before<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="2029"><highlight class="comment"><sp/><sp/><sp/><sp/>returns.</highlight></codeline>
<codeline lineno="2030"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2031"><highlight class="comment"><sp/><sp/><sp/><sp/>When<sp/>the<sp/>kernel<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>frequency<sp/>domain,<sp/>it<sp/>must<sp/>be<sp/>complex-valued,<sp/>and<sp/>its<sp/>shape<sp/>determines</highlight></codeline>
<codeline lineno="2032"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>shape<sp/>of<sp/>the<sp/>Fourier<sp/>representation<sp/>(i.e.<sp/>the<sp/>input<sp/>is<sp/>padded<sp/>according<sp/>to<sp/>the<sp/>shape<sp/>of<sp/>the<sp/>kernel).</highlight></codeline>
<codeline lineno="2033"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>we<sp/>are<sp/>going<sp/>to<sp/>perform<sp/>a<sp/>complex-valued<sp/>convolution,<sp/>the<sp/>kernel<sp/>must<sp/>be<sp/>defined<sp/>for<sp/>the<sp/>entire<sp/></highlight></codeline>
<codeline lineno="2034"><highlight class="comment"><sp/><sp/><sp/><sp/>frequency<sp/>domain,<sp/>and<sp/>its<sp/>shape<sp/>directly<sp/>determines<sp/>the<sp/>size<sp/>of<sp/>the<sp/>FFT.<sp/></highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2036"><highlight class="comment"><sp/><sp/><sp/><sp/>In<sp/>contrast,<sp/>a<sp/>frequency<sp/>domain<sp/>kernel<sp/>for<sp/>a<sp/>real-valued<sp/>convolution<sp/>must<sp/>have<sp/>symmetry<sp/>properties</highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/><sp/><sp/><sp/>that<sp/>allow<sp/>to<sp/>drop<sp/>half<sp/>of<sp/>the<sp/>kernel<sp/>coefficients,<sp/>as<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Multi_002dDimensional-DFTs-of-Real-Data.html&quot;&gt;R2C<sp/>transform&lt;/a&gt;.<sp/></highlight></codeline>
<codeline lineno="2039"><highlight class="comment"><sp/><sp/><sp/><sp/>That<sp/>is,<sp/>the<sp/>kernel<sp/>must<sp/>have<sp/>the<sp/>&lt;i&gt;half-space<sp/>format&lt;/i&gt;,<sp/>that<sp/>is<sp/>the<sp/>shape<sp/>returned<sp/>by<sp/>&lt;tt&gt;fftwCorrespondingShapeR2C(fourier_shape)&lt;/tt&gt;,<sp/>where<sp/>&lt;tt&gt;fourier_shape&lt;/tt&gt;<sp/>is<sp/>the<sp/>desired<sp/></highlight></codeline>
<codeline lineno="2040"><highlight class="comment"><sp/><sp/><sp/><sp/>logical<sp/>shape<sp/>of<sp/>the<sp/>frequency<sp/>representation<sp/>(and<sp/>thus<sp/>the<sp/>size<sp/>of<sp/>the<sp/>padded<sp/>input).<sp/>The<sp/>origin<sp/></highlight></codeline>
<codeline lineno="2041"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>the<sp/>kernel<sp/>must<sp/>be<sp/>at<sp/>the<sp/>point<sp/></highlight></codeline>
<codeline lineno="2042"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;(0,<sp/>floor(fourier_shape[0]<sp/>/<sp/>2.0),<sp/>...,<sp/>floor(fourier_shape[N-1]<sp/>/<sp/>2.0))&lt;/tt&gt;<sp/></highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/><sp/><sp/><sp/>(i.e.<sp/>as<sp/>in<sp/>a<sp/>regular<sp/>kernel<sp/>except<sp/>for<sp/>the<sp/>first<sp/>dimension).</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>&lt;tt&gt;Real&lt;/tt&gt;<sp/>type<sp/>in<sp/>the<sp/>declarations<sp/>can<sp/>be<sp/>&lt;tt&gt;double&lt;/tt&gt;,<sp/>&lt;tt&gt;float&lt;/tt&gt;,<sp/>and<sp/></highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;long<sp/>double&lt;/tt&gt;.<sp/>Your<sp/>program<sp/>must<sp/>always<sp/>link<sp/>against<sp/>&lt;tt&gt;libfftw3&lt;/tt&gt;.<sp/>If<sp/>you<sp/>use</highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;float&lt;/tt&gt;<sp/>or<sp/>&lt;tt&gt;long<sp/>double&lt;/tt&gt;<sp/>arrays,<sp/>you<sp/>must<sp/>&lt;i&gt;additionally&lt;/i&gt;<sp/>link<sp/>against<sp/></highlight></codeline>
<codeline lineno="2048"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;libfftw3f&lt;/tt&gt;<sp/>and<sp/>&lt;tt&gt;libfftw3l&lt;/tt&gt;<sp/>respectively.</highlight></codeline>
<codeline lineno="2049"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2050"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>Fourier<sp/>transform<sp/>functions<sp/>internally<sp/>create<sp/>&lt;a<sp/>href=&quot;http://www.fftw.org/doc/Using-Plans.html&quot;&gt;FFTW<sp/>plans&lt;/a&gt;</highlight></codeline>
<codeline lineno="2051"><highlight class="comment"><sp/><sp/><sp/><sp/>which<sp/>control<sp/>the<sp/>algorithm<sp/>details.<sp/>The<sp/>plans<sp/>are<sp/>creates<sp/>with<sp/>the<sp/>flag<sp/>&lt;tt&gt;FFTW_ESTIMATE&lt;/tt&gt;,<sp/>i.e.</highlight></codeline>
<codeline lineno="2052"><highlight class="comment"><sp/><sp/><sp/><sp/>optimal<sp/>settings<sp/>are<sp/>guessed<sp/>or<sp/>read<sp/>from<sp/>saved<sp/>&quot;wisdom&quot;<sp/>files.<sp/>If<sp/>you<sp/>need<sp/>more<sp/>control<sp/>over<sp/>planning,</highlight></codeline>
<codeline lineno="2053"><highlight class="comment"><sp/><sp/><sp/><sp/>you<sp/>can<sp/>use<sp/>the<sp/>class<sp/>\ref<sp/>FFTWConvolvePlan.</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/><sp/><sp/><sp/>See<sp/>also<sp/>\ref<sp/>applyFourierFilter()<sp/>for<sp/>corresponding<sp/>functionality<sp/>on<sp/>the<sp/>basis<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/><sp/><sp/><sp/>old<sp/>image<sp/>iterator<sp/>interface.</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;<sp/>Declarations:&lt;/b&gt;</highlight></codeline>
<codeline lineno="2059"><highlight class="comment"></highlight></codeline>
<codeline lineno="2060"><highlight class="comment"><sp/><sp/><sp/><sp/>Real-valued<sp/>convolution<sp/>with<sp/>kernel<sp/>in<sp/>the<sp/>spatial<sp/>domain:</highlight></codeline>
<codeline lineno="2061"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="2062"><highlight class="comment"><sp/><sp/><sp/><sp/>namespace<sp/>vigra<sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>Real,<sp/>class<sp/>C1,<sp/>class<sp/>C2,<sp/>class<sp/>C3&gt;</highlight></codeline>
<codeline lineno="2064"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/></highlight></codeline>
<codeline lineno="2065"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convolveFFT(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="2066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C3&gt;<sp/>out);</highlight></codeline>
<codeline lineno="2068"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="2070"><highlight class="comment"></highlight></codeline>
<codeline lineno="2071"><highlight class="comment"><sp/><sp/><sp/><sp/>Real-valued<sp/>convolution<sp/>with<sp/>kernel<sp/>in<sp/>the<sp/>Fourier<sp/>domain<sp/>(half-space<sp/>format):</highlight></codeline>
<codeline lineno="2072"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="2073"><highlight class="comment"><sp/><sp/><sp/><sp/>namespace<sp/>vigra<sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>Real,<sp/>class<sp/>C1,<sp/>class<sp/>C2,<sp/>class<sp/>C3&gt;</highlight></codeline>
<codeline lineno="2075"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/></highlight></codeline>
<codeline lineno="2076"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convolveFFT(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="2077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="2078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C3&gt;<sp/>out);</highlight></codeline>
<codeline lineno="2079"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="2081"><highlight class="comment"></highlight></codeline>
<codeline lineno="2082"><highlight class="comment"><sp/><sp/><sp/><sp/>Series<sp/>of<sp/>real-valued<sp/>convolutions<sp/>with<sp/>kernels<sp/>in<sp/>the<sp/>spatial<sp/>or<sp/>Fourier<sp/>domain<sp/></highlight></codeline>
<codeline lineno="2083"><highlight class="comment"><sp/><sp/><sp/><sp/>(the<sp/>kernel<sp/>and<sp/>out<sp/>sequences<sp/>must<sp/>have<sp/>the<sp/>same<sp/>length):</highlight></codeline>
<codeline lineno="2084"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="2085"><highlight class="comment"><sp/><sp/><sp/><sp/>namespace<sp/>vigra<sp/>{</highlight></codeline>
<codeline lineno="2086"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>Real,<sp/>class<sp/>C1,<sp/></highlight></codeline>
<codeline lineno="2087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class<sp/>KernelIterator,<sp/>class<sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="2088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/></highlight></codeline>
<codeline lineno="2089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convolveFFTMany(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="2090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="2091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs);</highlight></codeline>
<codeline lineno="2092"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="2094"><highlight class="comment"></highlight></codeline>
<codeline lineno="2095"><highlight class="comment"><sp/><sp/><sp/><sp/>Complex-valued<sp/>convolution<sp/>(parameter<sp/>&lt;tt&gt;fourierDomainKernel&lt;/tt&gt;<sp/>determines<sp/>if</highlight></codeline>
<codeline lineno="2096"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>kernel<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>spatial<sp/>or<sp/>Fourier<sp/>domain):</highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="2098"><highlight class="comment"><sp/><sp/><sp/><sp/>namespace<sp/>vigra<sp/>{</highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>Real,<sp/>class<sp/>C1,<sp/>class<sp/>C2,<sp/>class<sp/>C3&gt;</highlight></codeline>
<codeline lineno="2100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void</highlight></codeline>
<codeline lineno="2101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convolveFFTComplex(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,</highlight></codeline>
<codeline lineno="2102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="2103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C3&gt;<sp/>out,</highlight></codeline>
<codeline lineno="2104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>fourierDomainKernel);</highlight></codeline>
<codeline lineno="2105"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="2107"><highlight class="comment"></highlight></codeline>
<codeline lineno="2108"><highlight class="comment"><sp/><sp/><sp/><sp/>Series<sp/>of<sp/>complex-valued<sp/>convolutions<sp/>(parameter<sp/>&lt;tt&gt;fourierDomainKernel&lt;/tt&gt;<sp/></highlight></codeline>
<codeline lineno="2109"><highlight class="comment"><sp/><sp/><sp/><sp/>determines<sp/>if<sp/>the<sp/>kernels<sp/>are<sp/>defined<sp/>in<sp/>the<sp/>spatial<sp/>or<sp/>Fourier<sp/>domain,<sp/></highlight></codeline>
<codeline lineno="2110"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>kernel<sp/>and<sp/>out<sp/>sequences<sp/>must<sp/>have<sp/>the<sp/>same<sp/>length):</highlight></codeline>
<codeline lineno="2111"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="2112"><highlight class="comment"><sp/><sp/><sp/><sp/>namespace<sp/>vigra<sp/>{</highlight></codeline>
<codeline lineno="2113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>Real,<sp/>class<sp/>C1,<sp/></highlight></codeline>
<codeline lineno="2114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class<sp/>KernelIterator,<sp/>class<sp/>OutIterator&gt;</highlight></codeline>
<codeline lineno="2115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/></highlight></codeline>
<codeline lineno="2116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convolveFFTComplexMany(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="2117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="2118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs,</highlight></codeline>
<codeline lineno="2119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>fourierDomainKernel);</highlight></codeline>
<codeline lineno="2120"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="2122"><highlight class="comment"></highlight></codeline>
<codeline lineno="2123"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;<sp/>Usage:&lt;/b&gt;</highlight></codeline>
<codeline lineno="2124"><highlight class="comment"></highlight></codeline>
<codeline lineno="2125"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/multi_fft.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="2126"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="2127"><highlight class="comment"></highlight></codeline>
<codeline lineno="2128"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="2129"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>convolve<sp/>real<sp/>array<sp/>with<sp/>a<sp/>Gaussian<sp/>(sigma=1)<sp/>defined<sp/>in<sp/>the<sp/>spatial<sp/>domain</highlight></codeline>
<codeline lineno="2130"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>(implicitly<sp/>uses<sp/>padding<sp/>by<sp/>at<sp/>least<sp/>4<sp/>pixels)</highlight></codeline>
<codeline lineno="2131"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>src(Shape2(w,<sp/>h)),<sp/>dest(Shape2(w,h));</highlight></codeline>
<codeline lineno="2132"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>spatial_kernel(Shape2(9,<sp/>9));</highlight></codeline>
<codeline lineno="2134"><highlight class="comment"><sp/><sp/><sp/><sp/>Gaussian&lt;double&gt;<sp/>gauss(1.0);</highlight></codeline>
<codeline lineno="2135"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2136"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>y=0;<sp/>y&lt;9;<sp/>++y)</highlight></codeline>
<codeline lineno="2137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>x=0;<sp/>x&lt;9;<sp/>++x)</highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spatial_kernel(x,<sp/>y)<sp/>=<sp/>gauss(x-4.0)*gauss(y-4.0);</highlight></codeline>
<codeline lineno="2139"><highlight class="comment"></highlight></codeline>
<codeline lineno="2140"><highlight class="comment"><sp/><sp/><sp/><sp/>convolveFFT(src,<sp/>spatial_kernel,<sp/>dest);</highlight></codeline>
<codeline lineno="2141"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2142"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>convolve<sp/>real<sp/>array<sp/>with<sp/>a<sp/>Gaussian<sp/>(sigma=1)<sp/>defined<sp/>in<sp/>the<sp/>Fourier<sp/>domain</highlight></codeline>
<codeline lineno="2143"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>(uses<sp/>no<sp/>padding,<sp/>because<sp/>the<sp/>kernel<sp/>size<sp/>corresponds<sp/>to<sp/>the<sp/>input<sp/>size)</highlight></codeline>
<codeline lineno="2144"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>FFTWComplex&lt;double&gt;<sp/>&gt;<sp/>fourier_kernel(fftwCorrespondingShapeR2C(src.shape()));</highlight></codeline>
<codeline lineno="2145"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>y0<sp/>=<sp/>h<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="2146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2147"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>y=0;<sp/>y&lt;fourier_kernel.shape(1);<sp/>++y)</highlight></codeline>
<codeline lineno="2148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(int<sp/>x=0;<sp/>x&lt;fourier_kernel.shape(0);<sp/>++x)</highlight></codeline>
<codeline lineno="2149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fourier_kernel(x,<sp/>y)<sp/>=<sp/>exp(-0.5*sq(x<sp/>/<sp/>double(w)))<sp/>*<sp/>exp(-0.5*sq((y-y0)/double(h)));</highlight></codeline>
<codeline lineno="2150"><highlight class="comment"></highlight></codeline>
<codeline lineno="2151"><highlight class="comment"><sp/><sp/><sp/><sp/>convolveFFT(src,<sp/>fourier_kernel,<sp/>dest);</highlight></codeline>
<codeline lineno="2152"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="2153"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal">doxygen_overloaded_function(template<sp/>&lt;...&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MultiArrayConvolutionFilters_1gaaf819a613a16ee9807d69ecb2d91b2ae" kindref="member" tooltip="Convolve an array with a kernel by means of the Fourier transform.">convolveFFT</ref>)</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1gaaf819a613a16ee9807d69ecb2d91b2ae" kindref="member" tooltip="Convolve an array with a kernel by means of the Fourier transform.">convolveFFT</ref>(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C3&gt;<sp/>out)</highlight></codeline>
<codeline lineno="2161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWConvolvePlan&lt;N,<sp/>Real&gt;(in,<sp/>kernel,<sp/>out).execute(in,<sp/>kernel,<sp/>out);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1gaaf819a613a16ee9807d69ecb2d91b2ae" kindref="member" tooltip="Convolve an array with a kernel by means of the Fourier transform.">convolveFFT</ref>(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>Real,<sp/>C3&gt;<sp/>out)</highlight></codeline>
<codeline lineno="2170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWConvolvePlan&lt;N,<sp/>Real&gt;(in,<sp/>kernel,<sp/>out).execute(in,<sp/>kernel,<sp/>out);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2174"><highlight class="comment">/**<sp/>\brief<sp/>Convolve<sp/>a<sp/>complex-valued<sp/>array<sp/>by<sp/>means<sp/>of<sp/>the<sp/>Fourier<sp/>transform.</highlight></codeline>
<codeline lineno="2175"><highlight class="comment"></highlight></codeline>
<codeline lineno="2176"><highlight class="comment"><sp/><sp/><sp/><sp/>See<sp/>\ref<sp/>convolveFFT()<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="2177"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal">doxygen_overloaded_function(template<sp/>&lt;...&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MultiArrayConvolutionFilters_1ga014b4e7d6d5154d5ad83170c6cb547f6" kindref="member" tooltip="Convolve a complex-valued array by means of the Fourier transform.">convolveFFTComplex</ref>)</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Real,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1ga014b4e7d6d5154d5ad83170c6cb547f6" kindref="member" tooltip="Convolve a complex-valued array by means of the Fourier transform.">convolveFFTComplex</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C2&gt;<sp/>kernel,</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C3&gt;<sp/>out,</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fourierDomainKernel)</highlight></codeline>
<codeline lineno="2186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWConvolvePlan&lt;N,<sp/>Real&gt;(in,<sp/>kernel,<sp/>out,<sp/>fourierDomainKernel).execute(in,<sp/>kernel,<sp/>out);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2190"><highlight class="comment">/**<sp/>\brief<sp/>Convolve<sp/>a<sp/>real-valued<sp/>array<sp/>with<sp/>a<sp/>sequence<sp/>of<sp/>kernels<sp/>by<sp/>means<sp/>of<sp/>the<sp/>Fourier<sp/>transform.</highlight></codeline>
<codeline lineno="2191"><highlight class="comment"></highlight></codeline>
<codeline lineno="2192"><highlight class="comment"><sp/><sp/><sp/><sp/>See<sp/>\ref<sp/>convolveFFT()<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="2193"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal">doxygen_overloaded_function(template<sp/>&lt;...&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MultiArrayConvolutionFilters_1gae2598869b328eae9ff709387e0b758a0" kindref="member" tooltip="Convolve a real-valued array with a sequence of kernels by means of the Fourier transform.">convolveFFTMany</ref>)</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Real,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">C1,<sp/></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KernelIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">OutIterator&gt;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1gae2598869b328eae9ff709387e0b758a0" kindref="member" tooltip="Convolve a real-valued array with a sequence of kernels by means of the Fourier transform.">convolveFFTMany</ref>(MultiArrayView&lt;N,<sp/>Real,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs)</highlight></codeline>
<codeline lineno="2202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWConvolvePlan&lt;N,<sp/>Real&gt;<sp/>plan;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>plan.initMany(in,<sp/>kernels,<sp/>kernelsEnd,<sp/>outs);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/>plan.executeMany(in,<sp/>kernels,<sp/>kernelsEnd,<sp/>outs);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2208"><highlight class="comment">/**<sp/>\brief<sp/>Convolve<sp/>a<sp/>complex-valued<sp/>array<sp/>with<sp/>a<sp/>sequence<sp/>of<sp/>kernels<sp/>by<sp/>means<sp/>of<sp/>the<sp/>Fourier<sp/>transform.</highlight></codeline>
<codeline lineno="2209"><highlight class="comment"></highlight></codeline>
<codeline lineno="2210"><highlight class="comment"><sp/><sp/><sp/><sp/>See<sp/>\ref<sp/>convolveFFT()<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="2211"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal">doxygen_overloaded_function(template<sp/>&lt;...&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MultiArrayConvolutionFilters_1gaf555ec81ad059261e2bb8b5d03a0aa83" kindref="member" tooltip="Convolve a complex-valued array with a sequence of kernels by means of the Fourier transform...">convolveFFTComplexMany</ref>)</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Real,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">C1,<sp/></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">KernelIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">OutIterator&gt;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1gaf555ec81ad059261e2bb8b5d03a0aa83" kindref="member" tooltip="Convolve a complex-valued array with a sequence of kernels by means of the Fourier transform...">convolveFFTComplexMany</ref>(MultiArrayView&lt;N,<sp/>FFTWComplex&lt;Real&gt;,<sp/>C1&gt;<sp/>in,<sp/></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KernelIterator<sp/>kernels,<sp/>KernelIterator<sp/>kernelsEnd,</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutIterator<sp/>outs,</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fourierDomainKernel)</highlight></codeline>
<codeline lineno="2221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>FFTWConvolvePlan&lt;N,<sp/>Real&gt;<sp/>plan;</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/>plan.initMany(in,<sp/>kernels,<sp/>kernelsEnd,<sp/>outs,<sp/>fourierDomainKernel);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/>plan.executeMany(in,<sp/>kernels,<sp/>kernelsEnd,<sp/>outs);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2227"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="2228"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>VIGRA_MULTI_FFT_HXX</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_fft.hxx"/>
  </compounddef>
</doxygen>
