<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="rf__ridge__split_8hxx" kind="file">
    <compoundname>rf_ridge_split.hxx</compoundname>
    <includes refid="sampling_8hxx" local="yes">../sampling.hxx</includes>
    <includes refid="rf__split_8hxx" local="yes">rf_split.hxx</includes>
    <includes refid="rf__nodeproxy_8hxx" local="yes">rf_nodeproxy.hxx</includes>
    <includes refid="regression_8hxx" local="yes">../regression.hxx</includes>
    <includedby refid="random__forest_8hxx" local="yes">vigra/random_forest.hxx</includedby>
    <incdepgraph>
      <node id="6950">
        <label>multi_pointoperators.hxx</label>
        <link refid="multi__pointoperators_8hxx_source"/>
        <childnode refid="6947" relation="include">
        </childnode>
        <childnode refid="6951" relation="include">
        </childnode>
        <childnode refid="6952" relation="include">
        </childnode>
        <childnode refid="6955" relation="include">
        </childnode>
        <childnode refid="6953" relation="include">
        </childnode>
        <childnode refid="6934" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6922" relation="include">
        </childnode>
      </node>
      <node id="6933">
        <label>iomanip</label>
      </node>
      <node id="6923">
        <label>functional</label>
      </node>
      <node id="6906">
        <label>limits</label>
      </node>
      <node id="6911">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
      </node>
      <node id="6924">
        <label>iterator</label>
      </node>
      <node id="6934">
        <label>multi_array.hxx</label>
        <link refid="multi__array_8hxx_source"/>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6935" relation="include">
        </childnode>
        <childnode refid="6936" relation="include">
        </childnode>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6948" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
      </node>
      <node id="6922">
        <label>inspector_passes.hxx</label>
        <link refid="inspector__passes_8hxx_source"/>
        <childnode refid="6904" relation="include">
        </childnode>
      </node>
      <node id="6912">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="6947">
        <label>initimage.hxx</label>
        <link refid="initimage_8hxx_source"/>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6939" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
      </node>
      <node id="6921">
        <label>algorithm.hxx</label>
        <link refid="algorithm_8hxx_source"/>
        <childnode refid="6911" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6922" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6923" relation="include">
        </childnode>
        <childnode refid="6924" relation="include">
        </childnode>
      </node>
      <node id="6958">
        <label>rf_region.hxx</label>
        <link refid="rf__region_8hxx_source"/>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6927" relation="include">
        </childnode>
        <childnode refid="6930" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6911" relation="include">
        </childnode>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
      </node>
      <node id="6917">
        <label>cmath</label>
      </node>
      <node id="6898">
        <label>stdexcept</label>
      </node>
      <node id="6930">
        <label>numeric</label>
      </node>
      <node id="6925">
        <label>functortraits.hxx</label>
        <link refid="functortraits_8hxx_source"/>
        <childnode refid="6923" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
      </node>
      <node id="6938">
        <label>iteratortags.hxx</label>
        <link refid="iteratortags_8hxx_source"/>
        <childnode refid="6924" relation="include">
        </childnode>
      </node>
      <node id="6900">
        <label>string</label>
      </node>
      <node id="6951">
        <label>copyimage.hxx</label>
        <link refid="copyimage_8hxx_source"/>
        <childnode refid="6946" relation="include">
        </childnode>
      </node>
      <node id="6927">
        <label>map</label>
      </node>
      <node id="6928">
        <label>rf_split.hxx</label>
        <link refid="rf__split_8hxx_source"/>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6929" relation="include">
        </childnode>
        <childnode refid="6927" relation="include">
        </childnode>
        <childnode refid="6930" relation="include">
        </childnode>
        <childnode refid="6931" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6911" relation="include">
        </childnode>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
        <childnode refid="6957" relation="include">
        </childnode>
        <childnode refid="6958" relation="include">
        </childnode>
      </node>
      <node id="6944">
        <label>basicimageview.hxx</label>
        <link refid="basicimageview_8hxx_source"/>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6947" relation="include">
        </childnode>
      </node>
      <node id="6939">
        <label>iteratortraits.hxx</label>
        <link refid="iteratortraits_8hxx_source"/>
        <childnode refid="6935" relation="include">
        </childnode>
        <childnode refid="6940" relation="include">
        </childnode>
      </node>
      <node id="6960">
        <label>linear_solve.hxx</label>
        <link refid="linear__solve_8hxx_source"/>
        <childnode refid="6961" relation="include">
        </childnode>
        <childnode refid="6900" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6962" relation="include">
        </childnode>
      </node>
      <node id="6909">
        <label>cfloat</label>
      </node>
      <node id="6962">
        <label>singular_value_decomposition.hxx</label>
        <link refid="singular__value__decomposition_8hxx_source"/>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6896" relation="include">
        </childnode>
      </node>
      <node id="6946">
        <label>utilities.hxx</label>
        <link refid="utilities_8hxx_source"/>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6919" relation="include">
        </childnode>
        <childnode refid="6937" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6900" relation="include">
        </childnode>
        <childnode refid="6899" relation="include">
        </childnode>
      </node>
      <node id="6902">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="6952">
        <label>transformimage.hxx</label>
        <link refid="transformimage_8hxx_source"/>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6939" relation="include">
        </childnode>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
        <childnode refid="6953" relation="include">
        </childnode>
      </node>
      <node id="6919">
        <label>tuple.hxx</label>
        <link refid="tuple_8hxx_source"/>
        <childnode refid="6920" relation="include">
        </childnode>
      </node>
      <node id="6936">
        <label>tinyvector.hxx</label>
        <link refid="tinyvector_8hxx_source"/>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6937" relation="include">
        </childnode>
      </node>
      <node id="6949">
        <label>sys/types.h</label>
      </node>
      <node id="6953">
        <label>inspectimage.hxx</label>
        <link refid="inspectimage_8hxx_source"/>
        <childnode refid="6954" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6939" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6922" relation="include">
        </childnode>
      </node>
      <node id="6894">
        <label>vigra/random_forest/rf_ridge_split.hxx</label>
        <link refid="rf_ridge_split.hxx"/>
        <childnode refid="6895" relation="include">
        </childnode>
        <childnode refid="6928" relation="include">
        </childnode>
        <childnode refid="6957" relation="include">
        </childnode>
        <childnode refid="6959" relation="include">
        </childnode>
      </node>
      <node id="6957">
        <label>rf_nodeproxy.hxx</label>
        <link refid="rf__nodeproxy_8hxx_source"/>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6927" relation="include">
        </childnode>
        <childnode refid="6930" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6911" relation="include">
        </childnode>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
      </node>
      <node id="6916">
        <label>mathutil.hxx</label>
        <link refid="mathutil_8hxx_source"/>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
        <childnode refid="6910" relation="include">
        </childnode>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6919" relation="include">
        </childnode>
        <childnode refid="6911" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6921" relation="include">
        </childnode>
      </node>
      <node id="6901">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="6902" relation="include">
        </childnode>
        <childnode refid="6898" relation="include">
        </childnode>
      </node>
      <node id="6926">
        <label>ctime</label>
      </node>
      <node id="6908">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6909" relation="include">
        </childnode>
        <childnode refid="6910" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6911" relation="include">
        </childnode>
        <childnode refid="6912" relation="include">
        </childnode>
      </node>
      <node id="6954">
        <label>vector</label>
      </node>
      <node id="6945">
        <label>imageiterator.hxx</label>
        <link refid="imageiterator_8hxx_source"/>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6935" relation="include">
        </childnode>
        <childnode refid="6939" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
      </node>
      <node id="6941">
        <label>iteratoradapter.hxx</label>
        <link refid="iteratoradapter_8hxx_source"/>
      </node>
      <node id="6959">
        <label>../regression.hxx</label>
        <link refid="regression_8hxx_source"/>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6960" relation="include">
        </childnode>
        <childnode refid="6962" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
      </node>
      <node id="6940">
        <label>imageiteratoradapter.hxx</label>
        <link refid="imageiteratoradapter_8hxx_source"/>
        <childnode refid="6924" relation="include">
        </childnode>
      </node>
      <node id="6920">
        <label>utility</label>
      </node>
      <node id="6899">
        <label>sstream</label>
      </node>
      <node id="6942">
        <label>rgbvalue.hxx</label>
        <link refid="rgbvalue_8hxx_source"/>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6935" relation="include">
        </childnode>
        <childnode refid="6936" relation="include">
        </childnode>
        <childnode refid="6943" relation="include">
        </childnode>
      </node>
      <node id="6915">
        <label>random.hxx</label>
        <link refid="random_8hxx_source"/>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6926" relation="include">
        </childnode>
      </node>
      <node id="6937">
        <label>diff2d.hxx</label>
        <link refid="diff2d_8hxx_source"/>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6939" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
        <childnode refid="6919" relation="include">
        </childnode>
      </node>
      <node id="6897">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="6898" relation="include">
        </childnode>
        <childnode refid="6899" relation="include">
        </childnode>
        <childnode refid="6900" relation="include">
        </childnode>
        <childnode refid="6901" relation="include">
        </childnode>
      </node>
      <node id="6943">
        <label>static_assert.hxx</label>
        <link refid="static__assert_8hxx_source"/>
      </node>
      <node id="6896">
        <label>array_vector.hxx</label>
        <link refid="array__vector_8hxx_source"/>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
      </node>
      <node id="6931">
        <label>math.h</label>
      </node>
      <node id="6914">
        <label>iosfwd</label>
      </node>
      <node id="6918">
        <label>cstdlib</label>
      </node>
      <node id="6929">
        <label>cstddef</label>
      </node>
      <node id="6948">
        <label>multi_iterator.hxx</label>
        <link refid="multi__iterator_8hxx_source"/>
        <childnode refid="6949" relation="include">
        </childnode>
        <childnode refid="6936" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6961">
        <label>ctype.h</label>
      </node>
      <node id="6895">
        <label>../sampling.hxx</label>
        <link refid="sampling_8hxx_source"/>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6927" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6917" relation="include">
        </childnode>
      </node>
      <node id="6905">
        <label>climits</label>
      </node>
      <node id="6904">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
      </node>
      <node id="6956">
        <label>../functorexpression.hxx</label>
        <link refid="functorexpression_8hxx_source"/>
      </node>
      <node id="6955">
        <label>combineimages.hxx</label>
        <link refid="combineimages_8hxx_source"/>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
        <childnode refid="6917" relation="include">
        </childnode>
      </node>
      <node id="6910">
        <label>complex</label>
      </node>
      <node id="6932">
        <label>../matrix.hxx</label>
        <link refid="matrix_8hxx_source"/>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
        <childnode refid="6933" relation="include">
        </childnode>
        <childnode refid="6934" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6950" relation="include">
        </childnode>
      </node>
      <node id="6907">
        <label>algorithm</label>
      </node>
      <node id="6903">
        <label>memory.hxx</label>
        <link refid="memory_8hxx_source"/>
        <childnode refid="6904" relation="include">
        </childnode>
      </node>
      <node id="6935">
        <label>accessor.hxx</label>
        <link refid="accessor_8hxx_source"/>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6919" relation="include">
        </childnode>
      </node>
      <node id="6913">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6965">
        <label>vigra/random_forest_hdf5_impex.hxx</label>
        <link refid="random__forest__hdf5__impex_8hxx_source"/>
      </node>
      <node id="6963">
        <label>vigra/random_forest/rf_ridge_split.hxx</label>
        <link refid="rf_ridge_split.hxx"/>
        <childnode refid="6964" relation="include">
        </childnode>
      </node>
      <node id="6964">
        <label>vigra/random_forest.hxx</label>
        <link refid="random__forest_8hxx_source"/>
        <childnode refid="6965" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classvigra_1_1RidgeSplit" prot="public">vigra::RidgeSplit</innerclass>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="rf__ridge__split_8hxx_1a593df76405f75d3c506f9d6e3dc41aa0" prot="public" static="no">
        <name>outm</name>
        <param><defname>v</defname></param>
        <initializer>std::cout &lt;&lt; (#v) &lt;&lt; &quot;: &quot; &lt;&lt; (v) &lt;&lt; std::endl;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/random_forest/rf_ridge_split.hxx" line="20" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/random_forest/rf_ridge_split.hxx" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rf__ridge__split_8hxx_1a68fa632979d7688affb25166f3df2ca0" prot="public" static="no">
        <name>outm2</name>
        <param><defname>v</defname></param>
        <initializer>std::cout &lt;&lt; (#v) &lt;&lt; &quot;: &quot; &lt;&lt; (v) &lt;&lt; &quot;, &quot;;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/random_forest/rf_ridge_split.hxx" line="21" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/random_forest/rf_ridge_split.hxx" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>Interface:<sp/>rf_ridge_split</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Description:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>Nico<sp/>Splitthoff<sp/>&lt;splitthoff@zg00103&gt;,<sp/>(C)<sp/>2009</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright:<sp/>See<sp/>COPYING<sp/>file<sp/>that<sp/>comes<sp/>with<sp/>this<sp/>distribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_RANDOM_FOREST_RIDGE_SPLIT_H</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_RANDOM_FOREST_RIDGE_SPLIT_H</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="comment">//#include<sp/>&quot;rf_sampling.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../sampling.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rf_split.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rf_nodeproxy.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../regression.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>outm(v)<sp/>std::cout<sp/>&lt;&lt;<sp/>(#v)<sp/>&lt;&lt;<sp/>&quot;:<sp/>&quot;<sp/>&lt;&lt;<sp/>(v)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>outm2(v)<sp/>std::cout<sp/>&lt;&lt;<sp/>(#v)<sp/>&lt;&lt;<sp/>&quot;:<sp/>&quot;<sp/>&lt;&lt;<sp/>(v)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*template&lt;&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">class<sp/>Node&lt;i_RegrNode&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">:<sp/>public<sp/>NodeBase</highlight></codeline>
<codeline lineno="29"><highlight class="comment">{</highlight></codeline>
<codeline lineno="30"><highlight class="comment">public:</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>NodeBase<sp/>BT;</highlight></codeline>
<codeline lineno="32"><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>Node(<sp/><sp/><sp/>BT::T_Container_type<sp/>&amp;<sp/><sp/><sp/>topology,</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT::P_Container_type<sp/>&amp;<sp/><sp/><sp/>param,</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nNumCols)</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>BT(5+nNumCols,2+nNumCols,topology,<sp/>param)</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT::typeID()<sp/>=<sp/>i_RegrNode;</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>Node(<sp/><sp/><sp/>BT::T_Container_type<sp/><sp/><sp/><sp/><sp/>&amp;<sp/><sp/><sp/>topology,</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT::P_Container_type<sp/><sp/><sp/><sp/><sp/>&amp;<sp/><sp/><sp/>param,</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>BT(5,2,topology,<sp/>param,<sp/>n)</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>Node(<sp/>BT<sp/>&amp;<sp/>node_)</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>BT(5,<sp/>2,<sp/>node_)<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="51"><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>double&amp;<sp/>threshold()</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>BT::parameters_begin()[1];</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>BT::INT&amp;<sp/>column()</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>BT::column_data()[0];</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>template&lt;class<sp/>U,<sp/>class<sp/>C&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BT::INT&amp;<sp/>next(MultiArrayView&lt;2,U,C&gt;<sp/>const<sp/>&amp;<sp/>feature)</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(feature(0,<sp/>column())<sp/>&lt;<sp/>threshold())?<sp/>child(0):child(1);</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="comment">};*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ColumnDecisionFunctor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tag<sp/>=<sp/>ClassificationTag&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RidgeSplit:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SplitBase&lt;Tag&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SplitBase&lt;Tag&gt;<sp/>SB;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayVector&lt;Int32&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitColumns;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>ColumnDecisionFunctor<sp/><sp/><sp/><sp/><sp/><sp/><sp/>bgfunc;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region_gini_;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayVector&lt;double&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_gini_;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayVector&lt;std::ptrdiff_t&gt;<sp/>min_indices_;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayVector&lt;double&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_thresholds_;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bestSplitIndex;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bDoScalingInTraining;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bDoBestLambdaBasedOnGini;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>RidgeSplit()</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>:m_bDoScalingInTraining(true),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bDoBestLambdaBasedOnGini(true)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minGini()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="99"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_gini_[bestSplitIndex];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bestSplitColumn()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="104"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>splitColumns[bestSplitIndex];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>doScalingInTraining()</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bDoScalingInTraining;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>doBestLambdaBasedOnGini()</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_bDoBestLambdaBasedOnGini;<sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_external_parameters(ProblemSpec&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>in)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1SplitBase_1aa6696c3699fb21bfab6a3d6980104607" kindref="member">SB::set_external_parameters</ref>(in);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bgfunc.set_external_parameters(in);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>featureCount_<sp/>=<sp/>in.column_count_;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitColumns.resize(featureCount_);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;featureCount_;<sp/>++k)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitColumns[k]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_gini_.resize(featureCount_);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_indices_.resize(featureCount_);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_thresholds_.resize(featureCount_);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Region,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Random&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1SplitBase_1ab770d4160c2a1bbe3e7d570ebeebdfcc" kindref="member">findBestSplit</ref>(MultiArrayView&lt;2,<sp/>T,<sp/>C&gt;<sp/>features,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T2,<sp/>C2&gt;<sp/><sp/>multiClassLabels,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Region<sp/>&amp;<sp/>region,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;Region&gt;&amp;<sp/>childRegions,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Random<sp/>&amp;<sp/>randint)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cerr<sp/>&lt;&lt;<sp/>&quot;Split<sp/>called&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Region::IndexIterator<sp/>IndexIterator;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayView<sp/>&lt;2,<sp/>T,<sp/>C&gt;::difference_type<sp/>fShape;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView_1a8c847f2bb5c903a94bb9fb465636ae69" kindref="member">MultiArrayView &lt;2, T2, C2&gt;::difference_type</ref><sp/>lShape;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView_1a8c847f2bb5c903a94bb9fb465636ae69" kindref="member">MultiArrayView &lt;2, double&gt;::difference_type</ref><sp/>dShape;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>things<sp/>that<sp/>haven&apos;t<sp/>been<sp/>calculated<sp/>yet.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;start&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::accumulate(region.classCounts().begin(),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.classCounts().end(),<sp/>0)<sp/>!=<sp/>region.size())</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RandomForestClassCounter&lt;<sp/><sp/><sp/>MultiArrayView&lt;2,T2,<sp/>C2&gt;,<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;double&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter(multiClassLabels,<sp/>region.classCounts());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(<sp/><sp/>region.begin(),<sp/>region.end(),<sp/>counter);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.classCountsIsValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>region<sp/>pure<sp/>already?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region_gini_<sp/>=<sp/><ref refid="classvigra_1_1GiniCriterion_1a38f0a44f03e5412b4d544ea7b271c1e9" kindref="member">GiniCriterion::impurity</ref>(region.classCounts(),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.size());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region_gini_<sp/>==<sp/>0<sp/>||<sp/>region.size()<sp/>&lt;<sp/>SB::ext_param_.actual_mtry_<sp/>||<sp/>region.oob_size()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="classvigra_1_1SplitBase_1abe23e7e0b73b5156c744ca0106756068" kindref="member">SB::makeTerminalNode</ref>(features,<sp/>multiClassLabels,<sp/>region,<sp/>randint);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>select<sp/>columns<sp/><sp/>to<sp/>be<sp/>tried.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>SB::ext_param_.actual_mtry_;<sp/>++ii)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(splitColumns[ii],<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splitColumns[ii+<sp/>randint(features.shape(1)<sp/>-<sp/>ii)]);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//do<sp/>implicit<sp/>binary<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>T2&gt;<sp/>labels(lShape(multiClassLabels.shape(0),1));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//number<sp/>of<sp/>classes<sp/>should<sp/>be<sp/>&gt;1,<sp/>otherwise<sp/>makeTerminalNode<sp/>would<sp/>have<sp/>been<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNumClasses=0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;(int)region.classCounts().size();<sp/>n++)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNumClasses+=((region.classCounts()[n]&gt;0)<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>to<sp/>binary<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nNumClasses&gt;2)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxClass=0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxClassCounts=0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;(int)region.classCounts().size();<sp/>n++)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>should<sp/>occur<sp/>in<sp/>any<sp/>case:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>had<sp/>more<sp/>than<sp/>two<sp/>non-zero<sp/>classes<sp/>in<sp/>order<sp/>to<sp/>get<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.classCounts()[n]&gt;nMaxClassCounts)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMaxClassCounts=region.classCounts()[n];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMaxClass=n;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>binary<sp/>labels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;multiClassLabels.shape(0);<sp/>n++)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labels(n,0)=((multiClassLabels(n,0)==nMaxClass)<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labels=multiClassLabels;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_do<sp/>implicit<sp/>binary<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uncomment<sp/>this<sp/>for<sp/>some<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>int<sp/>nNumCases=features.shape(0);</highlight></codeline>
<codeline lineno="201"><highlight class="comment"></highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>MultiArrayView<sp/>&lt;2,<sp/>int&gt;::difference_type<sp/>nShape;</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>int&gt;<sp/>elementCounterArray(nShape(nNumCases,1),(int)0);</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>nUniqueElements=0;</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>n=0;<sp/>n&lt;region.size();<sp/>n++)</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementCounterArray[region[n]]++;</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>n=0;<sp/>n&lt;nNumCases;<sp/>n++)</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nUniqueElements+=((elementCounterArray[n]&gt;0)<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/><sp/><sp/>outm(nUniqueElements);</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/>nUniqueElements=0;</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>int&gt;<sp/>elementCounterArray_oob(nShape(nNumCases,1),(int)0);</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>n=0;<sp/>n&lt;region.oob_size();<sp/>n++)</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementCounterArray_oob[region.oob_begin()[n]]++;</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>n=0;<sp/>n&lt;nNumCases;<sp/>n++)</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nUniqueElements+=((elementCounterArray_oob[n]&gt;0)<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>outm(nUniqueElements);</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>notUniqueElements=0;</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>n=0;<sp/>n&lt;nNumCases;<sp/>n++)</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notUniqueElements+=(((elementCounterArray_oob[n]&gt;0)<sp/>&amp;&amp;<sp/>(elementCounterArray[n]&gt;0))<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/>outm(notUniqueElements);*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//outm(SB::ext_param_.actual_mtry_);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//select<sp/>submatrix<sp/>of<sp/>features<sp/>for<sp/>regression<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C&gt;<sp/>cVector;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>T&gt;<sp/>xtrain(fShape(region.size(),SB::ext_param_.actual_mtry_));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>only<sp/>want<sp/>-1<sp/>and<sp/>1<sp/>for<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>regrLabels(dShape(region.size(),1));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>data<sp/>into<sp/>a<sp/>vigra<sp/>data<sp/>structure<sp/>and<sp/>centre<sp/>and<sp/>scale<sp/>while<sp/>doing<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>meanMatrix(dShape(SB::ext_param_.actual_mtry_,1));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>stdMatrix(dShape(SB::ext_param_.actual_mtry_,1));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/>m&lt;SB::ext_param_.actual_mtry_;<sp/>m++)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cVector=<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(features,<sp/>splitColumns[m]);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//centre<sp/>and<sp/>scale<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCurrFeatureColumnMean=0.0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCurrFeatureColumnStd=1.0;<sp/></highlight><highlight class="comment">//default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calc<sp/>mean<sp/>on<sp/>bootstrap<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;region.size();<sp/>n++)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCurrFeatureColumnMean+=cVector[region[n]];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCurrFeatureColumnMean/=region.size();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calc<sp/>scaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_bDoScalingInTraining)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;region.size();<sp/>n++)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCurrFeatureColumnStd+=</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cVector[region[n]]-dCurrFeatureColumnMean)*(cVector[region[n]]-dCurrFeatureColumnMean);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//unbiased<sp/>std<sp/>estimator:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCurrFeatureColumnStd=<ref refid="group__FixedPointOperations_1ga22d75753836176f3d172f58be11ecc4c" kindref="member" tooltip="square root.">sqrt</ref>(dCurrFeatureColumnStd/(region.size()-1));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//dCurrFeatureColumnStd<sp/>is<sp/>still<sp/>1.0<sp/>if<sp/>we<sp/>didn&apos;t<sp/>want<sp/>scaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdMatrix(m,0)=dCurrFeatureColumnStd;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meanMatrix(m,0)=dCurrFeatureColumnMean;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>feature<sp/>matrix,<sp/>i.e.<sp/>A<sp/>(note<sp/>that<sp/>weighting<sp/>is<sp/>done<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//since<sp/>rows<sp/>can<sp/>occur<sp/>multiple<sp/>times<sp/>-&gt;<sp/>bagging)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;region.size();<sp/>n++)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xtrain(n,m)=(cVector[region[n]]-dCurrFeatureColumnMean)/dCurrFeatureColumnStd;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;middle&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>label<sp/>vector<sp/>(i.e.<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;region.size();<sp/>n++)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>checked<sp/>for/built<sp/>binary<sp/>case<sp/>further<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//class<sp/>labels<sp/>should<sp/>thus<sp/>be<sp/>either<sp/>0<sp/>or<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-&gt;<sp/>convert<sp/>to<sp/>-1<sp/>and<sp/>1<sp/>for<sp/>regression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regrLabels(n,0)=((labels[region[n]]==0)<sp/>?<sp/>-1:1);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>dLambdas(dShape(11,1));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCounter=0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLambda=-5;<sp/>nLambda&lt;=5;<sp/>nLambda++)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dLambdas[nCounter++]=pow(10.0,nLambda);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//destination<sp/>vector<sp/>for<sp/>regression<sp/>coefficients;<sp/>use<sp/>same<sp/>type<sp/>as<sp/>for<sp/>xtrain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>regrCoef(dShape(SB::ext_param_.actual_mtry_,11));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__Optimization_1gad20a4d83649e2c65d9d553105882af9f" kindref="member">ridgeRegressionSeries</ref>(xtrain,regrLabels,regrCoef,dLambdas);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dMaxRidgeSum=<ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">NumericTraits&lt;double&gt;::min</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCurrRidgeSum;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxRidgeSumAtLambdaInd=0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLambdaInd=0;<sp/>nLambdaInd&lt;11;<sp/>nLambdaInd++)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//just<sp/>sum<sp/>up<sp/>the<sp/>correct<sp/>answers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(correct<sp/>means<sp/>&gt;=intercept<sp/>for<sp/>class<sp/>1,<sp/>&lt;intercept<sp/>for<sp/>class<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(intercept=0<sp/>or<sp/>intercept=threshold<sp/>based<sp/>on<sp/>gini)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCurrRidgeSum=0.0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assemble<sp/>projection<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>dDistanceFromHyperplane(dShape(features.shape(0),1));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;region.oob_size();<sp/>n++)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dDistanceFromHyperplane(region.oob_begin()[n],0)=0.0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/>m&lt;SB::ext_param_.actual_mtry_;<sp/>m++)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dDistanceFromHyperplane(region.oob_begin()[n],0)+=</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features(region.oob_begin()[n],splitColumns[m])*regrCoef(m,nLambdaInd);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dCurrIntercept=0.0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m_bDoBestLambdaBasedOnGini)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>gini<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bgfunc(dDistanceFromHyperplane,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labels,<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.oob_begin(),<sp/>region.oob_end(),<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.classCounts());</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCurrIntercept=bgfunc.min_threshold_;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/>m&lt;SB::ext_param_.actual_mtry_;<sp/>m++)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCurrIntercept+=meanMatrix(m,0)*regrCoef(m,nLambdaInd);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;region.oob_size();<sp/>n++)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>what<sp/>lambda<sp/>performs<sp/>best<sp/>on<sp/>oob<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nClassPrediction=((dDistanceFromHyperplane(region.oob_begin()[n],0)<sp/>&gt;=dCurrIntercept)<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCurrRidgeSum+=((nClassPrediction<sp/>==<sp/>labels(region.oob_begin()[n],0))<sp/>?<sp/>1:0);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dCurrRidgeSum&gt;dMaxRidgeSum)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dMaxRidgeSum=dCurrRidgeSum;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMaxRidgeSumAtLambdaInd=nLambdaInd;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;middle2&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>Node<sp/>for<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Node&lt;i_HyperplaneNode&gt;<sp/><sp/><sp/>node(SB::ext_param_.actual_mtry_,<sp/>SB::t_data,<sp/>SB::p_data);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//normalise<sp/>coeffs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//data<sp/>was<sp/>scaled<sp/>(by<sp/>1.0<sp/>or<sp/>by<sp/>std)<sp/>-&gt;<sp/>take<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>dCoeffVector(dShape(SB::ext_param_.actual_mtry_,1));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;SB::ext_param_.actual_mtry_;<sp/>n++)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dCoeffVector(n,0)=regrCoef(n,nMaxRidgeSumAtLambdaInd)*stdMatrix(n,0);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calc<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dVnorm=<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(regrCoef,nMaxRidgeSumAtLambdaInd).norm();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;SB::ext_param_.actual_mtry_;<sp/>n++)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.weights()[n]=dCoeffVector(n,0)/dVnorm;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_normalise<sp/>coeffs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//save<sp/>the<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.column_data()[0]=SB::ext_param_.actual_mtry_;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;SB::ext_param_.actual_mtry_;<sp/>n++)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.column_data()[n+1]=splitColumns[n];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//assemble<sp/>projection<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//careful<sp/>here:<sp/>&quot;region&quot;<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>indices...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//all<sp/>the<sp/>indices<sp/>in<sp/>&quot;region&quot;<sp/>need<sp/>to<sp/>have<sp/>valid<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>from<sp/>&quot;region&quot;<sp/>space<sp/>to<sp/>original<sp/>&quot;feature&quot;<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>dDistanceFromHyperplane(dShape(features.shape(0),1));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;region.size();<sp/>n++)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dDistanceFromHyperplane(region[n],0)=0.0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/>m&lt;SB::ext_param_.actual_mtry_;<sp/>m++)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dDistanceFromHyperplane(region[n],0)+=</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features(region[n],m)*node.weights()[m];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;region.oob_size();<sp/>n++)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dDistanceFromHyperplane(region.oob_begin()[n],0)=0.0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;<sp/>m&lt;SB::ext_param_.actual_mtry_;<sp/>m++)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dDistanceFromHyperplane(region.oob_begin()[n],0)+=</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>features(region.oob_begin()[n],m)*node.weights()[m];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculate<sp/>gini<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bgfunc(dDistanceFromHyperplane,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>labels,<sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.begin(),<sp/>region.end(),<sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.classCounts());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>did<sp/>not<sp/>find<sp/>any<sp/>suitable<sp/>split</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__MathFunctions_1ga10235727f77f6dfa6af756ce20eec2f7" kindref="member">closeAtTolerance</ref>(bgfunc.min_gini_,<sp/><ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">NumericTraits&lt;double&gt;::max</ref>()))</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><ref refid="classvigra_1_1SplitBase_1abe23e7e0b73b5156c744ca0106756068" kindref="member">SB::makeTerminalNode</ref>(features,<sp/>multiClassLabels,<sp/>region,<sp/>randint);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//take<sp/>gini<sp/>threshold<sp/>here<sp/>due<sp/>to<sp/>scaling,<sp/>normalisation,<sp/>etc.<sp/>of<sp/>the<sp/>coefficients</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>node.intercept()<sp/><sp/><sp/><sp/>=<sp/>bgfunc.min_threshold_;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>SB::node_<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[0].classCounts()<sp/>=<sp/>bgfunc.bestCurrentCounts[0];</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[1].classCounts()<sp/>=<sp/>bgfunc.bestCurrentCounts[1];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[0].classCountsIsValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[1].classCountsIsValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>ranges<sp/>of<sp/>the<sp/>child<sp/>stack<sp/>entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[0].setRange(<sp/><sp/><sp/>region.begin()<sp/><sp/>,<sp/>region.begin()<sp/>+<sp/>bgfunc.min_index_<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[0].rule<sp/>=<sp/>region.rule;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[0].rule.push_back(std::make_pair(1,<sp/>1.0));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[1].setRange(<sp/><sp/><sp/>region.begin()<sp/>+<sp/>bgfunc.min_index_<sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>region.end()<sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[1].rule<sp/>=<sp/>region.rule;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>childRegions[1].rule.push_back(std::make_pair(1,<sp/>1.0));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//adjust<sp/>oob<sp/>ranges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;adjust<sp/>oob&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sort<sp/>the<sp/>oobs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(region.oob_begin(),<sp/>region.oob_end(),<sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SortSamplesByDimensions&lt;<sp/>MultiArray&lt;2,<sp/>double&gt;<sp/>&gt;<sp/>(dDistanceFromHyperplane,<sp/>0));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>split<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOOBindx;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(nOOBindx=0;<sp/>nOOBindx&lt;region.oob_size();<sp/>nOOBindx++)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dDistanceFromHyperplane(region.oob_begin()[nOOBindx],0)&gt;=node.intercept())</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>childRegions[0].set_oob_range(<sp/><sp/><sp/>region.oob_begin()<sp/><sp/>,<sp/>region.oob_begin()<sp/>+<sp/>nOOBindx<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>childRegions[1].set_oob_range(<sp/><sp/><sp/>region.oob_begin()<sp/>+<sp/>nOOBindx<sp/>,<sp/>region.oob_end()<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;end&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>outm2(region.oob_begin());outm2(nOOBindx);outm(region.oob_begin()<sp/>+<sp/>nOOBindx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_adjust<sp/>oob<sp/>ranges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i_HyperplaneNode;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="441"><highlight class="comment">/**<sp/>Standard<sp/>ridge<sp/>regression<sp/>split</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="namespacevigra_1a4843bfa9895ddff20af7279e053b3629" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RidgeSplit&lt;BestGiniOfColumn&lt;GiniCriterion&gt;<sp/>&gt;<sp/><sp/><ref refid="namespacevigra_1a4843bfa9895ddff20af7279e053b3629" kindref="member">GiniRidgeSplit</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">}<sp/></highlight><highlight class="comment">//namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>VIGRA_RANDOM_FOREST_RIDGE_SPLIT_H</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/random_forest/rf_ridge_split.hxx"/>
  </compounddef>
</doxygen>
