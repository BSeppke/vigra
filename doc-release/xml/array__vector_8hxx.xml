<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="array__vector_8hxx" kind="file">
    <compoundname>array_vector.hxx</compoundname>
    <includes refid="error_8hxx" local="yes">error.hxx</includes>
    <includes refid="memory_8hxx" local="yes">memory.hxx</includes>
    <includes refid="numerictraits_8hxx" local="yes">numerictraits.hxx</includes>
    <includes local="no">memory</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iosfwd</includes>
    <includedby refid="singular__value__decomposition_8hxx" local="yes">vigra/singular_value_decomposition.hxx</includedby>
    <includedby refid="recursiveconvolution_8hxx" local="yes">vigra/recursiveconvolution.hxx</includedby>
    <includedby refid="polynomial_8hxx" local="yes">vigra/polynomial.hxx</includedby>
    <includedby refid="splines_8hxx" local="yes">vigra/splines.hxx</includedby>
    <includedby refid="splineimageview_8hxx" local="yes">vigra/splineimageview.hxx</includedby>
    <includedby refid="imagecontainer_8hxx" local="yes">vigra/imagecontainer.hxx</includedby>
    <includedby refid="axistags_8hxx" local="yes">vigra/axistags.hxx</includedby>
    <includedby refid="boundarytensor_8hxx" local="yes">vigra/boundarytensor.hxx</includedby>
    <includedby refid="gaussians_8hxx" local="yes">vigra/gaussians.hxx</includedby>
    <includedby refid="separableconvolution_8hxx" local="yes">vigra/separableconvolution.hxx</includedby>
    <includedby refid="resampling__convolution_8hxx" local="yes">vigra/resampling_convolution.hxx</includedby>
    <includedby refid="bucket__queue_8hxx" local="yes">vigra/bucket_queue.hxx</includedby>
    <includedby refid="clebsch-gordan_8hxx" local="yes">vigra/clebsch-gordan.hxx</includedby>
    <includedby refid="codec_8hxx" local="yes">vigra/codec.hxx</includedby>
    <includedby refid="union__find_8hxx" local="yes">vigra/union_find.hxx</includedby>
    <includedby refid="eigensystem_8hxx" local="yes">vigra/eigensystem.hxx</includedby>
    <includedby refid="gradient__energy__tensor_8hxx" local="yes">vigra/gradient_energy_tensor.hxx</includedby>
    <includedby refid="imageinfo_8hxx" local="yes">vigra/imageinfo.hxx</includedby>
    <includedby refid="invariant__features3D_8hxx" local="yes">vigra/invariant_features3D.hxx</includedby>
    <includedby refid="matlab_8hxx" local="yes">vigra/matlab.hxx</includedby>
    <includedby refid="multi__convolution_8hxx" local="yes">vigra/multi_convolution.hxx</includedby>
    <includedby refid="multi__distance_8hxx" local="yes">vigra/multi_distance.hxx</includedby>
    <includedby refid="multi__morphology_8hxx" local="yes">vigra/multi_morphology.hxx</includedby>
    <includedby refid="noise__normalization_8hxx" local="yes">vigra/noise_normalization.hxx</includedby>
    <includedby refid="numpy__array_8hxx" local="yes">vigra/numpy_array.hxx</includedby>
    <includedby refid="numpy__array__taggedshape_8hxx" local="yes">vigra/numpy_array_taggedshape.hxx</includedby>
    <includedby refid="polygon_8hxx" local="yes">vigra/polygon.hxx</includedby>
    <includedby refid="quadprog_8hxx" local="yes">vigra/quadprog.hxx</includedby>
    <includedby refid="random_8hxx" local="yes">vigra/random.hxx</includedby>
    <includedby refid="rf__decisionTree_8hxx" local="yes">vigra/random_forest/rf_decisionTree.hxx</includedby>
    <includedby refid="rf__nodeproxy_8hxx" local="yes">vigra/random_forest/rf_nodeproxy.hxx</includedby>
    <includedby refid="rf__region_8hxx" local="yes">vigra/random_forest/rf_region.hxx</includedby>
    <includedby refid="sampling_8hxx" local="yes">vigra/sampling.hxx</includedby>
    <includedby refid="rf__split_8hxx" local="yes">vigra/random_forest/rf_split.hxx</includedby>
    <includedby refid="random__forest_8hxx" local="yes">vigra/random_forest.hxx</includedby>
    <includedby refid="random__forest__deprec_8hxx" local="yes">vigra/random_forest_deprec.hxx</includedby>
    <includedby refid="rfftw_8hxx" local="yes">vigra/rfftw.hxx</includedby>
    <includedby refid="sifImport_8hxx" local="yes">vigra/sifImport.hxx</includedby>
    <includedby refid="slanted__edge__mtf_8hxx" local="yes">vigra/slanted_edge_mtf.hxx</includedby>
    <includedby refid="wigner-matrix_8hxx" local="yes">vigra/wigner-matrix.hxx</includedby>
    <incdepgraph>
      <node id="398">
        <label>limits</label>
      </node>
      <node id="403">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="396" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
      </node>
      <node id="404">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="390">
        <label>stdexcept</label>
      </node>
      <node id="392">
        <label>string</label>
      </node>
      <node id="401">
        <label>cfloat</label>
      </node>
      <node id="394">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="393">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="390" relation="include">
        </childnode>
      </node>
      <node id="400">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="401" relation="include">
        </childnode>
        <childnode refid="402" relation="include">
        </childnode>
        <childnode refid="396" relation="include">
        </childnode>
        <childnode refid="403" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
      </node>
      <node id="391">
        <label>sstream</label>
      </node>
      <node id="389">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
        <childnode refid="392" relation="include">
        </childnode>
        <childnode refid="393" relation="include">
        </childnode>
      </node>
      <node id="388">
        <label>vigra/array_vector.hxx</label>
        <link refid="array_vector.hxx"/>
        <childnode refid="389" relation="include">
        </childnode>
        <childnode refid="395" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="406" relation="include">
        </childnode>
      </node>
      <node id="406">
        <label>iosfwd</label>
      </node>
      <node id="397">
        <label>climits</label>
      </node>
      <node id="396">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="393" relation="include">
        </childnode>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="399" relation="include">
        </childnode>
      </node>
      <node id="402">
        <label>complex</label>
      </node>
      <node id="399">
        <label>algorithm</label>
      </node>
      <node id="395">
        <label>memory.hxx</label>
        <link refid="memory_8hxx_source"/>
        <childnode refid="396" relation="include">
        </childnode>
      </node>
      <node id="405">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="422">
        <label>vigra/splineimageview.hxx</label>
        <link refid="splineimageview_8hxx_source"/>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="423" relation="include">
        </childnode>
      </node>
      <node id="410">
        <label>vigra/affine_registration.hxx</label>
        <link refid="affine__registration_8hxx_source"/>
      </node>
      <node id="428">
        <label>vigra/symmetry.hxx</label>
        <link refid="symmetry_8hxx_source"/>
      </node>
      <node id="454">
        <label>vigra/orientedtensorfilters.hxx</label>
        <link refid="orientedtensorfilters_8hxx_source"/>
      </node>
      <node id="430">
        <label>vigra/resizeimage.hxx</label>
        <link refid="resizeimage_8hxx_source"/>
        <childnode refid="431" relation="include">
        </childnode>
        <childnode refid="437" relation="include">
        </childnode>
      </node>
      <node id="439">
        <label>vigra/splines.hxx</label>
        <link refid="splines_8hxx_source"/>
        <childnode refid="422" relation="include">
        </childnode>
        <childnode refid="430" relation="include">
        </childnode>
      </node>
      <node id="469">
        <label>vigra/invariant_features3D.hxx</label>
        <link refid="invariant__features3D_8hxx_source"/>
      </node>
      <node id="423">
        <label>vigra/affinegeometry.hxx</label>
        <link refid="affinegeometry_8hxx_source"/>
      </node>
      <node id="414">
        <label>vigra/noise_normalization.hxx</label>
        <link refid="noise__normalization_8hxx_source"/>
      </node>
      <node id="415">
        <label>vigra/quadprog.hxx</label>
        <link refid="quadprog_8hxx_source"/>
      </node>
      <node id="457">
        <label>vigra/clebsch-gordan.hxx</label>
        <link refid="clebsch-gordan_8hxx_source"/>
        <childnode refid="458" relation="include">
        </childnode>
      </node>
      <node id="456">
        <label>vigra/bucket_queue.hxx</label>
        <link refid="bucket__queue_8hxx_source"/>
        <childnode refid="433" relation="include">
        </childnode>
      </node>
      <node id="478">
        <label>vigra/random_forest/rf_region.hxx</label>
        <link refid="rf__region_8hxx_source"/>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
      </node>
      <node id="447">
        <label>vigra/numpy_array_taggedshape.hxx</label>
        <link refid="numpy__array__taggedshape_8hxx_source"/>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
      </node>
      <node id="437">
        <label>vigra/multi_resize.hxx</label>
        <link refid="multi__resize_8hxx_source"/>
      </node>
      <node id="473">
        <label>vigra/polygon.hxx</label>
        <link refid="polygon_8hxx_source"/>
      </node>
      <node id="413">
        <label>vigra/linear_algebra.hxx</label>
        <link refid="linear__algebra_8hxx_source"/>
      </node>
      <node id="452">
        <label>vigra/separableconvolution.hxx</label>
        <link refid="separableconvolution_8hxx_source"/>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="430" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
      </node>
      <node id="466">
        <label>vigra/localminmax.hxx</label>
        <link refid="localminmax_8hxx_source"/>
        <childnode refid="467" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
      </node>
      <node id="477">
        <label>vigra/random_forest/rf_split.hxx</label>
        <link refid="rf__split_8hxx_source"/>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
      </node>
      <node id="441">
        <label>vigra/imagecontainer.hxx</label>
        <link refid="imagecontainer_8hxx_source"/>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="443" relation="include">
        </childnode>
        <childnode refid="445" relation="include">
        </childnode>
      </node>
      <node id="445">
        <label>vigra/gaborfilter.hxx</label>
        <link refid="gaborfilter_8hxx_source"/>
      </node>
      <node id="468">
        <label>vigra/labelvolume.hxx</label>
        <link refid="labelvolume_8hxx_source"/>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="435" relation="include">
        </childnode>
      </node>
      <node id="419">
        <label>vigra/random_forest_hdf5_impex.hxx</label>
        <link refid="random__forest__hdf5__impex_8hxx_source"/>
      </node>
      <node id="431">
        <label>vigra/stdimagefunctions.hxx</label>
        <link refid="stdimagefunctions_8hxx_source"/>
        <childnode refid="432" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="433" relation="include">
        </childnode>
        <childnode refid="434" relation="include">
        </childnode>
      </node>
      <node id="409">
        <label>vigra/linear_solve.hxx</label>
        <link refid="linear__solve_8hxx_source"/>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="416" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
      </node>
      <node id="421">
        <label>vigra/recursiveconvolution.hxx</label>
        <link refid="recursiveconvolution_8hxx_source"/>
        <childnode refid="422" relation="include">
        </childnode>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="430" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
      </node>
      <node id="435">
        <label>vigra/watersheds3d.hxx</label>
        <link refid="watersheds3d_8hxx_source"/>
      </node>
      <node id="408">
        <label>vigra/singular_value_decomposition.hxx</label>
        <link refid="singular__value__decomposition_8hxx_source"/>
        <childnode refid="409" relation="include">
        </childnode>
        <childnode refid="416" relation="include">
        </childnode>
        <childnode refid="420" relation="include">
        </childnode>
      </node>
      <node id="465">
        <label>vigra/labelimage.hxx</label>
        <link refid="labelimage_8hxx_source"/>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
      </node>
      <node id="464">
        <label>vigra/union_find.hxx</label>
        <link refid="union__find_8hxx_source"/>
        <childnode refid="465" relation="include">
        </childnode>
        <childnode refid="468" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
      </node>
      <node id="425">
        <label>vigra/boundarytensor.hxx</label>
        <link refid="boundarytensor_8hxx_source"/>
      </node>
      <node id="451">
        <label>vigra/gaussians.hxx</label>
        <link refid="gaussians_8hxx_source"/>
        <childnode refid="452" relation="include">
        </childnode>
      </node>
      <node id="411">
        <label>vigra/edgedetection.hxx</label>
        <link refid="edgedetection_8hxx_source"/>
        <childnode refid="412" relation="include">
        </childnode>
      </node>
      <node id="458">
        <label>vigra/wigner-matrix.hxx</label>
        <link refid="wigner-matrix_8hxx_source"/>
      </node>
      <node id="444">
        <label>vigra/multi_fft.hxx</label>
        <link refid="multi__fft_8hxx_source"/>
      </node>
      <node id="424">
        <label>vigra/convolution.hxx</label>
        <link refid="convolution_8hxx_source"/>
        <childnode refid="425" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="427" relation="include">
        </childnode>
        <childnode refid="428" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
      </node>
      <node id="432">
        <label>vigra/nonlineardiffusion.hxx</label>
        <link refid="nonlineardiffusion_8hxx_source"/>
        <childnode refid="424" relation="include">
        </childnode>
      </node>
      <node id="450">
        <label>vigra/numpy_array_converters.hxx</label>
        <link refid="numpy__array__converters_8hxx_source"/>
      </node>
      <node id="459">
        <label>vigra/codec.hxx</label>
        <link refid="codec_8hxx_source"/>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="461" relation="include">
        </childnode>
      </node>
      <node id="442">
        <label>vigra/resampling_convolution.hxx</label>
        <link refid="resampling__convolution_8hxx_source"/>
        <childnode refid="430" relation="include">
        </childnode>
      </node>
      <node id="412">
        <label>vigra/slanted_edge_mtf.hxx</label>
        <link refid="slanted__edge__mtf_8hxx_source"/>
      </node>
      <node id="455">
        <label>vigra/multi_convolution.hxx</label>
        <link refid="multi__convolution_8hxx_source"/>
      </node>
      <node id="480">
        <label>vigra/random_forest_deprec.hxx</label>
        <link refid="random__forest__deprec_8hxx_source"/>
      </node>
      <node id="482">
        <label>vigra/sifImport.hxx</label>
        <link refid="sifImport_8hxx_source"/>
      </node>
      <node id="417">
        <label>vigra/random_forest/rf_ridge_split.hxx</label>
        <link refid="rf__ridge__split_8hxx_source"/>
        <childnode refid="418" relation="include">
        </childnode>
      </node>
      <node id="476">
        <label>vigra/random_forest/rf_nodeproxy.hxx</label>
        <link refid="rf__nodeproxy_8hxx_source"/>
        <childnode refid="475" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
      </node>
      <node id="420">
        <label>vigra/unsupervised_decomposition.hxx</label>
        <link refid="unsupervised__decomposition_8hxx_source"/>
      </node>
      <node id="418">
        <label>vigra/random_forest.hxx</label>
        <link refid="random__forest_8hxx_source"/>
        <childnode refid="419" relation="include">
        </childnode>
      </node>
      <node id="460">
        <label>vigra/imageinfo.hxx</label>
        <link refid="imageinfo_8hxx_source"/>
        <childnode refid="461" relation="include">
        </childnode>
      </node>
      <node id="416">
        <label>vigra/regression.hxx</label>
        <link refid="regression_8hxx_source"/>
        <childnode refid="417" relation="include">
        </childnode>
      </node>
      <node id="470">
        <label>vigra/matlab.hxx</label>
        <link refid="matlab_8hxx_source"/>
      </node>
      <node id="446">
        <label>vigra/axistags.hxx</label>
        <link refid="axistags_8hxx_source"/>
        <childnode refid="447" relation="include">
        </childnode>
      </node>
      <node id="481">
        <label>vigra/rfftw.hxx</label>
        <link refid="rfftw_8hxx_source"/>
      </node>
      <node id="474">
        <label>vigra/random.hxx</label>
        <link refid="random_8hxx_source"/>
        <childnode refid="475" relation="include">
        </childnode>
        <childnode refid="476" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
        <childnode refid="420" relation="include">
        </childnode>
      </node>
      <node id="475">
        <label>vigra/random_forest/rf_decisionTree.hxx</label>
        <link refid="rf__decisionTree_8hxx_source"/>
        <childnode refid="418" relation="include">
        </childnode>
      </node>
      <node id="407">
        <label>vigra/array_vector.hxx</label>
        <link refid="array_vector.hxx"/>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="421" relation="include">
        </childnode>
        <childnode refid="438" relation="include">
        </childnode>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="422" relation="include">
        </childnode>
        <childnode refid="441" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="425" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="442" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
        <childnode refid="427" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="469" relation="include">
        </childnode>
        <childnode refid="470" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="471" relation="include">
        </childnode>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="474" relation="include">
        </childnode>
        <childnode refid="475" relation="include">
        </childnode>
        <childnode refid="476" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="480" relation="include">
        </childnode>
        <childnode refid="481" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
      </node>
      <node id="471">
        <label>vigra/multi_distance.hxx</label>
        <link refid="multi__distance_8hxx_source"/>
        <childnode refid="472" relation="include">
        </childnode>
      </node>
      <node id="429">
        <label>vigra/tv_filter.hxx</label>
        <link refid="tv__filter_8hxx_source"/>
      </node>
      <node id="461">
        <label>vigra/impex.hxx</label>
        <link refid="impex_8hxx"/>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="463" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
      </node>
      <node id="472">
        <label>vigra/multi_morphology.hxx</label>
        <link refid="multi__morphology_8hxx_source"/>
      </node>
      <node id="479">
        <label>vigra/sampling.hxx</label>
        <link refid="sampling_8hxx_source"/>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
      </node>
      <node id="433">
        <label>vigra/seededregiongrowing.hxx</label>
        <link refid="seededregiongrowing_8hxx_source"/>
        <childnode refid="434" relation="include">
        </childnode>
        <childnode refid="436" relation="include">
        </childnode>
      </node>
      <node id="467">
        <label>vigra/multi_localminmax.hxx</label>
        <link refid="multi__localminmax_8hxx_source"/>
        <childnode refid="435" relation="include">
        </childnode>
      </node>
      <node id="434">
        <label>vigra/seededregiongrowing3d.hxx</label>
        <link refid="seededregiongrowing3d_8hxx_source"/>
        <childnode refid="435" relation="include">
        </childnode>
      </node>
      <node id="427">
        <label>vigra/gradient_energy_tensor.hxx</label>
        <link refid="gradient__energy__tensor_8hxx_source"/>
      </node>
      <node id="448">
        <label>vigra/numpy_array_traits.hxx</label>
        <link refid="numpy__array__traits_8hxx_source"/>
        <childnode refid="449" relation="include">
        </childnode>
      </node>
      <node id="453">
        <label>vigra/stdconvolution.hxx</label>
        <link refid="stdconvolution_8hxx_source"/>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="454" relation="include">
        </childnode>
      </node>
      <node id="436">
        <label>vigra/watersheds.hxx</label>
        <link refid="watersheds_8hxx_source"/>
        <childnode refid="435" relation="include">
        </childnode>
      </node>
      <node id="440">
        <label>vigra/eigensystem.hxx</label>
        <link refid="eigensystem_8hxx_source"/>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
      </node>
      <node id="426">
        <label>vigra/cornerdetection.hxx</label>
        <link refid="cornerdetection_8hxx_source"/>
      </node>
      <node id="462">
        <label>vigra/hdf5impex.hxx</label>
        <link refid="hdf5impex_8hxx_source"/>
        <childnode refid="419" relation="include">
        </childnode>
      </node>
      <node id="463">
        <label>vigra/multi_impex.hxx</label>
        <link refid="multi__impex_8hxx_source"/>
        <childnode refid="462" relation="include">
        </childnode>
      </node>
      <node id="438">
        <label>vigra/polynomial.hxx</label>
        <link refid="polynomial_8hxx_source"/>
        <childnode refid="439" relation="include">
        </childnode>
        <childnode refid="440" relation="include">
        </childnode>
      </node>
      <node id="449">
        <label>vigra/numpy_array.hxx</label>
        <link refid="numpy__array_8hxx_source"/>
        <childnode refid="450" relation="include">
        </childnode>
      </node>
      <node id="443">
        <label>vigra/fftw3.hxx</label>
        <link refid="fftw3_8hxx_source"/>
        <childnode refid="444" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classvigra_1_1ArrayVector" prot="public">vigra::ArrayVector</innerclass>
    <innerclass refid="classvigra_1_1ArrayVectorView" prot="public">vigra::ArrayVectorView</innerclass>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="array__vector_8hxx_1ab8d99bf80e6ae6e0fb26656b1fcf8697" prot="public" static="no">
        <name>VIGRA_ASSERT_INSIDE</name>
        <param><defname>diff</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/array_vector.hxx" line="51" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/array_vector.hxx" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2002-2004<sp/>by<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_ARRAY_VECTOR_HXX</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_ARRAY_VECTOR_HXX</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memory.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;numerictraits.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VIGRA_CHECK_BOUNDS</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_ASSERT_INSIDE(diff)<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/>vigra_precondition(diff<sp/>&gt;=<sp/>0,<sp/>&quot;Index<sp/>out<sp/>of<sp/>bounds&quot;);\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/>vigra_precondition((unsigned<sp/>int)diff<sp/>&lt;<sp/>size_,<sp/>&quot;Index<sp/>out<sp/>of<sp/>bounds&quot;);</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_ASSERT_INSIDE(diff)</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc<sp/>=<sp/>std::allocator&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ArrayVector;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">/**<sp/>Provide<sp/>STL<sp/>conforming<sp/>interface<sp/>for<sp/>C-arrays.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>template<sp/>implements<sp/>much<sp/>of<sp/>the<sp/>functionality<sp/>of<sp/>&lt;tt&gt;&lt;a<sp/>href=&quot;http://www.sgi.com/tech/stl/Vector.html&quot;&gt;std::vector&lt;/a&gt;&lt;/tt&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>on<sp/>top<sp/>of<sp/>a<sp/>C-array.<sp/>&lt;tt&gt;ArrayVectorView&lt;/tt&gt;<sp/>does<sp/>not<sp/>manage<sp/>the<sp/>memory</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>refers<sp/>to<sp/>(i.e.<sp/>it<sp/>does<sp/>not<sp/>allocate<sp/>or<sp/>deallocate<sp/>any<sp/>memory).</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/>Thus,<sp/>if<sp/>the<sp/>underlying<sp/>memory<sp/>changes,<sp/>all<sp/>dependent<sp/>&lt;tt&gt;ArrayVectorView&lt;/tt&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>objects<sp/>are<sp/>invalidated.<sp/>This<sp/>is<sp/>especially<sp/>important<sp/>when<sp/>&lt;tt&gt;ArrayVectorView&lt;/tt&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>used<sp/>as<sp/>a<sp/>base<sp/>class<sp/>for<sp/>&lt;tt&gt;ArrayVector&lt;/tt&gt;,<sp/>where<sp/>several<sp/>functions</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>(e.g.<sp/>resize(),<sp/>insert())<sp/>can<sp/>allocate<sp/>new<sp/>memory<sp/>and<sp/>thus<sp/>invalidate<sp/>the</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>dependent<sp/>views.<sp/>The<sp/>rules<sp/>what<sp/>operations<sp/>invalidate<sp/>view<sp/>objects<sp/>are<sp/>the</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>same<sp/>as<sp/>the<sp/>rules<sp/>concerning<sp/>standard<sp/>iterators.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/array_vector.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="74"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="76" refid="classvigra_1_1ArrayVectorView" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;T&gt;</ref><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>default<sp/>constructor</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/>&amp;<sp/>reference;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>const_reference;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/>*<sp/>pointer;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>const_pointer;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/>*<sp/>iterator;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>const_iterator;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::size_t<sp/>size_type;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::ptrdiff_t<sp/>difference_type;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;iterator&gt;<sp/>reverse_iterator;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;const_iterator&gt;<sp/>const_reverse_iterator;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>default<sp/>constructor.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View<sp/>contains<sp/>NULL<sp/>pointer.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classvigra_1_1ArrayVectorView_1a6f4d485a0df415fe662634557091ada2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVectorView_1a6f4d485a0df415fe662634557091ada2" kindref="member">ArrayVectorView</ref>()</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>size_(0),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_(0)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>for<sp/>given<sp/>array<sp/>\a<sp/>data<sp/>of<sp/>length<sp/>\a<sp/>size.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;data,<sp/>data+size&lt;/tt&gt;<sp/>must<sp/>form<sp/>a<sp/>valid<sp/>range.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classvigra_1_1ArrayVectorView_1ae63a72e75eb5530708b213991e5f52ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVectorView_1a6f4d485a0df415fe662634557091ada2" kindref="member">ArrayVectorView</ref>(<sp/>size_type<sp/><ref refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" kindref="member">size</ref>,<sp/>pointer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>size_(size),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_(data)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>constructor.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="classvigra_1_1ArrayVectorView_1aeda1e3dc582270e2f3160b10accd60a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVectorView_1a6f4d485a0df415fe662634557091ada2" kindref="member">ArrayVectorView</ref>(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>size_(rhs.size_),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_(rhs.data_)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>assignment.<sp/>There<sp/>are<sp/>3<sp/>cases:</highlight></codeline>
<codeline lineno="120"><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;ul&gt;</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>When<sp/>this<sp/>&lt;tt&gt;ArrayVectorView&lt;/tt&gt;<sp/>does<sp/>not<sp/>point<sp/>to<sp/>valid<sp/>data</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(e.g.<sp/>after<sp/>default<sp/>construction),<sp/>it<sp/>becomes<sp/>a<sp/>copy<sp/>of<sp/>\a<sp/>rhs.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>When<sp/>the<sp/>shapes<sp/>of<sp/>the<sp/>two<sp/>arrays<sp/>match,<sp/>the<sp/>array<sp/>contents</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(not<sp/>the<sp/>pointers)<sp/>are<sp/>copied.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>Otherwise,<sp/>a<sp/>&lt;tt&gt;PreconditionViolation&lt;/tt&gt;<sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/ul&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1ArrayVectorView_1a13c9ed22aedc29c231cce99cafd28589" kindref="member">operator=</ref>(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>assignment.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>the<sp/>shapes<sp/>of<sp/>the<sp/>two<sp/>arrays<sp/>match,<sp/>the<sp/>array<sp/>contents</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(not<sp/>the<sp/>pointers)<sp/>are<sp/>copied.<sp/>Otherwise,<sp/>a<sp/>&lt;tt&gt;PreconditionViolation&lt;/tt&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="137" refid="classvigra_1_1ArrayVectorView_1a4b9aba5729d69218bcd106adf4fbb5fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1ArrayVectorView_1a13c9ed22aedc29c231cce99cafd28589" kindref="member">operator=</ref>(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyImpl(rhs);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Overwrite<sp/>all<sp/>array<sp/>elements<sp/>with<sp/>the<sp/>value<sp/>\a<sp/>initial.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="146" refid="classvigra_1_1ArrayVectorView_1a7c4d444ab995dc9aebc150246770bbf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a7c4d444ab995dc9aebc150246770bbf5" kindref="member">init</ref>(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>initial)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(<ref refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" kindref="member">begin</ref>(),<sp/><ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>(),<sp/>initial);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>array<sp/>elements.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>the<sp/>shapes<sp/>of<sp/>the<sp/>two<sp/>arrays<sp/>match,<sp/>the<sp/>array<sp/>contents</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(not<sp/>the<sp/>pointers)<sp/>are<sp/>copied.<sp/>Otherwise,<sp/>a<sp/>&lt;tt&gt;PreconditionViolation&lt;/tt&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classvigra_1_1ArrayVectorView_1a22e41812caa34ddcf261a6854f4c7276" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a22e41812caa34ddcf261a6854f4c7276" kindref="member">copy</ref>(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_<sp/>!=<sp/>rhs.data_)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyImpl(rhs);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>array<sp/>elements.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>the<sp/>shapes<sp/>of<sp/>the<sp/>two<sp/>arrays<sp/>match,<sp/>the<sp/>array<sp/>contents</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(not<sp/>the<sp/>pointers)<sp/>are<sp/>copied.<sp/>Otherwise,<sp/>a<sp/>&lt;tt&gt;PreconditionViolation&lt;/tt&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="168" refid="classvigra_1_1ArrayVectorView_1a17ea55c9d3a1bc768139f0d80ede9e7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a22e41812caa34ddcf261a6854f4c7276" kindref="member">copy</ref>(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyImpl(rhs);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Swap<sp/>array<sp/>elements.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>the<sp/>shapes<sp/>of<sp/>the<sp/>two<sp/>arrays<sp/>match,<sp/>the<sp/>array<sp/>contents</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(not<sp/>the<sp/>pointers)<sp/>are<sp/>swapped.<sp/>Otherwise,<sp/>a<sp/>&lt;tt&gt;PreconditionViolation&lt;/tt&gt;</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classvigra_1_1ArrayVectorView_1ad5702bd49b194091b442f81355419b46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1ad5702bd49b194091b442f81355419b46" kindref="member">swapData</ref>(<ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/>rhs)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_<sp/>!=<sp/>rhs.data_)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapDataImpl(rhs);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Swap<sp/>array<sp/>elements.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>the<sp/>shapes<sp/>of<sp/>the<sp/>two<sp/>arrays<sp/>match,<sp/>the<sp/>array<sp/>contents</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(not<sp/>the<sp/>pointers)<sp/>are<sp/>swapped.<sp/>Otherwise,<sp/>a<sp/>&lt;tt&gt;PreconditionViolation&lt;/tt&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="190" refid="classvigra_1_1ArrayVectorView_1a6feb3733405e5900f924abbef3533763" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1ad5702bd49b194091b442f81355419b46" kindref="member">swapData</ref>(<ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/>rhs)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swapDataImpl(rhs);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>&lt;tt&gt;ArrayVectorView&lt;/tt&gt;<sp/>referring<sp/>to<sp/>a<sp/>subarray.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>begin<sp/>and<sp/>\a<sp/>end<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>sub-range<sp/>of<sp/>the<sp/>current<sp/>array.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Otherwise,<sp/>a<sp/>&lt;tt&gt;PreconditionViolation&lt;/tt&gt;</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="classvigra_1_1ArrayVectorView_1aed17bfb11fdbac09a00c0c217047e30d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/><ref refid="classvigra_1_1ArrayVectorView_1aed17bfb11fdbac09a00c0c217047e30d" kindref="member">subarray</ref><sp/>(size_type<sp/><ref refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" kindref="member">begin</ref>,<sp/>size_type<sp/><ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="201"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(begin<sp/>&lt;=<sp/>end<sp/>&amp;&amp;<sp/>end<sp/>&lt;=<sp/>size_,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ArrayVectorView::subarray():<sp/>Limits<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref>(end-begin,<sp/>data_<sp/>+<sp/>begin);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>contained<sp/>const<sp/>pointer<sp/>to<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const_pointer<sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="210"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>contained<sp/>pointer<sp/>to<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classvigra_1_1ArrayVectorView_1a36e4d11a00a3572c87bf7e913e9b5ca1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>pointer<sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>()</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>const<sp/>iterator<sp/>referring<sp/>to<sp/>the<sp/>first<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const_iterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" kindref="member">begin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="224"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>iterator<sp/>referring<sp/>to<sp/>the<sp/>first<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="classvigra_1_1ArrayVectorView_1ad69bd11391be1a1dba5c8202259664f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>iterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" kindref="member">begin</ref>()</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>const<sp/>iterator<sp/>pointing<sp/>beyond<sp/>the<sp/>last<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const_iterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="238"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>()<sp/>+<sp/><ref refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>iterator<sp/>pointing<sp/>beyond<sp/>the<sp/>last<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classvigra_1_1ArrayVectorView_1acad38d52497a975bfb6f2f6acd76631f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>iterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>()</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>()<sp/>+<sp/><ref refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>reverse<sp/>iterator<sp/>referring<sp/>to<sp/>the<sp/>last<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="classvigra_1_1ArrayVectorView_1acea44ed500a54b2bb93e16b86e81afa8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>reverse_iterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1acea44ed500a54b2bb93e16b86e81afa8" kindref="member">rbegin</ref>()</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(reverse_iterator(<ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>()));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>const<sp/>reverse<sp/>iterator<sp/>referring<sp/>to<sp/>the<sp/>last<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classvigra_1_1ArrayVectorView_1a04886aa70c34d66738e78bf70c675e66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const_reverse_iterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1acea44ed500a54b2bb93e16b86e81afa8" kindref="member">rbegin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="259"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(const_reverse_iterator(<ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>()));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>reverse<sp/>iterator<sp/>pointing<sp/>before<sp/>the<sp/>first<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="classvigra_1_1ArrayVectorView_1a68c599ddcbfddc65170de524ac165e44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>reverse_iterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1a68c599ddcbfddc65170de524ac165e44" kindref="member">rend</ref>()</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(reverse_iterator(<ref refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" kindref="member">begin</ref>()));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Get<sp/>const<sp/>reverse<sp/>iterator<sp/>pointing<sp/>before<sp/>the<sp/>first<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="classvigra_1_1ArrayVectorView_1ab3c414470d5cea2986cfab7a90146cb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>const_reverse_iterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1a68c599ddcbfddc65170de524ac165e44" kindref="member">rend</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="273"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(const_reverse_iterator(<ref refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" kindref="member">begin</ref>()));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Access<sp/>first<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="classvigra_1_1ArrayVectorView_1a6a48363b4355f6f5b441637774f79a59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classvigra_1_1ArrayVectorView_1a6a48363b4355f6f5b441637774f79a59" kindref="member">front</ref>()</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*data_;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Read<sp/>first<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="classvigra_1_1ArrayVectorView_1a1b5b57596df7e42e35dcd646906cb438" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reference<sp/><ref refid="classvigra_1_1ArrayVectorView_1a6a48363b4355f6f5b441637774f79a59" kindref="member">front</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="287"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*data_;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Access<sp/>last<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="classvigra_1_1ArrayVectorView_1af71e6c1eccbc12e9339c00a86a981a43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classvigra_1_1ArrayVectorView_1af71e6c1eccbc12e9339c00a86a981a43" kindref="member">back</ref>()</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[size_-1];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Read<sp/>last<sp/>array<sp/>element.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="classvigra_1_1ArrayVectorView_1af181aa8839ff8d5867941fd0f0d214b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reference<sp/><ref refid="classvigra_1_1ArrayVectorView_1af71e6c1eccbc12e9339c00a86a981a43" kindref="member">back</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="301"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[size_-1];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Access<sp/>array<sp/>element<sp/>\a<sp/>i.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="classvigra_1_1ArrayVectorView_1aa2454492558f0f1b146ed554017ca033" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classvigra_1_1ArrayVectorView_1aa2454492558f0f1b146ed554017ca033" kindref="member">operator[]</ref>(<sp/>difference_type<sp/>i<sp/>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_ASSERT_INSIDE(i);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>()[i];</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Read<sp/>array<sp/>element<sp/>\a<sp/>i.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="classvigra_1_1ArrayVectorView_1a3b782fefbfb41b6f90a060a292839975" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reference<sp/><ref refid="classvigra_1_1ArrayVectorView_1aa2454492558f0f1b146ed554017ca033" kindref="member">operator[]</ref>(<sp/>difference_type<sp/>i<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="316"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VIGRA_ASSERT_INSIDE(i);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>()[i];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Equivalent<sp/>to<sp/>&lt;tt&gt;size()<sp/>==<sp/>0&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="classvigra_1_1ArrayVectorView_1ac6e61de369e994009e36f344f99c15ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1ac6e61de369e994009e36f344f99c15ad" kindref="member">empty</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="324"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>array.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/><ref refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="331"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Check<sp/>for<sp/>element-wise<sp/>equality<sp/>of<sp/>two<sp/>array.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Also<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;<sp/>if<sp/>the<sp/>two<sp/>arrays<sp/>have<sp/>different<sp/>sizes.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a6184c70970833b70ee7deaf46563f100" kindref="member">operator==</ref>(<ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>check<sp/>whether<sp/>two<sp/>arrays<sp/>are<sp/>not<sp/>elementwise<sp/>equal.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Also<sp/>returns<sp/>&lt;tt&gt;true&lt;/tt&gt;<sp/>if<sp/>the<sp/>two<sp/>arrays<sp/>have<sp/>different<sp/>sizes.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="345" refid="classvigra_1_1ArrayVectorView_1a069be9878098beb2362643efac6a2505" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a069be9878098beb2362643efac6a2505" kindref="member">operator!=</ref>(<ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="346"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="classvigra_1_1ArrayVectorView_1a6184c70970833b70ee7deaf46563f100" kindref="member">operator==</ref>(rhs);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>check<sp/>whether<sp/>the<sp/>given<sp/>point<sp/>is<sp/>in<sp/>the<sp/>array<sp/>range.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="classvigra_1_1ArrayVectorView_1acc16a9ac0801c380fcfe1841566efb99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1acc16a9ac0801c380fcfe1841566efb99" kindref="member">isInside</ref><sp/>(difference_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="353"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>p<sp/>&lt;<sp/>size_;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView &lt;U&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copyImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView</ref><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swapDataImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView &lt;U&gt;</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>size_;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data_;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">ArrayVectorView&lt;T&gt;<sp/>&amp;<sp/><ref refid="classvigra_1_1ArrayVectorView_1a13c9ed22aedc29c231cce99cafd28589" kindref="member">ArrayVectorView&lt;T&gt;::operator=</ref>(<sp/>ArrayVectorView&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_<sp/>=<sp/>rhs.size_;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_<sp/>=<sp/>rhs.data_;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_<sp/>!=<sp/>rhs.data_)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyImpl(rhs);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="386" refid="classvigra_1_1ArrayVectorView_1a6184c70970833b70ee7deaf46563f100" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a6184c70970833b70ee7deaf46563f100" kindref="member">ArrayVectorView&lt;T&gt;::operator==</ref>(<ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="387"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size()<sp/>!=<sp/>rhs.<ref refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;size();<sp/>++k)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_[k]<sp/>!=<sp/>rhs[k])</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView &lt;T&gt;::copyImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView</ref><sp/>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition<sp/>(size()<sp/>==<sp/>rhs.size(),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ArrayVectorView::copy():<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>copy()<sp/>or<sp/>copy_backward()<sp/>according<sp/>to<sp/>possible<sp/>overlap<sp/>of<sp/>this<sp/>and<sp/>rhs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_<sp/>&lt;=<sp/>rhs.data())</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(rhs.begin(),<sp/>rhs.end(),<sp/>begin());</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_backward(rhs.begin(),<sp/>rhs.end(),<sp/>end());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">ArrayVectorView<sp/>&lt;T&gt;::copyImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayVectorView<sp/>&lt;U&gt;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition<sp/>(size()<sp/>==<sp/>rhs.size(),</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ArrayVectorView::copy():<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(rhs.begin(),<sp/>rhs.end(),<sp/>begin());</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">ArrayVectorView<sp/>&lt;T&gt;::swapDataImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayVectorView<sp/>&lt;U&gt;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition<sp/>(size<sp/>()<sp/>==<sp/>rhs.size()<sp/>(),</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ArrayVectorView::swapData():<sp/>size<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_<sp/>+<sp/>size_<sp/>&lt;=<sp/>rhs.data_<sp/>||<sp/>rhs.data_<sp/>+<sp/>size_<sp/>&lt;=<sp/>data_)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;size_;<sp/>++k)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(data_[k],<sp/>rhs.data_[k]);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;T&gt;<sp/>t(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyImpl(rhs);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.copyImpl(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="446"><highlight class="comment">/**<sp/>Replacement<sp/>for<sp/>&lt;tt&gt;std::vector&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"></highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>template<sp/>implements<sp/>the<sp/>same<sp/>functionality<sp/>as<sp/>&lt;tt&gt;a<sp/>href=&quot;http://www.sgi.com/tech/stl/Vector.html&quot;&gt;std::vector&lt;/a&gt;&lt;/tt&gt;<sp/>(see<sp/>there<sp/>for<sp/>detailed<sp/>documentation).</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/>However,<sp/>it<sp/>gives<sp/>two<sp/>useful<sp/>guarantees,<sp/>that<sp/>&lt;tt&gt;std::vector&lt;/tt&gt;<sp/>fails</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>provide:</highlight></codeline>
<codeline lineno="451"><highlight class="comment"></highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;ul&gt;</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;The<sp/>memory<sp/>is<sp/>always<sp/>allocated<sp/>as<sp/>one<sp/>contiguous<sp/>piece.&lt;/li&gt;</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;The<sp/>iterator<sp/>is<sp/>always<sp/>a<sp/>&lt;TT&gt;T<sp/>*&lt;/TT&gt;<sp/>&lt;/li&gt;</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/ul&gt;</highlight></codeline>
<codeline lineno="456"><highlight class="comment"></highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>means<sp/>that<sp/>memory<sp/>managed<sp/>by<sp/>&lt;tt&gt;ArrayVector&lt;/tt&gt;<sp/>can<sp/>be<sp/>passed</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>algorithms<sp/>that<sp/>expect<sp/>raw<sp/>memory.<sp/>This<sp/>is<sp/>especially<sp/>important</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/>when<sp/>legacy<sp/>or<sp/>C<sp/>code<sp/>has<sp/>to<sp/>be<sp/>called,<sp/>but<sp/>it<sp/>is<sp/>also<sp/>useful<sp/>for<sp/>certain</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/><sp/>optimizations.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"></highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/><sp/>Moreover,<sp/>&lt;tt&gt;ArrayVector&lt;/tt&gt;<sp/>is<sp/>derived<sp/>from<sp/>&lt;tt&gt;ArrayVectorView&lt;/tt&gt;<sp/>so<sp/>that<sp/>one</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/><sp/>can<sp/>create<sp/>views<sp/>of<sp/>the<sp/>array<sp/>(in<sp/>particular,<sp/>subarrays).<sp/>This<sp/>implies<sp/>another</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/><sp/>important<sp/>difference<sp/>to<sp/>&lt;tt&gt;std::vector&lt;/tt&gt;:<sp/>the<sp/>indexing<sp/>operator</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/>(&lt;tt&gt;ArrayVector::operator[]&lt;/tt&gt;)<sp/>takes<sp/>&lt;tt&gt;signed&lt;/tt&gt;<sp/>indices.<sp/>In<sp/>this<sp/>way,</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/>an<sp/>&lt;tt&gt;ArrayVectorView&lt;/tt&gt;<sp/>can<sp/>be<sp/>used<sp/>with<sp/>negative<sp/>indices:</highlight></codeline>
<codeline lineno="467"><highlight class="comment"></highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/>ArrayVector&lt;int&gt;<sp/>data(100);</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/>ArrayVectorView&lt;int&gt;<sp/>view<sp/>=<sp/>data.subarray(50,<sp/>100);</highlight></codeline>
<codeline lineno="471"><highlight class="comment"></highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/>view[-50]<sp/>=<sp/>1;<sp/>//<sp/>valid<sp/>access</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="474"><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>documentation<sp/>of<sp/>&lt;tt&gt;std::vector&lt;/tt&gt;<sp/>for<sp/>a<sp/>detailed</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/>description<sp/>of<sp/>&lt;tt&gt;ArrayVector&lt;/tt&gt;<sp/>functionality.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"></highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/array_vector.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="480"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Alloc<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>std::allocator&lt;T&gt;<sp/>*/</highlight><highlight class="normal"><sp/>&gt;</highlight></codeline>
<codeline lineno="482" refid="classvigra_1_1ArrayVector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref></highlight></codeline>
<codeline lineno="483"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;T, Alloc&gt;</ref><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>minimumCapacity<sp/>=<sp/>2,<sp/>resizeFactor<sp/>=<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;T&gt;</ref><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">view_type</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">view_type::value_type</ref><sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::reference<sp/>reference;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::const_reference<sp/>const_reference;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::pointer<sp/>pointer;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::const_pointer<sp/>const_pointer;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::iterator<sp/>iterator;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::size_type<sp/>size_type;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::difference_type<sp/>difference_type;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::reverse_iterator<sp/>reverse_iterator;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>view_type::const_reverse_iterator<sp/>const_reverse_iterator;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Alloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator_type;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>()</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">view_type</ref>(),</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>capacity_(minimumCapacity),</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc_(Alloc())</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>reserve_raw(capacity_);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>(Alloc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">view_type</ref>(),</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>capacity_(minimumCapacity),</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc_(alloc)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>reserve_raw(capacity_);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>(<sp/>size_type<sp/><ref refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" kindref="member">size</ref>,<sp/>Alloc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>alloc<sp/>=<sp/>Alloc())</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">view_type</ref>(),</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc_(alloc)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(size,<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref>(),<sp/>VigraTrueType());</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>(<sp/>size_type<sp/>size,<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>initial,<sp/>Alloc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>alloc<sp/>=<sp/>Alloc())</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">view_type</ref>(),</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc_(alloc)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(size,<sp/>initial,<sp/>VigraTrueType());</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">view_type</ref>(),</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc_(rhs.alloc_)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(rhs.<ref refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" kindref="member">begin</ref>(),<sp/>rhs.<ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>(),<sp/>VigraFalseType());</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs,<sp/>Alloc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>alloc<sp/>=<sp/>Alloc()<sp/>)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">view_type</ref>(),</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc_(alloc)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(rhs.<ref refid="classvigra_1_1ArrayVectorView_1aa4b02d4f1a8500fb07a551069060709f" kindref="member">begin</ref>(),<sp/>rhs.<ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>(),<sp/>VigraFalseType());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>(InputIterator<sp/>i,<sp/>InputIterator<sp/><ref refid="classvigra_1_1ArrayVectorView_1a350132543d80a1c1e5be844e6d2878ea" kindref="member">end</ref>)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(i,<sp/>end,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NumericTraits&lt;InputIterator&gt;::isIntegral());</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>(InputIterator<sp/>i,<sp/>InputIterator<sp/>end,<sp/>Alloc<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>alloc)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>alloc_(alloc)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(i,<sp/>end,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NumericTraits&lt;InputIterator&gt;::isIntegral());</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/>&amp;<sp/>operator=(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size_<sp/>==<sp/>rhs.size_)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;copyImpl(rhs);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref><sp/>t(rhs);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;swap(t);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/>&amp;<sp/>operator=(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref>()</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deallocate(this-&gt;data_,<sp/>this-&gt;size_);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop_back();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back(<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>insert(iterator<sp/>p,<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>insert(iterator<sp/>p,<sp/>size_type<sp/>n,<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>insert(iterator<sp/>p,<sp/>InputIterator<sp/>i,<sp/>InputIterator<sp/>iend);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>erase(iterator<sp/>p);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>erase(iterator<sp/>p,<sp/>iterator<sp/>q);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reserve(<sp/>size_type<sp/>new_capacity<sp/>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reserve();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize(<sp/>size_type<sp/>new_size,<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>initial<sp/>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize(<sp/>size_type<sp/>new_size<sp/>)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize(new_size,<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref>());</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>capacity()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="614"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capacity_;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classvigra_1_1ArrayVectorView" kindref="compound">this_type</ref><sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deallocate(pointer<sp/><ref refid="classvigra_1_1ArrayVectorView_1a794bbc6c3888bcfe88fb961f527c3563" kindref="member">data</ref>,<sp/>size_type<sp/>size);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>reserve_raw(size_type<sp/>capacity);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initImpl(<sp/>size_type<sp/>size,<sp/><ref refid="classvigra_1_1ArrayVectorView_1a265a253612b46abed17c61b0a5e5ce30" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>initial,<sp/>VigraTrueType<sp/></highlight><highlight class="comment">/*isIntegral*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initImpl(<sp/>Iter<sp/>i,<sp/>Iter<sp/>end,<sp/>VigraFalseType<sp/></highlight><highlight class="comment">/*isIntegral*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initImpl(<sp/>Iter<sp/>i,<sp/>Iter<sp/>end,<sp/>Error_NumericTraits_not_specialized_for_this_case)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initImpl(i,<sp/>end,<sp/>VigraFalseType());</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>capacity_;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>Alloc<sp/>alloc_;</highlight></codeline>
<codeline lineno="639"><highlight class="normal">};</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="643" refid="classvigra_1_1ArrayVector_1a5848e91e7262b978ae2289cc54629330" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;T, Alloc&gt;</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;T, Alloc&gt;::operator=</ref>(<sp/><ref refid="classvigra_1_1ArrayVectorView" kindref="compound">ArrayVectorView&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size_<sp/>==<sp/>rhs.<ref refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;copyImpl(rhs);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector</ref><sp/>t(rhs);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;swap(t);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;T, Alloc&gt;::pop_back</ref>()</highlight></codeline>
<codeline lineno="657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>--this-&gt;size_;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_.destroy(this-&gt;data_<sp/>+<sp/>this-&gt;size_);</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayVector&lt;T,<sp/>Alloc&gt;::push_back(<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>t<sp/>)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>reserve();</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_.construct(this-&gt;data_<sp/>+<sp/>this-&gt;size_,<sp/>t);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>++this-&gt;size_;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ArrayVector&lt;T,<sp/>Alloc&gt;::clear()</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::destroy_n(this-&gt;data_,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)this-&gt;size_);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;size_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArrayVector&lt;T,<sp/>Alloc&gt;::iterator</highlight></codeline>
<codeline lineno="679"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::insert(iterator<sp/>p,<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>difference_type<sp/>pos<sp/>=<sp/>p<sp/>-<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>==<sp/>this-&gt;end())</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_back(v);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>this-&gt;begin()<sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_back(this-&gt;back());</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>this-&gt;begin()<sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_backward(p,<sp/>this-&gt;end()<sp/>-<sp/>2,<sp/>this-&gt;end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArrayVector&lt;T,<sp/>Alloc&gt;::iterator</highlight></codeline>
<codeline lineno="699"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::insert(iterator<sp/>p,<sp/>size_type<sp/>n,<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>difference_type<sp/>pos<sp/>=<sp/>p<sp/>-<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>new_size<sp/>=<sp/>this-&gt;size()<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_size<sp/>&gt;<sp/>capacity_)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>new_capacity<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">std::max</ref>(new_size,<sp/>resizeFactor*capacity_);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>new_data<sp/>=<sp/>reserve_raw(new_capacity);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(this-&gt;begin(),<sp/>p,<sp/>new_data);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill(new_data<sp/>+<sp/>pos,<sp/>new_data<sp/>+<sp/>pos<sp/>+<sp/>n,<sp/>v);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(p,<sp/>this-&gt;end(),<sp/>new_data<sp/>+<sp/>pos<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_.deallocate(new_data,<sp/>new_capacity);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deallocate(this-&gt;data_,<sp/>this-&gt;size_);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity_<sp/>=<sp/>new_capacity;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>new_data;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>+<sp/>n<sp/>&gt;<sp/>this-&gt;size_)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>diff<sp/>=<sp/>pos<sp/>+<sp/>n<sp/>-<sp/>this-&gt;size_;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(p,<sp/>this-&gt;end(),<sp/>this-&gt;end()<sp/>+<sp/>diff);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill(this-&gt;end(),<sp/>this-&gt;end()<sp/>+<sp/>diff,<sp/>v);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(p,<sp/>this-&gt;end(),<sp/>v);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>diff<sp/>=<sp/>this-&gt;size_<sp/>-<sp/>(pos<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(this-&gt;end()<sp/>-<sp/>n,<sp/>this-&gt;end(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_backward(p,<sp/>p<sp/>+<sp/>diff,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(p,<sp/>p<sp/>+<sp/>n,<sp/>v);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;size_<sp/>=<sp/>new_size;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;begin()<sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArrayVector&lt;T,<sp/>Alloc&gt;::iterator</highlight></codeline>
<codeline lineno="743"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::insert(iterator<sp/>p,<sp/>InputIterator<sp/>i,<sp/>InputIterator<sp/>iend)</highlight></codeline>
<codeline lineno="744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>n<sp/>=<sp/>std::distance(i,<sp/>iend);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>pos<sp/>=<sp/>p<sp/>-<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>new_size<sp/>=<sp/>this-&gt;size()<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_size<sp/>&gt;<sp/>capacity_)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>new_capacity<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">std::max</ref>(new_size,<sp/>resizeFactor*capacity_);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>new_data<sp/>=<sp/>reserve_raw(new_capacity);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(this-&gt;begin(),<sp/>p,<sp/>new_data);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(i,<sp/>iend,<sp/>new_data<sp/>+<sp/>pos);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(p,<sp/>this-&gt;end(),<sp/>new_data<sp/>+<sp/>pos<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_.deallocate(new_data,<sp/>new_capacity);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deallocate(this-&gt;data_,<sp/>this-&gt;size_);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity_<sp/>=<sp/>new_capacity;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>new_data;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pos<sp/>+<sp/>n<sp/>&gt;<sp/>this-&gt;size_)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>diff<sp/>=<sp/>pos<sp/>+<sp/>n<sp/>-<sp/>this-&gt;size_;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(p,<sp/>this-&gt;end(),<sp/>this-&gt;end()<sp/>+<sp/>diff);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputIterator<sp/>split<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(split,<sp/>n<sp/>-<sp/>diff);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(split,<sp/>iend,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(i,<sp/>split,<sp/>p);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>diff<sp/>=<sp/>this-&gt;size_<sp/>-<sp/>(pos<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(this-&gt;end()<sp/>-<sp/>n,<sp/>this-&gt;end(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_backward(p,<sp/>p<sp/>+<sp/>diff,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(i,<sp/>iend,<sp/>p);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;size_<sp/>=<sp/>new_size;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;begin()<sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArrayVector&lt;T,<sp/>Alloc&gt;::iterator</highlight></codeline>
<codeline lineno="789"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::erase(iterator<sp/>p)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(p+1,<sp/>this-&gt;end(),<sp/>p);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>pop_back();</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArrayVector&lt;T,<sp/>Alloc&gt;::iterator</highlight></codeline>
<codeline lineno="798"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::erase(iterator<sp/>p,<sp/>iterator<sp/>q)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(q,<sp/>this-&gt;end(),<sp/>p);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>difference_type<sp/>eraseCount<sp/>=<sp/>q<sp/>-<sp/>p;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::destroy_n(this-&gt;end()<sp/>-<sp/>eraseCount,<sp/>eraseCount);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;size_<sp/>-=<sp/>eraseCount;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::reserve(<sp/>size_type<sp/>new_capacity<sp/>)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_capacity<sp/>&lt;=<sp/>capacity_)</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>new_data<sp/>=<sp/>reserve_raw(new_capacity);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_copy(this-&gt;data_,<sp/>this-&gt;data_+this-&gt;size_,<sp/>new_data);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>deallocate(this-&gt;data_,<sp/>this-&gt;size_);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>new_data;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>capacity_<sp/>=<sp/>new_capacity;</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::reserve()</highlight></codeline>
<codeline lineno="824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(capacity_<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reserve(minimumCapacity);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size_<sp/>==<sp/>capacity_)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reserve(resizeFactor*capacity_);</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::resize(<sp/>size_type<sp/>new_size,<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>initial)</highlight></codeline>
<codeline lineno="834"><highlight class="normal">{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(new_size<sp/>&lt;<sp/>this-&gt;size_)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase(this-&gt;begin()<sp/>+<sp/>new_size,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size_<sp/>&lt;<sp/>new_size)</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert(this-&gt;end(),<sp/>new_size<sp/>-<sp/>this-&gt;size(),<sp/>initial);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::initImpl(<sp/>size_type<sp/>size,<sp/>value_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>initial,<sp/>VigraTrueType<sp/></highlight><highlight class="comment">/*isIntegral*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;size_<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>capacity_<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>reserve_raw(capacity_);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill(this-&gt;data_,<sp/>this-&gt;data_+this-&gt;size_,<sp/>initial);</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iter&gt;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::initImpl(<sp/>Iter<sp/>i,<sp/>Iter<sp/>end,<sp/>VigraFalseType<sp/></highlight><highlight class="comment">/*isIntegral*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="858"><highlight class="normal">{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;size_<sp/>=<sp/>std::distance(i,<sp/>end);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>capacity_<sp/>=<sp/>this-&gt;size_;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>reserve_raw(capacity_);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::uninitializedCopy(i,<sp/>end,<sp/>this-&gt;data_);</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::swap(this_type<sp/>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(this-&gt;size_,<sp/>rhs.size_);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(capacity_,<sp/>rhs.capacity_);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(this-&gt;data_,<sp/>rhs.data_);</highlight></codeline>
<codeline lineno="873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::deallocate(pointer<sp/>data,<sp/>size_type<sp/>size)</highlight></codeline>
<codeline lineno="878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::destroy_n(data,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)size);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_.deallocate(data,<sp/>size);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArrayVector&lt;T,<sp/>Alloc&gt;::pointer</highlight></codeline>
<codeline lineno="888"><highlight class="normal">ArrayVector&lt;T,<sp/>Alloc&gt;::reserve_raw(size_type<sp/>capacity)</highlight></codeline>
<codeline lineno="889"><highlight class="normal">{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(capacity)</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>alloc_.allocate(capacity);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">std<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">ostream<sp/>&amp;<sp/>operator&lt;&lt;(ostream<sp/>&amp;<sp/>s,<sp/>vigra::ArrayVectorView&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;(int)a.size()-1;<sp/>++k)</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>a[k]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a.size())</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>a.back();</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_ASSERT_INSIDE</highlight></codeline>
<codeline lineno="915"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>VIGRA_ARRAY_VECTOR_HXX<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/array_vector.hxx"/>
  </compounddef>
</doxygen>
