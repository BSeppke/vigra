<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="linear__solve_8hxx" kind="file">
    <compoundname>linear_solve.hxx</compoundname>
    <includes local="no">ctype.h</includes>
    <includes local="no">string</includes>
    <includes refid="mathutil_8hxx" local="yes">mathutil.hxx</includes>
    <includes refid="matrix_8hxx" local="yes">matrix.hxx</includes>
    <includes refid="singular__value__decomposition_8hxx" local="yes">singular_value_decomposition.hxx</includes>
    <includedby refid="affine__registration_8hxx" local="yes">vigra/affine_registration.hxx</includedby>
    <includedby refid="edgedetection_8hxx" local="yes">vigra/edgedetection.hxx</includedby>
    <includedby refid="linear__algebra_8hxx" local="yes">vigra/linear_algebra.hxx</includedby>
    <includedby refid="noise__normalization_8hxx" local="yes">vigra/noise_normalization.hxx</includedby>
    <includedby refid="quadprog_8hxx" local="yes">vigra/quadprog.hxx</includedby>
    <includedby refid="regression_8hxx" local="yes">vigra/regression.hxx</includedby>
    <includedby refid="slanted__edge__mtf_8hxx" local="yes">vigra/slanted_edge_mtf.hxx</includedby>
    <incdepgraph>
      <node id="4009">
        <label>multi_pointoperators.hxx</label>
        <link refid="multi__pointoperators_8hxx_source"/>
        <childnode refid="4005" relation="include">
        </childnode>
        <childnode refid="4010" relation="include">
        </childnode>
        <childnode refid="4011" relation="include">
        </childnode>
        <childnode refid="4014" relation="include">
        </childnode>
        <childnode refid="4012" relation="include">
        </childnode>
        <childnode refid="3990" relation="include">
        </childnode>
        <childnode refid="3976" relation="include">
        </childnode>
        <childnode refid="3984" relation="include">
        </childnode>
      </node>
      <node id="3989">
        <label>iomanip</label>
      </node>
      <node id="3985">
        <label>functional</label>
      </node>
      <node id="3978">
        <label>limits</label>
      </node>
      <node id="3975">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="3976" relation="include">
        </childnode>
        <childnode refid="3978" relation="include">
        </childnode>
      </node>
      <node id="3986">
        <label>iterator</label>
      </node>
      <node id="3990">
        <label>multi_array.hxx</label>
        <link refid="multi__array_8hxx_source"/>
        <childnode refid="3991" relation="include">
        </childnode>
        <childnode refid="3979" relation="include">
        </childnode>
        <childnode refid="3992" relation="include">
        </childnode>
        <childnode refid="3993" relation="include">
        </childnode>
        <childnode refid="4000" relation="include">
        </childnode>
        <childnode refid="4002" relation="include">
        </childnode>
        <childnode refid="4003" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="4007" relation="include">
        </childnode>
        <childnode refid="3976" relation="include">
        </childnode>
        <childnode refid="3964" relation="include">
        </childnode>
      </node>
      <node id="3984">
        <label>inspector_passes.hxx</label>
        <link refid="inspector__passes_8hxx_source"/>
        <childnode refid="3976" relation="include">
        </childnode>
      </node>
      <node id="3982">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="4005">
        <label>initimage.hxx</label>
        <link refid="initimage_8hxx_source"/>
        <childnode refid="4004" relation="include">
        </childnode>
        <childnode refid="3997" relation="include">
        </childnode>
        <childnode refid="4006" relation="include">
        </childnode>
      </node>
      <node id="3983">
        <label>algorithm.hxx</label>
        <link refid="algorithm_8hxx_source"/>
        <childnode refid="3975" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="3984" relation="include">
        </childnode>
        <childnode refid="3979" relation="include">
        </childnode>
        <childnode refid="3985" relation="include">
        </childnode>
        <childnode refid="3986" relation="include">
        </childnode>
      </node>
      <node id="3965">
        <label>cmath</label>
      </node>
      <node id="3970">
        <label>stdexcept</label>
      </node>
      <node id="4006">
        <label>functortraits.hxx</label>
        <link refid="functortraits_8hxx_source"/>
        <childnode refid="3985" relation="include">
        </childnode>
        <childnode refid="3976" relation="include">
        </childnode>
      </node>
      <node id="3996">
        <label>iteratortags.hxx</label>
        <link refid="iteratortags_8hxx_source"/>
        <childnode refid="3986" relation="include">
        </childnode>
      </node>
      <node id="3963">
        <label>string</label>
      </node>
      <node id="4010">
        <label>copyimage.hxx</label>
        <link refid="copyimage_8hxx_source"/>
        <childnode refid="4004" relation="include">
        </childnode>
      </node>
      <node id="4002">
        <label>basicimageview.hxx</label>
        <link refid="basicimageview_8hxx_source"/>
        <childnode refid="4003" relation="include">
        </childnode>
        <childnode refid="4005" relation="include">
        </childnode>
      </node>
      <node id="3997">
        <label>iteratortraits.hxx</label>
        <link refid="iteratortraits_8hxx_source"/>
        <childnode refid="3992" relation="include">
        </childnode>
        <childnode refid="3998" relation="include">
        </childnode>
      </node>
      <node id="3961">
        <label>vigra/linear_solve.hxx</label>
        <link refid="linear_solve.hxx"/>
        <childnode refid="3962" relation="include">
        </childnode>
        <childnode refid="3963" relation="include">
        </childnode>
        <childnode refid="3964" relation="include">
        </childnode>
        <childnode refid="3987" relation="include">
        </childnode>
        <childnode refid="4015" relation="include">
        </childnode>
      </node>
      <node id="3981">
        <label>cfloat</label>
      </node>
      <node id="4015">
        <label>singular_value_decomposition.hxx</label>
        <link refid="singular__value__decomposition_8hxx_source"/>
        <childnode refid="3987" relation="include">
        </childnode>
        <childnode refid="4016" relation="include">
        </childnode>
      </node>
      <node id="4004">
        <label>utilities.hxx</label>
        <link refid="utilities_8hxx_source"/>
        <childnode refid="3968" relation="include">
        </childnode>
        <childnode refid="3971" relation="include">
        </childnode>
        <childnode refid="3976" relation="include">
        </childnode>
        <childnode refid="3973" relation="include">
        </childnode>
        <childnode refid="3995" relation="include">
        </childnode>
        <childnode refid="3964" relation="include">
        </childnode>
        <childnode refid="3963" relation="include">
        </childnode>
        <childnode refid="3972" relation="include">
        </childnode>
      </node>
      <node id="3969">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="4011">
        <label>transformimage.hxx</label>
        <link refid="transformimage_8hxx_source"/>
        <childnode refid="4004" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="3997" relation="include">
        </childnode>
        <childnode refid="4000" relation="include">
        </childnode>
        <childnode refid="4006" relation="include">
        </childnode>
        <childnode refid="4012" relation="include">
        </childnode>
      </node>
      <node id="3973">
        <label>tuple.hxx</label>
        <link refid="tuple_8hxx_source"/>
        <childnode refid="3974" relation="include">
        </childnode>
      </node>
      <node id="3993">
        <label>tinyvector.hxx</label>
        <link refid="tinyvector_8hxx_source"/>
        <childnode refid="3965" relation="include">
        </childnode>
        <childnode refid="3966" relation="include">
        </childnode>
        <childnode refid="3988" relation="include">
        </childnode>
        <childnode refid="3979" relation="include">
        </childnode>
        <childnode refid="3968" relation="include">
        </childnode>
        <childnode refid="3971" relation="include">
        </childnode>
        <childnode refid="3976" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="3994" relation="include">
        </childnode>
        <childnode refid="3964" relation="include">
        </childnode>
        <childnode refid="3995" relation="include">
        </childnode>
      </node>
      <node id="4008">
        <label>sys/types.h</label>
      </node>
      <node id="4012">
        <label>inspectimage.hxx</label>
        <link refid="inspectimage_8hxx_source"/>
        <childnode refid="4013" relation="include">
        </childnode>
        <childnode refid="3979" relation="include">
        </childnode>
        <childnode refid="4004" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="3997" relation="include">
        </childnode>
        <childnode refid="4006" relation="include">
        </childnode>
        <childnode refid="4000" relation="include">
        </childnode>
        <childnode refid="3984" relation="include">
        </childnode>
      </node>
      <node id="3964">
        <label>mathutil.hxx</label>
        <link refid="mathutil_8hxx_source"/>
        <childnode refid="3965" relation="include">
        </childnode>
        <childnode refid="3966" relation="include">
        </childnode>
        <childnode refid="3967" relation="include">
        </childnode>
        <childnode refid="3968" relation="include">
        </childnode>
        <childnode refid="3971" relation="include">
        </childnode>
        <childnode refid="3973" relation="include">
        </childnode>
        <childnode refid="3975" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="3983" relation="include">
        </childnode>
      </node>
      <node id="3968">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="3969" relation="include">
        </childnode>
        <childnode refid="3970" relation="include">
        </childnode>
      </node>
      <node id="3980">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="3977" relation="include">
        </childnode>
        <childnode refid="3978" relation="include">
        </childnode>
        <childnode refid="3981" relation="include">
        </childnode>
        <childnode refid="3967" relation="include">
        </childnode>
        <childnode refid="3976" relation="include">
        </childnode>
        <childnode refid="3975" relation="include">
        </childnode>
        <childnode refid="3982" relation="include">
        </childnode>
      </node>
      <node id="4013">
        <label>vector</label>
      </node>
      <node id="4003">
        <label>imageiterator.hxx</label>
        <link refid="imageiterator_8hxx_source"/>
        <childnode refid="4004" relation="include">
        </childnode>
        <childnode refid="3992" relation="include">
        </childnode>
        <childnode refid="3997" relation="include">
        </childnode>
        <childnode refid="3976" relation="include">
        </childnode>
      </node>
      <node id="3999">
        <label>iteratoradapter.hxx</label>
        <link refid="iteratoradapter_8hxx_source"/>
      </node>
      <node id="3998">
        <label>imageiteratoradapter.hxx</label>
        <link refid="imageiteratoradapter_8hxx_source"/>
        <childnode refid="3986" relation="include">
        </childnode>
      </node>
      <node id="3974">
        <label>utility</label>
      </node>
      <node id="3972">
        <label>sstream</label>
      </node>
      <node id="4000">
        <label>rgbvalue.hxx</label>
        <link refid="rgbvalue_8hxx_source"/>
        <childnode refid="3965" relation="include">
        </childnode>
        <childnode refid="3966" relation="include">
        </childnode>
        <childnode refid="3968" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="3992" relation="include">
        </childnode>
        <childnode refid="3993" relation="include">
        </childnode>
        <childnode refid="4001" relation="include">
        </childnode>
      </node>
      <node id="3995">
        <label>diff2d.hxx</label>
        <link refid="diff2d_8hxx_source"/>
        <childnode refid="3965" relation="include">
        </childnode>
        <childnode refid="3988" relation="include">
        </childnode>
        <childnode refid="3968" relation="include">
        </childnode>
        <childnode refid="3996" relation="include">
        </childnode>
        <childnode refid="3997" relation="include">
        </childnode>
        <childnode refid="3999" relation="include">
        </childnode>
        <childnode refid="3973" relation="include">
        </childnode>
      </node>
      <node id="3971">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="3970" relation="include">
        </childnode>
        <childnode refid="3972" relation="include">
        </childnode>
        <childnode refid="3963" relation="include">
        </childnode>
        <childnode refid="3968" relation="include">
        </childnode>
      </node>
      <node id="4001">
        <label>static_assert.hxx</label>
        <link refid="static__assert_8hxx_source"/>
      </node>
      <node id="4016">
        <label>array_vector.hxx</label>
        <link refid="array__vector_8hxx_source"/>
        <childnode refid="3971" relation="include">
        </childnode>
        <childnode refid="3994" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="3991" relation="include">
        </childnode>
        <childnode refid="3979" relation="include">
        </childnode>
        <childnode refid="3988" relation="include">
        </childnode>
      </node>
      <node id="3988">
        <label>iosfwd</label>
      </node>
      <node id="3966">
        <label>cstdlib</label>
      </node>
      <node id="4007">
        <label>multi_iterator.hxx</label>
        <link refid="multi__iterator_8hxx_source"/>
        <childnode refid="4008" relation="include">
        </childnode>
        <childnode refid="3993" relation="include">
        </childnode>
        <childnode refid="3996" relation="include">
        </childnode>
      </node>
      <node id="3962">
        <label>ctype.h</label>
      </node>
      <node id="3977">
        <label>climits</label>
      </node>
      <node id="3976">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="3968" relation="include">
        </childnode>
        <childnode refid="3977" relation="include">
        </childnode>
        <childnode refid="3978" relation="include">
        </childnode>
        <childnode refid="3979" relation="include">
        </childnode>
      </node>
      <node id="4014">
        <label>combineimages.hxx</label>
        <link refid="combineimages_8hxx_source"/>
        <childnode refid="4004" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="4006" relation="include">
        </childnode>
        <childnode refid="3965" relation="include">
        </childnode>
      </node>
      <node id="3967">
        <label>complex</label>
      </node>
      <node id="3987">
        <label>matrix.hxx</label>
        <link refid="matrix_8hxx_source"/>
        <childnode refid="3965" relation="include">
        </childnode>
        <childnode refid="3988" relation="include">
        </childnode>
        <childnode refid="3989" relation="include">
        </childnode>
        <childnode refid="3990" relation="include">
        </childnode>
        <childnode refid="3964" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="4009" relation="include">
        </childnode>
      </node>
      <node id="3979">
        <label>algorithm</label>
      </node>
      <node id="3994">
        <label>memory.hxx</label>
        <link refid="memory_8hxx_source"/>
        <childnode refid="3976" relation="include">
        </childnode>
      </node>
      <node id="3992">
        <label>accessor.hxx</label>
        <link refid="accessor_8hxx_source"/>
        <childnode refid="3976" relation="include">
        </childnode>
        <childnode refid="3980" relation="include">
        </childnode>
        <childnode refid="3973" relation="include">
        </childnode>
      </node>
      <node id="3991">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4018">
        <label>vigra/affine_registration.hxx</label>
        <link refid="affine__registration_8hxx_source"/>
      </node>
      <node id="4022">
        <label>vigra/noise_normalization.hxx</label>
        <link refid="noise__normalization_8hxx_source"/>
      </node>
      <node id="4023">
        <label>vigra/quadprog.hxx</label>
        <link refid="quadprog_8hxx_source"/>
      </node>
      <node id="4021">
        <label>vigra/linear_algebra.hxx</label>
        <link refid="linear__algebra_8hxx_source"/>
      </node>
      <node id="4027">
        <label>vigra/random_forest_hdf5_impex.hxx</label>
        <link refid="random__forest__hdf5__impex_8hxx_source"/>
      </node>
      <node id="4017">
        <label>vigra/linear_solve.hxx</label>
        <link refid="linear_solve.hxx"/>
        <childnode refid="4018" relation="include">
        </childnode>
        <childnode refid="4019" relation="include">
        </childnode>
        <childnode refid="4021" relation="include">
        </childnode>
        <childnode refid="4022" relation="include">
        </childnode>
        <childnode refid="4023" relation="include">
        </childnode>
        <childnode refid="4024" relation="include">
        </childnode>
        <childnode refid="4020" relation="include">
        </childnode>
      </node>
      <node id="4019">
        <label>vigra/edgedetection.hxx</label>
        <link refid="edgedetection_8hxx_source"/>
        <childnode refid="4020" relation="include">
        </childnode>
      </node>
      <node id="4020">
        <label>vigra/slanted_edge_mtf.hxx</label>
        <link refid="slanted__edge__mtf_8hxx_source"/>
      </node>
      <node id="4025">
        <label>vigra/random_forest/rf_ridge_split.hxx</label>
        <link refid="rf__ridge__split_8hxx_source"/>
        <childnode refid="4026" relation="include">
        </childnode>
      </node>
      <node id="4026">
        <label>vigra/random_forest.hxx</label>
        <link refid="random__forest_8hxx_source"/>
        <childnode refid="4027" relation="include">
        </childnode>
      </node>
      <node id="4024">
        <label>vigra/regression.hxx</label>
        <link refid="regression_8hxx_source"/>
        <childnode refid="4025" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
    <innernamespace refid="namespacevigra_1_1linalg">vigra::linalg</innernamespace>
    <innernamespace refid="namespacevigra_1_1linalg_1_1detail">vigra::linalg::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2003-2008<sp/>by<sp/>Gunnar<sp/>Kedenburg<sp/>and<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_LINEAR_SOLVE_HXX</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_LINEAR_SOLVE_HXX</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mathutil.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;matrix.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;singular_value_decomposition.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">linalg</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">T<sp/>determinantByLUDecomposition(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;2&gt;::type<sp/>Shape;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(a),<sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(a);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(n<sp/>==<sp/>m,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;determinant():<sp/>square<sp/>matrix<sp/>required.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>LU(a);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>det<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>previous<sp/>transformations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>end<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">std::min</ref>(i,<sp/>j);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>s<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(<ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(LU,<sp/>Shape(i,0),<sp/>end),<sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(LU,<sp/>Shape(0,j),<sp/>end));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LU(i,j)<sp/>=<sp/>LU(i,j)<sp/>-=<sp/>s;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>pivot<sp/>and<sp/>exchange<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>p<sp/>=<sp/>j<sp/>+<sp/><ref refid="group__LinearAlgebraFunctions_1ga19d5d885848fc3dc9364892229aaa59e" kindref="member">argMax</ref>(<ref refid="group__LinearAlgebraFunctions_1ga53f1096eae84afd8f97055fe7ac5c5fe" kindref="member">abs</ref>(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(LU,<sp/>Shape(j,j),<sp/>m)));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>j)<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(LU,<sp/>p).swapData(<ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(LU,<sp/>j));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>=<sp/>-det;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>*=<sp/>LU(j,j);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>multipliers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LU(j,j)<sp/>!=<sp/>0.0)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(LU,<sp/>Shape(j+1,j),<sp/>m)<sp/>/=<sp/>LU(j,j);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>det<sp/>is<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>det;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>new<sp/>value<sp/>of<sp/>&apos;a&apos;<sp/>(when<sp/>this<sp/>Givens<sp/>rotation<sp/>is<sp/>applied<sp/>to<sp/>&apos;a&apos;<sp/>and<sp/>&apos;b&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>value<sp/>of<sp/>&apos;b&apos;<sp/>is<sp/>zero,<sp/>of<sp/>course</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">T<sp/>givensCoefficients(T<sp/>a,<sp/>T<sp/>b,<sp/>T<sp/>&amp;<sp/>c,<sp/>T<sp/>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__LinearAlgebraFunctions_1ga53f1096eae84afd8f97055fe7ac5c5fe" kindref="member">abs</ref>(a)<sp/>&lt;<sp/><ref refid="group__LinearAlgebraFunctions_1ga53f1096eae84afd8f97055fe7ac5c5fe" kindref="member">abs</ref>(b))</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>t<sp/>=<sp/>a/b,<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga04ac28305eb14c42937b447c874518cd" kindref="member">std::sqrt</ref>(1.0<sp/>+<sp/>t*t);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>1.0<sp/>/<sp/>r;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>t*s;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r*b;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a<sp/>!=<sp/>0.0)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>t<sp/>=<sp/>b/a,<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga04ac28305eb14c42937b447c874518cd" kindref="member">std::sqrt</ref>(1.0<sp/>+<sp/>t*t);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1.0<sp/>/<sp/>r;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>t*c;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r*a;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>a<sp/>==<sp/>b<sp/>==<sp/>0.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>Golub,<sp/>van<sp/>Loan:<sp/>Algorithm<sp/>5.1.3<sp/>(p.<sp/>216)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>givensRotationMatrix(T<sp/>a,<sp/>T<sp/>b,<sp/>Matrix&lt;T&gt;<sp/>&amp;<sp/>gTranspose)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>rotation<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>givensCoefficients(a,<sp/>b,<sp/>gTranspose(0,0),<sp/>gTranspose(0,1));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>gTranspose(1,1)<sp/>=<sp/>gTranspose(0,0);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>gTranspose(1,0)<sp/>=<sp/>-gTranspose(0,1);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reflections<sp/>are<sp/>symmetric<sp/>matrices<sp/>and<sp/>can<sp/>thus<sp/>be<sp/>applied<sp/>to<sp/>rows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>columns<sp/>in<sp/>the<sp/>same<sp/>way<sp/>=&gt;<sp/>code<sp/>simplification<sp/>relative<sp/>to<sp/>rotations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal">givensReflectionMatrix(T<sp/>a,<sp/>T<sp/>b,<sp/>Matrix&lt;T&gt;<sp/>&amp;<sp/>g)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>reflection<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>givensCoefficients(a,<sp/>b,<sp/>g(0,0),<sp/>g(0,1));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>g(1,1)<sp/>=<sp/>-g(0,0);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>g(1,0)<sp/>=<sp/>g(0,1);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>Golub,<sp/>van<sp/>Loan:<sp/>Algorithm<sp/>5.2.2<sp/>(p.<sp/>227)<sp/>and<sp/>Section<sp/>12.5.2<sp/>(p.<sp/>608)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal">qrGivensStepImpl(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>rhs)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(r);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(r);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(rhs);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(rhs),</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;qrGivensStepImpl():<sp/>Matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>givens(2,2);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=m-1;<sp/>k&gt;(int)i;<sp/>--k)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!givensReflectionMatrix(r(k-1,i),<sp/>r(k,i),<sp/>givens))</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>r(k,i)<sp/>was<sp/>already<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r(k-1,i)<sp/>=<sp/>givens(0,0)*r(k-1,i)<sp/>+<sp/>givens(0,1)*r(k,i);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r(k,i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.subarray(Shape(k-1,i+1),<sp/>Shape(k+1,n))<sp/>=<sp/>givens*r.subarray(Shape(k-1,i+1),<sp/>Shape(k+1,n));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.subarray(Shape(k-1,0),<sp/>Shape(k+1,rhsCount))<sp/>=<sp/>givens*rhs.subarray(Shape(k-1,0),<sp/>Shape(k+1,rhsCount));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r(i,i)<sp/>!=<sp/>0.0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>Golub,<sp/>van<sp/>Loan:<sp/>Section<sp/>12.5.2<sp/>(p.<sp/>608)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Permutation&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal">upperTriangularCyclicShiftColumns(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>j,<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;rhs,<sp/>Permutation<sp/>&amp;<sp/>permutation)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(r);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(r);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(rhs);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(i<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>n,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;upperTriangularCyclicShiftColumns():<sp/>Shift<sp/>indices<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(rhs),</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;upperTriangularCyclicShiftColumns():<sp/>Matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>i)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&lt;<sp/>i)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(j,i);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>t<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>i);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>ti<sp/>=<sp/>permutation[i];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=i;<sp/>k&lt;j;++k)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>k)<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>k+1);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutation[k]<sp/>=<sp/>permutation[k+1];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>j)<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>permutation[j]<sp/>=<sp/>ti;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>givens(2,2);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=i;<sp/>k&lt;j;<sp/>++k)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!givensReflectionMatrix(r(k,k),<sp/>r(k+1,k),<sp/>givens))</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>r(k+1,k)<sp/>was<sp/>already<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r(k,k)<sp/>=<sp/>givens(0,0)*r(k,k)<sp/>+<sp/>givens(0,1)*r(k+1,k);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r(k+1,k)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.subarray(Shape(k,k+1),<sp/>Shape(k+2,n))<sp/>=<sp/>givens*r.subarray(Shape(k,k+1),<sp/>Shape(k+2,n));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.subarray(Shape(k,0),<sp/>Shape(k+2,rhsCount))<sp/>=<sp/>givens*rhs.subarray(Shape(k,0),<sp/>Shape(k+2,rhsCount));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>Golub,<sp/>van<sp/>Loan:<sp/>Section<sp/>12.5.2<sp/>(p.<sp/>608)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Permutation&gt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal">upperTriangularSwapColumns(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i,<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>j,<sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;rhs,<sp/>Permutation<sp/>&amp;<sp/>permutation)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(r);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(r);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(rhs);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(i<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>j<sp/>&lt;<sp/>n,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;upperTriangularSwapColumns():<sp/>Swap<sp/>indices<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(rhs),</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;upperTriangularSwapColumns():<sp/>Matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>i)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>&lt;<sp/>i)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(j,i);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>i).swapData(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>j));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(permutation[i],<sp/>permutation[j]);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>givens(2,2);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=m-1;<sp/>k&gt;(int)i;<sp/>--k)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!givensReflectionMatrix(r(k-1,i),<sp/>r(k,i),<sp/>givens))</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>r(k,i)<sp/>was<sp/>already<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r(k-1,i)<sp/>=<sp/>givens(0,0)*r(k-1,i)<sp/>+<sp/>givens(0,1)*r(k,i);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r(k,i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.subarray(Shape(k-1,i+1),<sp/>Shape(k+1,n))<sp/>=<sp/>givens*r.subarray(Shape(k-1,i+1),<sp/>Shape(k+1,n));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.subarray(Shape(k-1,0),<sp/>Shape(k+1,rhsCount))<sp/>=<sp/>givens*rhs.subarray(Shape(k-1,0),<sp/>Shape(k+1,rhsCount));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>end<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">std::min</ref>(j,<sp/>m-1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=i+1;<sp/>k&lt;end;<sp/>++k)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!givensReflectionMatrix(r(k,k),<sp/>r(k+1,k),<sp/>givens))</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>r(k+1,k)<sp/>was<sp/>already<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r(k,k)<sp/>=<sp/>givens(0,0)*r(k,k)<sp/>+<sp/>givens(0,1)*r(k+1,k);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r(k+1,k)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.subarray(Shape(k,k+1),<sp/>Shape(k+2,n))<sp/>=<sp/>givens*r.subarray(Shape(k,k+1),<sp/>Shape(k+2,n));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.subarray(Shape(k,0),<sp/>Shape(k+2,rhsCount))<sp/>=<sp/>givens*rhs.subarray(Shape(k,0),<sp/>Shape(k+2,rhsCount));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>Lawson<sp/>&amp;<sp/>Hanson:<sp/>Algorithm<sp/>H1<sp/>(p.<sp/>57)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>householderVector(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>u,<sp/>U<sp/>&amp;<sp/>vnorm)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>vnorm<sp/>=<sp/>(v(0,0)<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>-<ref refid="group__LinearAlgebraFunctions_1ga529b9955cbb9d3321a1d75288600701a" kindref="member">norm</ref>(v)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><ref refid="group__LinearAlgebraFunctions_1ga529b9955cbb9d3321a1d75288600701a" kindref="member">norm</ref>(v);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>U<sp/>f<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga04ac28305eb14c42937b447c874518cd" kindref="member">std::sqrt</ref>(vnorm*(vnorm<sp/>-<sp/>v(0,0)));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(f<sp/>==<sp/>NumericTraits&lt;U&gt;::zero())</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u.init(NumericTraits&lt;T&gt;::zero());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u(0,0)<sp/>=<sp/>(v(0,0)<sp/>-<sp/>vnorm)<sp/>/<sp/>f;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=1;<sp/>k&lt;<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(u);<sp/>++k)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u(k,0)<sp/>=<sp/>v(k,0)<sp/>/<sp/>f;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see<sp/>Lawson<sp/>&amp;<sp/>Hanson:<sp/>Algorithm<sp/>H1<sp/>(p.<sp/>57)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal">qrHouseholderStepImpl(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;<sp/>r,<sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>rhs,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C3&gt;<sp/>&amp;<sp/>householderMatrix)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(r);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(r);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(rhs);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(i<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>m,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;qrHouseholderStepImpl():<sp/>Index<sp/>i<sp/>out<sp/>of<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>u(m-i,1);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>vnorm;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nontrivial<sp/>=<sp/>householderVector(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>Shape(i,i),<sp/>m),<sp/>u,<sp/>vnorm);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>r(i,i)<sp/>=<sp/>vnorm;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>Shape(i+1,i),<sp/>m).init(NumericTraits&lt;T&gt;::zero());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(householderMatrix)<sp/>==<sp/>n)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(householderMatrix,<sp/>Shape(i,i),<sp/>m)<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nontrivial)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=i+1;<sp/>k&lt;n;<sp/>++k)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>Shape(i,k),<sp/>m)<sp/>-=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>Shape(i,k),<sp/>m),<sp/>u)<sp/>*<sp/>u;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;rhsCount;<sp/>++k)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(rhs,<sp/>Shape(i,k),<sp/>m)<sp/>-=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(rhs,<sp/>Shape(i,k),<sp/>m),<sp/>u)<sp/>*<sp/>u;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r(i,i)<sp/>!=<sp/>0.0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal">qrColumnHouseholderStep(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>dontStoreHouseholderVectors;<sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qrHouseholderStepImpl(i,<sp/>r,<sp/>rhs,<sp/>dontStoreHouseholderVectors);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal">qrRowHouseholderStep(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>householderMatrix)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>dontTransformRHS;<sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>StridedArrayTag&gt;<sp/>rt<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(r),</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(householderMatrix);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qrHouseholderStepImpl(i,<sp/>rt,<sp/>dontTransformRHS,<sp/>ht);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>O(n)<sp/>algorithm<sp/>due<sp/>to<sp/>Bischof:<sp/>Incremental<sp/>Condition<sp/>Estimation,<sp/>1990</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SNType&gt;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">incrementalMaxSingularValueApproximation(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>newColumn,<sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>z,<sp/>SNType<sp/>&amp;<sp/>v)<sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(newColumn)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>SNType<sp/>vneu<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gacb4fbe2464f536923f80991e7d7b9f16" kindref="member">squaredNorm</ref>(newColumn);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>yv<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(newColumn,<sp/>Shape(0,0),n),<sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(z,<sp/>Shape(0,0),n));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>atan2<sp/>as<sp/>it<sp/>is<sp/>robust<sp/>against<sp/>overflow/underflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>t<sp/>=<sp/>0.5*<ref refid="group__FixedPoint16Operations_1gae83e1ae2e3dae6dc462c69a7c8175fc5" kindref="member" tooltip="Arctangent. Accuracy better than 1/3 degree (9 significant bits).">std::atan2</ref>(T(2.0*yv),<sp/>T(<ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(v)-vneu)),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga9db90484f9146df72b800bab7fecdd4b" kindref="member">std::sin</ref>(t),</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga05727ffc201ac332c0e4158a2267c08c" kindref="member">std::cos</ref>(t);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga04ac28305eb14c42937b447c874518cd" kindref="member">std::sqrt</ref>(<ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(c*v)<sp/>+<sp/><ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(s)*vneu<sp/>+<sp/>2.0*s*c*yv);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(z,<sp/>Shape(0,0),n)<sp/>=<sp/>c*<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(z,<sp/>Shape(0,0),n)<sp/>+<sp/>s*<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(newColumn,<sp/>Shape(0,0),n);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>z(n,0)<sp/>=<sp/>s*newColumn(n,0);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>O(n)<sp/>algorithm<sp/>due<sp/>to<sp/>Bischof:<sp/>Incremental<sp/>Condition<sp/>Estimation,<sp/>1990</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SNType&gt;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">incrementalMinSingularValueApproximation(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>newColumn,<sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>z,<sp/>SNType<sp/>&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)<sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v<sp/>&lt;=<sp/>tolerance)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(newColumn)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><ref refid="group__MathFunctions_1ga441c9e4bf9f952c0fe94836634bcf976" kindref="member">gamma</ref><sp/>=<sp/>newColumn(n,0);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>==<sp/>0.0)<sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>yv<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(newColumn,<sp/>Shape(0,0),n),<sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(z,<sp/>Shape(0,0),n));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>atan2<sp/>as<sp/>it<sp/>is<sp/>robust<sp/>against<sp/>overflow/underflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>t<sp/>=<sp/>0.5*<ref refid="group__FixedPoint16Operations_1gae83e1ae2e3dae6dc462c69a7c8175fc5" kindref="member" tooltip="Arctangent. Accuracy better than 1/3 degree (9 significant bits).">std::atan2</ref>(T(-2.0*yv),<sp/>T(<ref refid="group__LinearAlgebraFunctions_1gacb4fbe2464f536923f80991e7d7b9f16" kindref="member">squaredNorm</ref>(gamma<sp/>/<sp/>v)<sp/>+<sp/><ref refid="group__LinearAlgebraFunctions_1gacb4fbe2464f536923f80991e7d7b9f16" kindref="member">squaredNorm</ref>(yv)<sp/>-<sp/>1.0)),</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga9db90484f9146df72b800bab7fecdd4b" kindref="member">std::sin</ref>(t),</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga05727ffc201ac332c0e4158a2267c08c" kindref="member">std::cos</ref>(t);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(z,<sp/>Shape(0,0),n)<sp/>*=<sp/>c;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>z(n,0)<sp/>=<sp/>(s<sp/>-<sp/>c*yv)<sp/>/<sp/>gamma;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>*=<sp/><ref refid="group__LinearAlgebraFunctions_1ga529b9955cbb9d3321a1d75288600701a" kindref="member">norm</ref>(gamma)<sp/>/<sp/><ref refid="group__FixedPoint16Operations_1gac462ab7aeaeaa2af19c524e89c9ee1fd" kindref="member" tooltip="Length of hypotenuse.">hypot</ref>(c*gamma,<sp/>v*(s<sp/>-<sp/>c*yv));</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QR<sp/>algorithm<sp/>with<sp/>optional<sp/>column<sp/>pivoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal">qrTransformToTriangularImpl(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;<sp/>r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>rhs,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C3&gt;<sp/>&amp;<sp/>householder,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;MultiArrayIndex&gt;<sp/>&amp;<sp/>permutation,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NormTraits&lt;MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&gt;::NormType<sp/>NormType;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NormTraits&lt;MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&gt;::SquaredNormType<sp/>SNType;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(r);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(r);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>maxRank<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">std::min</ref>(m,<sp/>n);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>&gt;=<sp/>n,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;qrTransformToTriangularImpl():<sp/>Coefficient<sp/>matrix<sp/>with<sp/>at<sp/>least<sp/>as<sp/>many<sp/>rows<sp/>as<sp/>columns<sp/>required.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(rhs);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>transformRHS<sp/>=<sp/>rhsCount<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(!transformRHS<sp/>||<sp/>m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(rhs),</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;qrTransformToTriangularImpl():<sp/>RHS<sp/>matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>storeHouseholderSteps<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(householder)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(!storeHouseholderSteps<sp/>||<sp/>r.shape()<sp/>==<sp/>householder.shape(),</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;qrTransformToTriangularImpl():<sp/>Householder<sp/>matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pivoting<sp/>=<sp/>permutation.size()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(!pivoting<sp/>||<sp/>n<sp/>==<sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>)permutation.size(),</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;qrTransformToTriangularImpl():<sp/>Permutation<sp/>array<sp/>size<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>trivial<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;SNType&gt;<sp/>columnSquaredNorms;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pivoting)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnSquaredNorms.reshape(Shape(1,n));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;n;<sp/>++k)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnSquaredNorms[k]<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gacb4fbe2464f536923f80991e7d7b9f16" kindref="member">squaredNorm</ref>(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>k));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga19d5d885848fc3dc9364892229aaa59e" kindref="member">argMax</ref>(columnSquaredNorms);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pivot<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>0).swapData(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>pivot));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(columnSquaredNorms[0],<sp/>columnSquaredNorms[pivot]);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(permutation[0],<sp/>permutation[pivot]);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>qrHouseholderStepImpl(0,<sp/>r,<sp/>rhs,<sp/>householder);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rank<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>NormType<sp/>maxApproxSingularValue<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga529b9955cbb9d3321a1d75288600701a" kindref="member">norm</ref>(r(0,0)),</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minApproxSingularValue<sp/>=<sp/>maxApproxSingularValue;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance<sp/>=<sp/>(epsilon<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>m*maxApproxSingularValue*NumericTraits&lt;T&gt;::epsilon()</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>epsilon;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simpleSingularValueApproximation<sp/>=<sp/>(n<sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>zmax,<sp/>zmin;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(minApproxSingularValue<sp/>&lt;=<sp/>tolerance)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pivoting<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simpleSingularValueApproximation<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!simpleSingularValueApproximation)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zmax.reshape(Shape(m,1));</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zmin.reshape(Shape(m,1));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zmax(0,0)<sp/>=<sp/>r(0,0);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zmin(0,0)<sp/>=<sp/>1.0<sp/>/<sp/>r(0,0);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=1;<sp/>k&lt;maxRank;<sp/>++k)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pivoting)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>l=k;<sp/>l&lt;n;<sp/>++l)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnSquaredNorms[l]<sp/>-=<sp/><ref refid="group__LinearAlgebraFunctions_1gacb4fbe2464f536923f80991e7d7b9f16" kindref="member">squaredNorm</ref>(r(k,<sp/>l));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pivot<sp/>=<sp/>k<sp/>+<sp/><ref refid="group__LinearAlgebraFunctions_1ga19d5d885848fc3dc9364892229aaa59e" kindref="member">argMax</ref>(<ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(columnSquaredNorms,<sp/>Shape(0,k),<sp/>n));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pivot<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)k)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>k).swapData(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>pivot));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(columnSquaredNorms[k],<sp/>columnSquaredNorms[pivot]);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(permutation[k],<sp/>permutation[pivot]);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qrHouseholderStepImpl(k,<sp/>r,<sp/>rhs,<sp/>householder);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(simpleSingularValueApproximation)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NormType<sp/>nv<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga529b9955cbb9d3321a1d75288600701a" kindref="member">norm</ref>(r(k,k));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxApproxSingularValue<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">std::max</ref>(nv,<sp/>maxApproxSingularValue);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minApproxSingularValue<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">std::min</ref>(nv,<sp/>minApproxSingularValue);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incrementalMaxSingularValueApproximation(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>Shape(0,k),k+1),<sp/>zmax,<sp/>maxApproxSingularValue);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incrementalMinSingularValueApproximation(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(r,<sp/>Shape(0,k),k+1),<sp/>zmin,<sp/>minApproxSingularValue,<sp/>tolerance);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>u(k+1,k+1),<sp/>s(k+1,<sp/>1),<sp/>v(k+1,k+1);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1gaf20e05edcc344f32d96fdaf5a6b3b972" kindref="member">singularValueDecomposition</ref>(r.subarray(Shape(0,0),<sp/>Shape(k+1,k+1)),<sp/>u,<sp/>s,<sp/>v);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;estimate,<sp/>svd<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>minApproxSingularValue<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s(k,0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(epsilon<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tolerance<sp/>=<sp/>m*maxApproxSingularValue*NumericTraits&lt;T&gt;::epsilon();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(minApproxSingularValue<sp/>&gt;<sp/>tolerance)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rank;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pivoting<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>matrix<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>rank,<sp/>triangulize<sp/>the<sp/>rest<sp/>without<sp/>pivoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)rank;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal">qrTransformToUpperTriangular(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;<sp/>r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>rhs,<sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;MultiArrayIndex&gt;<sp/>&amp;<sp/>permutation,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.0)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>dontStoreHouseholderVectors;<sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qrTransformToTriangularImpl(r,<sp/>rhs,<sp/>dontStoreHouseholderVectors,<sp/>permutation,<sp/>epsilon);</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QR<sp/>algorithm<sp/>with<sp/>optional<sp/>row<sp/>pivoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal">qrTransformToLowerTriangular(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;<sp/>r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>rhs,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C3&gt;<sp/>&amp;<sp/>householderMatrix,<sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.0)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayVector&lt;MultiArrayIndex&gt;<sp/>permutation((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(rhs));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>)permutation.size();<sp/>++k)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutation[k]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>dontTransformRHS;<sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>StridedArrayTag&gt;<sp/>rt<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(r),</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ht<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(householderMatrix);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/>qrTransformToTriangularImpl(rt,<sp/>dontTransformRHS,<sp/>ht,<sp/>permutation,<sp/>epsilon);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>row<sp/>permutation<sp/>to<sp/>RHS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>tempRHS(rhs);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>)permutation.size();<sp/>++k)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(rhs,<sp/>k)<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(tempRHS,<sp/>permutation[k]);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rank;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QR<sp/>algorithm<sp/>without<sp/>column<sp/>pivoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">qrTransformToUpperTriangular(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;<sp/>r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>rhs,<sp/></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.0)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayVector&lt;MultiArrayIndex&gt;<sp/>noPivoting;<sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(qrTransformToUpperTriangular(r,<sp/>rhs,<sp/>noPivoting,<sp/>epsilon)<sp/>==<sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(r));</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>QR<sp/>algorithm<sp/>without<sp/>row<sp/>pivoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">qrTransformToLowerTriangular(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;<sp/>r,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>householder,<sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.0)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>noPivoting;<sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(qrTransformToLowerTriangular(r,<sp/>noPivoting,<sp/>householder,<sp/>epsilon)<sp/>==<sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(r));</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>restore<sp/>ordering<sp/>of<sp/>result<sp/>vector<sp/>elements<sp/>after<sp/>QR<sp/>solution<sp/>with<sp/>column<sp/>pivoting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Permutation&gt;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inverseRowPermutation(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;permuted,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;res,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Permutation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>permutation)</highlight></codeline>
<codeline lineno="582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(permuted);<sp/>++k)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>l=0;<sp/>l&lt;<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(permuted);<sp/>++l)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res(permutation[l],<sp/>k)<sp/>=<sp/>permuted(l,k);</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>applyHouseholderColumnReflections(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;householder,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;res)</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(householder);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(householder);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(res);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>m-1;<sp/>k<sp/>&gt;=<sp/>0;<sp/>--k)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>u<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(householder,<sp/>Shape(k,k),<sp/>n);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>l=0;<sp/>l&lt;rhsCount;<sp/>++l)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(res,<sp/>Shape(k,l),<sp/>n)<sp/>-=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(res,<sp/>Shape(k,l),<sp/>n),<sp/>u)<sp/>*<sp/>u;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="608"><highlight class="normal">linearSolveQRReplace(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;A,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;b,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C3&gt;<sp/>&amp;<sp/>res,<sp/></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.0)</highlight></codeline>
<codeline lineno="611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::difference_type<sp/>Shape;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(res);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rank<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">std::min</ref>(m,n);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>ul(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(0),<sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>(0));</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(rhsCount<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b),</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolveQR():<sp/>RHS<sp/>and<sp/>solution<sp/>must<sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>columns.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b),</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolveQR():<sp/>Coefficient<sp/>matrix<sp/>and<sp/>RHS<sp/>must<sp/>have<sp/>the<sp/>same<sp/>number<sp/>of<sp/>rows.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(n<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(res),</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolveQR():<sp/>Mismatch<sp/>between<sp/>column<sp/>count<sp/>of<sp/>coefficient<sp/>matrix<sp/>and<sp/>row<sp/>count<sp/>of<sp/>solution.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(epsilon<sp/>&gt;=<sp/>0.0,</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolveQR():<sp/>&apos;epsilon&apos;<sp/>must<sp/>be<sp/>non-negative.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimum<sp/>norm<sp/>solution<sp/>of<sp/>underdetermined<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>householderMatrix(n,<sp/>m);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>StridedArrayTag&gt;<sp/>ht<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(householderMatrix);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank<sp/>=<sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>)detail::qrTransformToLowerTriangular(A,<sp/>b,<sp/>ht,<sp/>epsilon);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.subarray(Shape(rank,0),<sp/>Shape(n,<sp/>rhsCount)).init(NumericTraits&lt;T&gt;::zero());</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rank<sp/>&lt;<sp/>m)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>is<sp/>also<sp/>rank-deficient<sp/>=&gt;<sp/>compute<sp/>minimum<sp/>norm<sp/>least<sp/>squares<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>Asub<sp/>=<sp/>A.subarray(ul,<sp/>Shape(m,rank));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::qrTransformToUpperTriangular(Asub,<sp/>b,<sp/>epsilon);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(A.subarray(ul,<sp/>Shape(rank,rank)),<sp/></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.subarray(ul,<sp/>Shape(rank,rhsCount)),<sp/></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.subarray(ul,<sp/>Shape(rank,<sp/>rhsCount)));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>has<sp/>full<sp/>rank<sp/>=&gt;<sp/>compute<sp/>minimum<sp/>norm<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga0a8f25a903663b7428cf0ba01b44b7e5" kindref="member">linearSolveLowerTriangular</ref>(A.subarray(ul,<sp/>Shape(rank,rank)),<sp/></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.subarray(ul,<sp/>Shape(rank,<sp/>rhsCount)),<sp/></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res.subarray(ul,<sp/>Shape(rank,<sp/>rhsCount)));</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::applyHouseholderColumnReflections(householderMatrix.subarray(ul,<sp/>Shape(n,<sp/>rank)),<sp/>res);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solution<sp/>of<sp/>well-determined<sp/>or<sp/>overdetermined<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;MultiArrayIndex&gt;<sp/>permutation((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)n);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;n;<sp/>++k)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutation[k]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank<sp/>=<sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>)detail::qrTransformToUpperTriangular(A,<sp/>b,<sp/>permutation,<sp/>epsilon);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>permutedSolution(n,<sp/>rhsCount);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rank<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>is<sp/>rank-deficient<sp/>=&gt;<sp/>compute<sp/>minimum<sp/>norm<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>householderMatrix(n,<sp/>rank);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>StridedArrayTag&gt;<sp/>ht<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(householderMatrix);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>Asub<sp/>=<sp/>A.subarray(ul,<sp/>Shape(rank,n));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::qrTransformToLowerTriangular(Asub,<sp/>ht,<sp/>epsilon);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga0a8f25a903663b7428cf0ba01b44b7e5" kindref="member">linearSolveLowerTriangular</ref>(A.subarray(ul,<sp/>Shape(rank,rank)),<sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.subarray(ul,<sp/>Shape(rank,<sp/>rhsCount)),<sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutedSolution.subarray(ul,<sp/>Shape(rank,<sp/>rhsCount)));</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::applyHouseholderColumnReflections(householderMatrix,<sp/>permutedSolution);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>system<sp/>has<sp/>full<sp/>rank<sp/>=&gt;<sp/>compute<sp/>exact<sp/>or<sp/>least<sp/>squares<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(A.subarray(ul,<sp/>Shape(rank,rank)),<sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.subarray(ul,<sp/>Shape(rank,rhsCount)),<sp/></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permutedSolution);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::inverseRowPermutation(permutedSolution,<sp/>res,<sp/>permutation);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)rank;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>linearSolveQR(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>b,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C3&gt;<sp/>&amp;<sp/>res)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>r(A),<sp/>rhs(b);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>linearSolveQRReplace(r,<sp/>rhs,<sp/>res);</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="697"><highlight class="comment">/**<sp/>\defgroup<sp/>MatrixAlgebra<sp/>Advanced<sp/>Matrix<sp/>Algebra</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/>\brief<sp/>Solution<sp/>of<sp/>linear<sp/>systems,<sp/>eigen<sp/>systems,<sp/>linear<sp/>least<sp/>squares<sp/>etc.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/>\ingroup<sp/>LinearAlgebraModule</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="703"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="704"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Create<sp/>the<sp/>inverse<sp/>or<sp/>pseudo-inverse<sp/>of<sp/>matrix<sp/>\a<sp/>v.</highlight></codeline>
<codeline lineno="705"><highlight class="comment"></highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>matrix<sp/>\a<sp/>v<sp/>is<sp/>square,<sp/>\a<sp/>res<sp/>must<sp/>have<sp/>the<sp/>same<sp/>shape<sp/>and<sp/>will<sp/>contain<sp/>the</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inverse<sp/>of<sp/>\a<sp/>v.<sp/>If<sp/>\a<sp/>v<sp/>is<sp/>rectangular,<sp/>\a<sp/>res<sp/>must<sp/>have<sp/>the<sp/>transposed<sp/>shape<sp/></highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>\a<sp/>v.<sp/>The<sp/>inverse<sp/>is<sp/>then<sp/>computed<sp/>in<sp/>the<sp/>least-squares<sp/></highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sense,<sp/>i.e.<sp/>\a<sp/>res<sp/>will<sp/>be<sp/>the<sp/>pseudo-inverse<sp/>(Moore-Penrose<sp/>inverse).</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>function<sp/>returns<sp/>&lt;tt&gt;true&lt;/tt&gt;<sp/>upon<sp/>success,<sp/>and<sp/>&lt;tt&gt;false&lt;/tt&gt;<sp/>if<sp/>\a<sp/>v<sp/></highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>invertible<sp/>(has<sp/>not<sp/>full<sp/>rank).<sp/>The<sp/>inverse<sp/>is<sp/>computed<sp/>by<sp/>means<sp/>of<sp/>QR<sp/></highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decomposition.<sp/>This<sp/>function<sp/>can<sp/>be<sp/>applied<sp/>in-place.</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="719" refid="group__MatrixAlgebra_1ga898e3fc2bdea632e7307604325b88016" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga898e3fc2bdea632e7307604325b88016" kindref="member">inverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/>&amp;v,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/>&amp;res)</highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1TinyVector" kindref="compound" tooltip="Class for fixed size vectors.This class contains an array of size SIZE of the specified VALUETYPE...">MultiArrayShape&lt;2&gt;::type</ref><sp/>Shape;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(v);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(v);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(n<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(res)<sp/>&amp;&amp;<sp/>m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(res),</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inverse():<sp/>shape<sp/>of<sp/>output<sp/>matrix<sp/>must<sp/>be<sp/>the<sp/>transpose<sp/>of<sp/>the<sp/>input<sp/>matrix&apos;<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m<sp/>&lt;<sp/>n)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, StridedArrayTag&gt;</ref><sp/>vt<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(v);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>r(vt.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>()),<sp/>q(n,<sp/>n);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__MatrixAlgebra_1ga3dd7bb55aeb57c7646b0eaf8142c7b12" kindref="member">qrDecomposition</ref>(vt,<sp/>q,<sp/>r))</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>a<sp/>didn&apos;t<sp/>have<sp/>full<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(r.<ref refid="classvigra_1_1MultiArrayView_1a2271545a765e00427cb6c59f6c4d78e0" kindref="member">subarray</ref>(Shape(0,0),<sp/>Shape(m,m)),<sp/></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(q).subarray(Shape(0,0),<sp/>Shape(m,n)),<sp/></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(res));<sp/></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>r(v.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>()),<sp/>q(m,<sp/>m);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__MatrixAlgebra_1ga3dd7bb55aeb57c7646b0eaf8142c7b12" kindref="member">qrDecomposition</ref>(v,<sp/>q,<sp/>r))</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>a<sp/>didn&apos;t<sp/>have<sp/>full<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(r.<ref refid="classvigra_1_1MultiArrayView_1a2271545a765e00427cb6c59f6c4d78e0" kindref="member">subarray</ref>(Shape(0,0),<sp/>Shape(n,n)),<sp/></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(q).subarray(Shape(0,0),<sp/>Shape(n,m)),<sp/></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res);<sp/></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Create<sp/>the<sp/>inverse<sp/>or<sp/>pseudo-inverse<sp/>of<sp/>matrix<sp/>\a<sp/>v.</highlight></codeline>
<codeline lineno="751"><highlight class="comment"></highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>result<sp/>is<sp/>returned<sp/>as<sp/>a<sp/>temporary<sp/>matrix.<sp/>If<sp/>the<sp/>matrix<sp/>\a<sp/>v<sp/>is<sp/>square,<sp/></highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>result<sp/>will<sp/>have<sp/>the<sp/>same<sp/>shape<sp/>and<sp/>contains<sp/>the<sp/>inverse<sp/>of<sp/>\a<sp/>v.<sp/></highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>\a<sp/>v<sp/>is<sp/>rectangular,<sp/>the<sp/>result<sp/>will<sp/>have<sp/>the<sp/>transposed<sp/>shape<sp/>of<sp/>\a<sp/>v.<sp/></highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>inverse<sp/>is<sp/>then<sp/>computed<sp/>in<sp/>the<sp/>least-squares<sp/></highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sense,<sp/>i.e.<sp/>\a<sp/>res<sp/>will<sp/>be<sp/>the<sp/>pseudo-inverse<sp/>(Moore-Penrose<sp/>inverse).</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>inverse<sp/>is<sp/>computed<sp/>by<sp/>means<sp/>of<sp/>QR<sp/>decomposition.<sp/>If<sp/>\a<sp/>v</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>invertible,<sp/>&lt;tt&gt;vigra::PreconditionViolation&lt;/tt&gt;<sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Usage:</highlight></codeline>
<codeline lineno="760"><highlight class="comment"></highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra::Matrix&lt;double&gt;<sp/>v(n,<sp/>n);</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>...;</highlight></codeline>
<codeline lineno="764"><highlight class="comment"></highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra::Matrix&lt;double&gt;<sp/>m<sp/>=<sp/>inverse(v);</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="767"><highlight class="comment"></highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="773" refid="group__MatrixAlgebra_1ga6d66eaad55a74cf250022e97ae5dd607" refkind="member"><highlight class="normal">TemporaryMatrix&lt;T&gt;<sp/><ref refid="group__MatrixAlgebra_1ga898e3fc2bdea632e7307604325b88016" kindref="member">inverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C&gt;</ref><sp/>&amp;v)</highlight></codeline>
<codeline lineno="774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>TemporaryMatrix&lt;T&gt;<sp/>ret(<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(v),<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(v));<sp/><sp/></highlight><highlight class="comment">//<sp/>transpose<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__MatrixAlgebra_1ga898e3fc2bdea632e7307604325b88016" kindref="member">inverse</ref>(v,<sp/>ret),</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inverse():<sp/>matrix<sp/>is<sp/>not<sp/>invertible.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="782"><highlight class="normal">TemporaryMatrix&lt;T&gt;<sp/><ref refid="group__MatrixAlgebra_1ga898e3fc2bdea632e7307604325b88016" kindref="member">inverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TemporaryMatrix&lt;T&gt;<sp/>&amp;v)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(v)<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(v))</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__MatrixAlgebra_1ga898e3fc2bdea632e7307604325b88016" kindref="member">inverse</ref>(v,<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">TemporaryMatrix&lt;T&gt;<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v)),</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inverse():<sp/>matrix<sp/>is<sp/>not<sp/>invertible.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TemporaryMatrix&lt;T&gt;<sp/>ret(<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(v),<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(v));<sp/><sp/></highlight><highlight class="comment">//<sp/>transpose<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__MatrixAlgebra_1ga898e3fc2bdea632e7307604325b88016" kindref="member">inverse</ref>(v,<sp/>ret),</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inverse():<sp/>matrix<sp/>is<sp/>not<sp/>invertible.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Compute<sp/>the<sp/>determinant<sp/>of<sp/>a<sp/>square<sp/>matrix.</highlight></codeline>
<codeline lineno="800"><highlight class="comment"></highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>method<sp/>must<sp/>be<sp/>one<sp/>of<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DL&gt;</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&quot;Cholesky&quot;&lt;DD&gt;<sp/>Compute<sp/>the<sp/>solution<sp/>by<sp/>means<sp/>of<sp/>Cholesky<sp/>decomposition.<sp/>This</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>is<sp/>faster<sp/>than<sp/>&quot;LU&quot;,<sp/>but<sp/>requires<sp/>the<sp/>matrix<sp/>\a<sp/>a<sp/></highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>symmetric<sp/>positive<sp/>definite.<sp/>If<sp/>this<sp/>is<sp/></highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>the<sp/>case,<sp/>a<sp/>&lt;tt&gt;ContractViolation&lt;/tt&gt;<sp/>exception<sp/>is<sp/>thrown.</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&quot;LU&quot;&lt;DD&gt;<sp/>(default)<sp/>Compute<sp/>the<sp/>solution<sp/>by<sp/>means<sp/>of<sp/>LU<sp/>decomposition.</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/DL&gt;</highlight></codeline>
<codeline lineno="810"><highlight class="comment"></highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1&gt;</highlight></codeline>
<codeline lineno="816" refid="group__MatrixAlgebra_1ga15edf238753abafb705497c01e38112c" refkind="member"><highlight class="normal">T<sp/><ref refid="group__MatrixAlgebra_1ga15edf238753abafb705497c01e38112c" kindref="member">determinant</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a,<sp/>std::string<sp/>method<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LU&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(a);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(a)<sp/>==<sp/>n,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;determinant():<sp/>Square<sp/>matrix<sp/>required.&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;method.size();<sp/>++k)</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method[k]<sp/>=<sp/>tolower(method[k]);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(0,0);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a(0,0)*a(1,1)<sp/>-<sp/>a(0,1)*a(1,0);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(method<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lu&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::determinantByLUDecomposition(a);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(method<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;cholesky&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>L(a.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>());</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__MatrixAlgebra_1gadeaf1b2866e989c2612712b86236196e" kindref="member">choleskyDecomposition</ref>(a,<sp/>L),</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;determinant():<sp/>Cholesky<sp/>method<sp/>requires<sp/>symmetric<sp/>positive<sp/>definite<sp/>matrix.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>det<sp/>=<sp/>L(0,0);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=1;<sp/>k&lt;n;<sp/>++k)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>*=<sp/>L(k,k);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(det);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;determinant():<sp/>Unknown<sp/>solution<sp/>method.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Compute<sp/>the<sp/>logarithm<sp/>of<sp/>the<sp/>determinant<sp/>of<sp/>a<sp/>symmetric<sp/>positive<sp/>definite<sp/>matrix.</highlight></codeline>
<codeline lineno="851"><highlight class="comment"></highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>useful<sp/>to<sp/>avoid<sp/>multiplication<sp/>of<sp/>very<sp/>large<sp/>numbers<sp/>in<sp/>big<sp/>matrices.</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>is<sp/>implemented<sp/>by<sp/>means<sp/>of<sp/>Cholesky<sp/>decomposition.</highlight></codeline>
<codeline lineno="854"><highlight class="comment"></highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1&gt;</highlight></codeline>
<codeline lineno="860" refid="group__MatrixAlgebra_1gaf664311a5660212a4c9ac7bdb0f1de98" refkind="member"><highlight class="normal">T<sp/><ref refid="group__MatrixAlgebra_1gaf664311a5660212a4c9ac7bdb0f1de98" kindref="member">logDeterminant</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(a);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(a)<sp/>==<sp/>n,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logDeterminant():<sp/>Square<sp/>matrix<sp/>required.&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(a(0,0)<sp/>&gt;<sp/>0.0,</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logDeterminant():<sp/>Matrix<sp/>not<sp/>positive<sp/>definite.&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__LinearAlgebraFunctions_1ga51ba49a20a6057642664f5be8521ec39" kindref="member">std::log</ref>(a(0,0));</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>det<sp/>=<sp/>a(0,0)*a(1,1)<sp/>-<sp/>a(0,1)*a(1,0);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(det<sp/>&gt;<sp/>0.0,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logDeterminant():<sp/>Matrix<sp/>not<sp/>positive<sp/>definite.&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__LinearAlgebraFunctions_1ga51ba49a20a6057642664f5be8521ec39" kindref="member">std::log</ref>(det);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>L(a.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>());</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__MatrixAlgebra_1gadeaf1b2866e989c2612712b86236196e" kindref="member">choleskyDecomposition</ref>(a,<sp/>L),</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logDeterminant():<sp/>Matrix<sp/>not<sp/>positive<sp/>definite.&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>logdet<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga51ba49a20a6057642664f5be8521ec39" kindref="member">std::log</ref>(L(0,0));<sp/></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=1;<sp/>k&lt;n;<sp/>++k)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logdet<sp/>+=<sp/><ref refid="group__LinearAlgebraFunctions_1ga51ba49a20a6057642664f5be8521ec39" kindref="member">std::log</ref>(L(k,k));<sp/><sp/></highlight><highlight class="comment">//<sp/>L(k,k)<sp/>is<sp/>guaranteed<sp/>to<sp/>be<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2.0*logdet;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Cholesky<sp/>decomposition.</highlight></codeline>
<codeline lineno="891"><highlight class="comment"></highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>A<sp/>must<sp/>be<sp/>a<sp/>symmetric<sp/>positive<sp/>definite<sp/>matrix,<sp/>and<sp/>\a<sp/>L<sp/>will<sp/>be<sp/>a<sp/>lower</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triangular<sp/>matrix,<sp/>such<sp/>that<sp/>(up<sp/>to<sp/>round-off<sp/>errors):</highlight></codeline>
<codeline lineno="894"><highlight class="comment"></highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>==<sp/>L<sp/>*<sp/>transpose(L);</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="898"><highlight class="comment"></highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>implementation<sp/>cannot<sp/>be<sp/>applied<sp/>in-place,<sp/>i.e.<sp/>&lt;tt&gt;&amp;L<sp/>==<sp/>&amp;A&lt;/tt&gt;<sp/>is<sp/>an<sp/>error.</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>\a<sp/>A<sp/>is<sp/>not<sp/>symmetric,<sp/>a<sp/>&lt;tt&gt;ContractViolation&lt;/tt&gt;<sp/>exception<sp/>is<sp/>thrown.<sp/>If<sp/>it</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>positive<sp/>definite,<sp/>the<sp/>function<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="902"><highlight class="comment"></highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="908" refid="group__MatrixAlgebra_1gadeaf1b2866e989c2612712b86236196e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1gadeaf1b2866e989c2612712b86236196e" kindref="member">choleskyDecomposition</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/>&amp;L)</highlight></codeline>
<codeline lineno="910"><highlight class="normal">{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A);<sp/></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A)<sp/>==<sp/>n,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;choleskyDecomposition():<sp/>Input<sp/>matrix<sp/>must<sp/>be<sp/>square.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(n<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(L)<sp/>&amp;&amp;<sp/>n<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(L),</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;choleskyDecomposition():<sp/>Output<sp/>matrix<sp/>must<sp/>have<sp/>same<sp/>shape<sp/>as<sp/>input<sp/>matrix.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gae205535ea08205a1d2c0b601f1358898" kindref="member">isSymmetric</ref>(A),</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;choleskyDecomposition():<sp/>Input<sp/>matrix<sp/>must<sp/>be<sp/>symmetric.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>d(0.0);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>j;<sp/>++k)<sp/></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>s(0.0);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>++i)<sp/></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>L(k,<sp/>i)*L(j,<sp/>i);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L(j,<sp/>k)<sp/>=<sp/>s<sp/>=<sp/>(A(j,<sp/>k)<sp/>-<sp/>s)/L(k,<sp/>k);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>d<sp/>+<sp/>s*s;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>A(j,<sp/>j)<sp/>-<sp/>d;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(d<sp/>&lt;=<sp/>0.0)</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>is<sp/>not<sp/>positive<sp/>definite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L(j,<sp/>j)<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga04ac28305eb14c42937b447c874518cd" kindref="member">std::sqrt</ref>(d);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k<sp/>=<sp/>j+1;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)<sp/></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L(j,<sp/>k)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>QR<sp/>decomposition.</highlight></codeline>
<codeline lineno="945"><highlight class="comment"></highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>a<sp/>contains<sp/>the<sp/>original<sp/>matrix,<sp/>results<sp/>are<sp/>returned<sp/>in<sp/>\a<sp/>q<sp/>and<sp/>\a<sp/>r,<sp/>where</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>q<sp/>is<sp/>a<sp/>orthogonal<sp/>matrix,<sp/>and<sp/>\a<sp/>r<sp/>is<sp/>an<sp/>upper<sp/>triangular<sp/>matrix,<sp/>such<sp/>that<sp/></highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(up<sp/>to<sp/>round-off<sp/>errors):</highlight></codeline>
<codeline lineno="949"><highlight class="comment"></highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>==<sp/>q<sp/>*<sp/>r;</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="953"><highlight class="comment"></highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>\a<sp/>a<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>rank,<sp/>the<sp/>function<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;.<sp/></highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>decomposition<sp/>is<sp/>computed<sp/>by<sp/>householder<sp/>transformations.<sp/>It<sp/>can<sp/>be<sp/>applied<sp/>in-place,</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i.e.<sp/>&lt;tt&gt;&amp;a<sp/>==<sp/>&amp;q&lt;/tt&gt;<sp/>or<sp/>&lt;tt&gt;&amp;a<sp/>==<sp/>&amp;r&lt;/tt&gt;<sp/>are<sp/>allowed.</highlight></codeline>
<codeline lineno="957"><highlight class="comment"></highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="963" refid="group__MatrixAlgebra_1ga3dd7bb55aeb57c7646b0eaf8142c7b12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga3dd7bb55aeb57c7646b0eaf8142c7b12" kindref="member">qrDecomposition</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/>&amp;q,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>&amp;r,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>0.0)</highlight></codeline>
<codeline lineno="966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(a);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(a);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(n<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(r)<sp/>&amp;&amp;<sp/>m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(r)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(q)<sp/>&amp;&amp;<sp/>m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(q),</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;qrDecomposition():<sp/>Matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>identityMatrix&lt;T&gt;(m);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2,T, StridedArrayTag&gt;</ref><sp/>tq<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(q);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;MultiArrayIndex&gt;</ref><sp/>noPivoting;<sp/></highlight><highlight class="comment">//<sp/>intentionally<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>)detail::qrTransformToUpperTriangular(r,<sp/>tq,<sp/>noPivoting,<sp/>epsilon)<sp/>==<sp/><ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">std::min</ref>(m,n));</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Deprecated,<sp/>use<sp/>\ref<sp/>linearSolveUpperTriangular().</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="984" refid="group__MatrixAlgebra_1ga58368198ae99f73f3f7b5a7dbf21844f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga58368198ae99f73f3f7b5a7dbf21844f" kindref="member">reverseElimination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/>&amp;b,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>x)</highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(r,<sp/>b,<sp/>x);</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Solve<sp/>a<sp/>linear<sp/>system<sp/>with<sp/>upper-triangular<sp/>coefficient<sp/>matrix.</highlight></codeline>
<codeline lineno="991"><highlight class="comment"></highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>square<sp/>matrix<sp/>\a<sp/>r<sp/>must<sp/>be<sp/>an<sp/>upper-triangular<sp/>coefficient<sp/>matrix<sp/>as<sp/>can,</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>example,<sp/>be<sp/>obtained<sp/>by<sp/>means<sp/>of<sp/>QR<sp/>decomposition.<sp/>If<sp/>\a<sp/>r<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>rank</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>function<sp/>fails<sp/>and<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;,<sp/>otherwise<sp/>it<sp/>returns<sp/>&lt;tt&gt;true&lt;/tt&gt;.<sp/>The<sp/></highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lower<sp/>triangular<sp/>part<sp/>of<sp/>matrix<sp/>\a<sp/>r<sp/>will<sp/>not<sp/>be<sp/>touched,<sp/>so<sp/>it<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>contain<sp/>zeros.</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>column<sp/>vectors<sp/>of<sp/>matrix<sp/>\a<sp/>b<sp/>are<sp/>the<sp/>right-hand<sp/>sides<sp/>of<sp/>the<sp/>equation<sp/>(several<sp/>equations</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>same<sp/>coefficients<sp/>can<sp/>thus<sp/>be<sp/>solved<sp/>in<sp/>one<sp/>go).<sp/>The<sp/>result<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>\a<sp/>x,<sp/>whose<sp/>columns<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns<sp/>of<sp/>\a<sp/>b.<sp/>This<sp/>implementation<sp/>can<sp/>be<sp/>applied<sp/>in-place,<sp/>i.e.<sp/>&lt;tt&gt;&amp;b<sp/>==<sp/>&amp;x&lt;/tt&gt;<sp/>is<sp/>allowed.</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>following<sp/>size<sp/>requirements<sp/>apply:</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowCount(r)<sp/>==<sp/>columnCount(r);</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowCount(r)<sp/>==<sp/>rowCount(b);</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnCount(r)<sp/>==<sp/>rowCount(x);</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnCount(b)<sp/>==<sp/>columnCount(x);</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"></highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1015" refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/>&amp;r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/>&amp;b,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>x)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1TinyVector" kindref="compound" tooltip="Class for fixed size vectors.This class contains an array of size SIZE of the specified VALUETYPE...">MultiArrayShape&lt;2&gt;::type</ref><sp/>Shape;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(r);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(r),</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolveUpperTriangular():<sp/>square<sp/>coefficient<sp/>matrix<sp/>required.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>&amp;&amp;<sp/>m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(x)<sp/>&amp;&amp;<sp/>rhsCount<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(x),</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolveUpperTriangular():<sp/>matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>rhsCount;<sp/>++k)</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=m-1;<sp/>i&gt;=0;<sp/>--i)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r(i,i)<sp/>==<sp/>NumericTraits&lt;T&gt;::zero())</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>r<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="group__TinyVectorOperators_1ga202143b556e7388b4895f457317eb086" kindref="member" tooltip="sum of the vector&amp;#39;s elements">sum</ref><sp/>=<sp/>b(i,<sp/>k);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>j=i+1;<sp/>j&lt;m;<sp/>++j)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>r(i,<sp/>j)<sp/>*<sp/>x(j,<sp/>k);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(i,<sp/>k)<sp/>=<sp/>sum<sp/>/<sp/>r(i,<sp/>i);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Solve<sp/>a<sp/>linear<sp/>system<sp/>with<sp/>lower-triangular<sp/>coefficient<sp/>matrix.</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"></highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>square<sp/>matrix<sp/>\a<sp/>l<sp/>must<sp/>be<sp/>a<sp/>lower-triangular<sp/>coefficient<sp/>matrix.<sp/>If<sp/>\a<sp/>l<sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doesn&apos;t<sp/>have<sp/>full<sp/>rank<sp/>the<sp/>function<sp/>fails<sp/>and<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;,<sp/></highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherwise<sp/>it<sp/>returns<sp/>&lt;tt&gt;true&lt;/tt&gt;.<sp/>The<sp/>upper<sp/>triangular<sp/>part<sp/>of<sp/>matrix<sp/>\a<sp/>l<sp/>will<sp/>not<sp/>be<sp/>touched,<sp/></highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>it<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>contain<sp/>zeros.</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>column<sp/>vectors<sp/>of<sp/>matrix<sp/>\a<sp/>b<sp/>are<sp/>the<sp/>right-hand<sp/>sides<sp/>of<sp/>the<sp/>equation<sp/>(several<sp/>equations</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>same<sp/>coefficients<sp/>can<sp/>thus<sp/>be<sp/>solved<sp/>in<sp/>one<sp/>go).<sp/>The<sp/>result<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>\a<sp/>x,<sp/>whose<sp/>columns<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns<sp/>of<sp/>\a<sp/>b.<sp/>This<sp/>implementation<sp/>can<sp/>be<sp/>applied<sp/>in-place,<sp/>i.e.<sp/>&lt;tt&gt;&amp;b<sp/>==<sp/>&amp;x&lt;/tt&gt;<sp/>is<sp/>allowed.</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>following<sp/>size<sp/>requirements<sp/>apply:</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowCount(l)<sp/>==<sp/>columnCount(l);</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowCount(l)<sp/>==<sp/>rowCount(b);</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnCount(l)<sp/>==<sp/>rowCount(x);</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnCount(b)<sp/>==<sp/>columnCount(x);</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"></highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1066" refid="group__MatrixAlgebra_1ga0a8f25a903663b7428cf0ba01b44b7e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga0a8f25a903663b7428cf0ba01b44b7e5" kindref="member">linearSolveLowerTriangular</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/>&amp;l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/>&amp;b,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>x)</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(l);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(l),</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolveLowerTriangular():<sp/>square<sp/>coefficient<sp/>matrix<sp/>required.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>&amp;&amp;<sp/>m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(x)<sp/>&amp;&amp;<sp/>n<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(x),</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolveLowerTriangular():<sp/>matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>n;<sp/>++k)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>i=0;<sp/>i&lt;m;<sp/>++i)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l(i,i)<sp/>==<sp/>NumericTraits&lt;T&gt;::zero())</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>l<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>rank</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="group__TinyVectorOperators_1ga202143b556e7388b4895f457317eb086" kindref="member" tooltip="sum of the vector&amp;#39;s elements">sum</ref><sp/>=<sp/>b(i,<sp/>k);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>j=0;<sp/>j&lt;i;<sp/>++j)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>l(i,<sp/>j)<sp/>*<sp/>x(j,<sp/>k);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(i,<sp/>k)<sp/>=<sp/>sum<sp/>/<sp/>l(i,<sp/>i);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Solve<sp/>a<sp/>linear<sp/>system<sp/>when<sp/>the<sp/>Cholesky<sp/>decomposition<sp/>of<sp/>the<sp/>left<sp/>hand<sp/>side<sp/>is<sp/>given.</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"></highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>square<sp/>matrix<sp/>\a<sp/>L<sp/>must<sp/>be<sp/>a<sp/>lower-triangular<sp/>matrix<sp/>resulting<sp/>from<sp/>Cholesky</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decomposition<sp/>of<sp/>some<sp/>positive<sp/>definite<sp/>coefficient<sp/>matrix.</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>column<sp/>vectors<sp/>of<sp/>matrix<sp/>\a<sp/>b<sp/>are<sp/>the<sp/>right-hand<sp/>sides<sp/>of<sp/>the<sp/>equation<sp/>(several<sp/>equations</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>same<sp/>matrix<sp/>\a<sp/>L<sp/>can<sp/>thus<sp/>be<sp/>solved<sp/>in<sp/>one<sp/>go).<sp/>The<sp/>result<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>\a<sp/>x,<sp/>whose<sp/>columns<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns<sp/>of<sp/>\a<sp/>b.<sp/>This<sp/>implementation<sp/>can<sp/>be<sp/>applied<sp/>in-place,<sp/>i.e.<sp/>&lt;tt&gt;&amp;b<sp/>==<sp/>&amp;x&lt;/tt&gt;<sp/>is<sp/>allowed.</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>following<sp/>size<sp/>requirements<sp/>apply:</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowCount(L)<sp/>==<sp/>columnCount(L);</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowCount(L)<sp/>==<sp/>rowCount(b);</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnCount(L)<sp/>==<sp/>rowCount(x);</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnCount(b)<sp/>==<sp/>columnCount(x);</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"></highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1116" refid="group__MatrixAlgebra_1ga134cdba4837625a7d004a67cd5907058" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga134cdba4837625a7d004a67cd5907058" kindref="member">choleskySolve</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/>&amp;<sp/>L,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>b,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solve<sp/>L<sp/>*<sp/>y<sp/>=<sp/>b<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga0a8f25a903663b7428cf0ba01b44b7e5" kindref="member">linearSolveLowerTriangular</ref>(L,<sp/>b,<sp/>x);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solve<sp/>L^T<sp/>*<sp/>x<sp/>=<sp/>y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(<ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(L),<sp/>x,<sp/>x);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Solve<sp/>a<sp/>linear<sp/>system.</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"></highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>A<sp/>is<sp/>the<sp/>coefficient<sp/>matrix,<sp/>and<sp/>the<sp/>column<sp/>vectors</highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>\a<sp/>b<sp/>are<sp/>the<sp/>right-hand<sp/>sides<sp/>of<sp/>the<sp/>equation<sp/>(so,<sp/>several<sp/>equations</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>same<sp/>coefficients<sp/>can<sp/>be<sp/>solved<sp/>in<sp/>one<sp/>go).<sp/>The<sp/>result<sp/>is<sp/>returned<sp/></highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>\a<sp/>res,<sp/>whose<sp/>columns<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns<sp/>of<sp/>\a<sp/>b.<sp/>The<sp/>number<sp/>of<sp/>columns<sp/>of<sp/>\a<sp/>A<sp/>must<sp/>equal<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>of</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>both<sp/>\a<sp/>b<sp/>and<sp/>\a<sp/>res,<sp/>and<sp/>the<sp/>number<sp/>of<sp/>columns<sp/>of<sp/>\a<sp/>b<sp/>and<sp/>\a<sp/>res<sp/>must<sp/>match.<sp/></highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>method<sp/>must<sp/>be<sp/>one<sp/>of<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DL&gt;</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&quot;Cholesky&quot;&lt;DD&gt;<sp/>Compute<sp/>the<sp/>solution<sp/>by<sp/>means<sp/>of<sp/>Cholesky<sp/>decomposition.<sp/>The<sp/></highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficient<sp/>matrix<sp/>\a<sp/>A<sp/>must<sp/>by<sp/>symmetric<sp/>positive<sp/>definite.<sp/>If</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>is<sp/>not<sp/>the<sp/>case,<sp/>the<sp/>function<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&quot;QR&quot;&lt;DD&gt;<sp/>(default)<sp/>Compute<sp/>the<sp/>solution<sp/>by<sp/>means<sp/>of<sp/>QR<sp/>decomposition.<sp/><sp/>The<sp/></highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficient<sp/>matrix<sp/>\a<sp/>A<sp/>can<sp/>be<sp/>square<sp/>or<sp/>rectangular.<sp/>In<sp/>the<sp/>latter<sp/>case,</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>must<sp/>have<sp/>more<sp/>rows<sp/>than<sp/>columns,<sp/>and<sp/>the<sp/>solution<sp/>will<sp/>be<sp/>computed<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>least<sp/>squares<sp/>sense.<sp/>If<sp/>\a<sp/>A<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>rank,<sp/>the<sp/>function<sp/></highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"></highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&quot;SVD&quot;&lt;DD&gt;<sp/>Compute<sp/>the<sp/>solution<sp/>by<sp/>means<sp/>of<sp/>singular<sp/>value<sp/>decomposition.<sp/><sp/>The<sp/></highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coefficient<sp/>matrix<sp/>\a<sp/>A<sp/>can<sp/>be<sp/>square<sp/>or<sp/>rectangular.<sp/>In<sp/>the<sp/>latter<sp/>case,</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>must<sp/>have<sp/>more<sp/>rows<sp/>than<sp/>columns,<sp/>and<sp/>the<sp/>solution<sp/>will<sp/>be<sp/>computed<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>least<sp/>squares<sp/>sense.<sp/>If<sp/>\a<sp/>A<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>rank,<sp/>the<sp/>function<sp/></highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"></highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&quot;NE&quot;&lt;DD&gt;<sp/>Compute<sp/>the<sp/>solution<sp/>by<sp/>means<sp/>of<sp/>the<sp/>normal<sp/>equations,<sp/>i.e.<sp/>by<sp/>applying<sp/>Cholesky</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decomposition<sp/>to<sp/>the<sp/>equivalent<sp/>problem<sp/>&lt;tt&gt;A&apos;*A*x<sp/>=<sp/>A&apos;*b&lt;/tt&gt;.<sp/>This<sp/>only<sp/>makes<sp/>sense</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>the<sp/>equation<sp/>is<sp/>to<sp/>be<sp/>solved<sp/>in<sp/>the<sp/>least<sp/>squares<sp/>sense,<sp/>i.e.<sp/>when<sp/>\a<sp/>A<sp/>is<sp/>a<sp/></highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectangular<sp/>matrix<sp/>with<sp/>more<sp/>rows<sp/>than<sp/>columns.<sp/>If<sp/>\a<sp/>A<sp/>doesn&apos;t<sp/>have<sp/>full<sp/>column<sp/>rank,<sp/></highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>function<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/DL&gt;</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>applied<sp/>in-place,<sp/>i.e.<sp/>&lt;tt&gt;&amp;b<sp/>==<sp/>&amp;res&lt;/tt&gt;<sp/>or<sp/>&lt;tt&gt;&amp;A<sp/>==<sp/>&amp;res&lt;/tt&gt;<sp/>are<sp/>allowed</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(provided<sp/>they<sp/>have<sp/>the<sp/>required<sp/>shapes).</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"></highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>following<sp/>size<sp/>requirements<sp/>apply:</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rowCount(r)<sp/>==<sp/>rowCount(b);</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnCount(r)<sp/>==<sp/>rowCount(x);</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnCount(b)<sp/>==<sp/>columnCount(x);</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"></highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_solve.hxx\&gt;<sp/>or&lt;br&gt;</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/linear_algebra.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="1174" refid="group__MatrixAlgebra_1gac51ce45fdb17942988cdc77e50611983" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1gac51ce45fdb17942988cdc77e50611983" kindref="member">linearSolve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/>&amp;A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/>&amp;b,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>&amp;<sp/>res,<sp/>std::string<sp/>method<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;QR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;::difference_type</ref><sp/>Shape;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;::view_type</ref><sp/>SubMatrix;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>n<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>m<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(n<sp/>&lt;=<sp/>m,</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolve():<sp/>Coefficient<sp/>matrix<sp/>A<sp/>must<sp/>have<sp/>at<sp/>least<sp/>as<sp/>many<sp/>rows<sp/>as<sp/>columns.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(n<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(res)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b)<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(res),</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolve():<sp/>matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;method.size();<sp/>++k)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method[k]<sp/>=<sp/>(std::string::value_type)tolower(method[k]);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(method<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;cholesky&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A)<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A),</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;linearSolve():<sp/>Cholesky<sp/>method<sp/>requires<sp/>square<sp/>coefficient<sp/>matrix.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>L(A.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>());</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="group__MatrixAlgebra_1gadeaf1b2866e989c2612712b86236196e" kindref="member">choleskyDecomposition</ref>(A,<sp/>L))</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>false<sp/>if<sp/>A<sp/>wasn&apos;t<sp/>symmetric<sp/>positive<sp/>definite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga134cdba4837625a7d004a67cd5907058" kindref="member">choleskySolve</ref>(L,<sp/>b,<sp/>res);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(method<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;qr&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>)linearSolveQR(A,<sp/>b,<sp/>res)<sp/>==<sp/>n;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(method<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ne&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1gac51ce45fdb17942988cdc77e50611983" kindref="member">linearSolve</ref>(<ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(A)*A,<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(A)*b,<sp/>res,<sp/></highlight><highlight class="stringliteral">&quot;Cholesky&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(method<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;svd&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>u(A.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>()),<sp/>s(n,<sp/>1),<sp/>v(n,<sp/>n);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rank<sp/>=<sp/>(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref>)<ref refid="group__MatrixAlgebra_1gaf20e05edcc344f32d96fdaf5a6b3b972" kindref="member">singularValueDecomposition</ref>(A,<sp/>u,<sp/>s,<sp/>v);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>t<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(u)*b;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>l=0;<sp/>l&lt;rhsCount;<sp/>++l)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;rank;<sp/>++k)</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t(k,l)<sp/>/=<sp/>s(k,0);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=rank;<sp/>k&lt;n;<sp/>++k)</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t(k,l)<sp/>=<sp/>NumericTraits&lt;T&gt;::zero();</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>v*t;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rank<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;linearSolve():<sp/>Unknown<sp/>solution<sp/>method.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1235"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>linalg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga898e3fc2bdea632e7307604325b88016" kindref="member">linalg::inverse</ref>;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga15edf238753abafb705497c01e38112c" kindref="member">linalg::determinant</ref>;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1gaf664311a5660212a4c9ac7bdb0f1de98" kindref="member">linalg::logDeterminant</ref>;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1gac51ce45fdb17942988cdc77e50611983" kindref="member">linalg::linearSolve</ref>;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga134cdba4837625a7d004a67cd5907058" kindref="member">linalg::choleskySolve</ref>;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1gadeaf1b2866e989c2612712b86236196e" kindref="member">linalg::choleskyDecomposition</ref>;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga3dd7bb55aeb57c7646b0eaf8142c7b12" kindref="member">linalg::qrDecomposition</ref>;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linalg::linearSolveUpperTriangular</ref>;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1ga0a8f25a903663b7428cf0ba01b44b7e5" kindref="member">linalg::linearSolveLowerTriangular</ref>;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>VIGRA_LINEAR_SOLVE_HXX</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/linear_solve.hxx"/>
  </compounddef>
</doxygen>
