<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="classvigra_1_1StandardValueAccessor" kind="class" prot="public">
    <compoundname>vigra::StandardValueAccessor</compoundname>
    <includes refid="accessor_8hxx" local="no">vigra/accessor.hxx</includes>
    <templateparamlist>
      <param>
        <type>class VALUETYPE</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classvigra_1_1StandardValueAccessor_1ad81add7f462b51d2bedbccd43c12e32a" prot="public" static="no">
        <type>VALUETYPE</type>
        <definition>typedef VALUETYPE value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the value_type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" line="202" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" bodystart="202" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvigra_1_1StandardValueAccessor_1a2eb541fc0f76bbde9028bc3c4f02ed04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ITERATOR</type>
          </param>
        </templateparamlist>
        <type>VALUETYPE</type>
        <definition>VALUETYPE operator()</definition>
        <argsstring>(ITERATOR const &amp;i) const </argsstring>
        <name>operator()</name>
        <param>
          <type>ITERATOR const &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the current data item. The type <computeroutput>ITERATOR::reference</computeroutput> is automatically converted to <computeroutput>VALUETYPE</computeroutput>. In case of a conversion floating point -&gt; integral this includes rounding and clipping. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" line="210" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" bodystart="209" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1StandardValueAccessor_1ab4a1e300f5bf29ed0a509cdf1c3bcea4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ITERATOR</type>
          </param>
          <param>
            <type>class DIFFERENCE</type>
          </param>
        </templateparamlist>
        <type>VALUETYPE</type>
        <definition>VALUETYPE operator()</definition>
        <argsstring>(ITERATOR const &amp;i, DIFFERENCE const &amp;diff) const </argsstring>
        <name>operator()</name>
        <param>
          <type>ITERATOR const &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>DIFFERENCE const &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the data item at an offset (can be 1D or 2D or higher order difference). The type <computeroutput>ITERATOR::index_reference</computeroutput> is automatically converted to <computeroutput>VALUETYPE</computeroutput>. In case of a conversion floating point -&gt; integral this includes rounding and clipping. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" line="219" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1StandardValueAccessor_1ab8a7388dced872227daaa1d0f563c54e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class ITERATOR</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void set</definition>
        <argsstring>(V value, ITERATOR const &amp;i) const </argsstring>
        <name>set</name>
        <param>
          <type>V</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ITERATOR const &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the current data item. The type <computeroutput>V</computeroutput> of the passed in <computeroutput>value</computeroutput> is automatically converted to <computeroutput>VALUETYPE</computeroutput>. In case of a conversion floating point -&gt; integral this includes rounding and clipping. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" line="228" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" bodystart="227" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1StandardValueAccessor_1a17d4193fd23ba4e268de238388febbc7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class ITERATOR</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void set</definition>
        <argsstring>(V value, ITERATOR &amp;i) const </argsstring>
        <name>set</name>
        <param>
          <type>V</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ITERATOR &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" line="233" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" bodystart="232" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1StandardValueAccessor_1ad5d06809bf9f223ea38a9061f123b3b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class ITERATOR</type>
          </param>
          <param>
            <type>class DIFFERENCE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void set</definition>
        <argsstring>(V value, ITERATOR const &amp;i, DIFFERENCE const &amp;diff) const </argsstring>
        <name>set</name>
        <param>
          <type>V</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ITERATOR const &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>DIFFERENCE const &amp;</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write the data item at an offset (can be 1D or 2D or higher order difference).. The type <computeroutput>V</computeroutput> of the passed in <computeroutput>value</computeroutput> is automatically converted to <computeroutput>VALUETYPE</computeroutput>. In case of a conversion floating point -&gt; integral this includes rounding and clipping. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" line="242" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" bodystart="241" bodyend="244"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Encapsulate access to the values an iterator points to. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classvigra_1_1StandardValueAccessor" kindref="compound">StandardValueAccessor</ref> is a trivial accessor that simply encapsulates the iterator&apos;s operator*() and operator[]() in its read and write functions. It passes its arguments <emphasis>by value</emphasis>. If the iterator returns its items by reference (such as <ref refid="classvigra_1_1ImageIterator" kindref="compound">vigra::ImageIterator</ref>), you can also use <ref refid="classvigra_1_1StandardAccessor" kindref="compound">StandardAccessor</ref>. These accessors have different optimization properties <ndash/> <ref refid="classvigra_1_1StandardAccessor" kindref="compound">StandardAccessor</ref> is usually faster for compound pixel types, while <ref refid="classvigra_1_1StandardValueAccessor" kindref="compound">StandardValueAccessor</ref> is faster for the built-in types.</para><para>When a floating point number is assigned by means of an accessor with integral value_type, the value is rounded and clipped as appropriate.</para><para><bold>#include</bold> &lt;<ref refid="accessor_8hxx_source" kindref="compound">vigra/accessor.hxx</ref>&gt;<linebreak/>
 Namespace: vigra </para>    </detaileddescription>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" line="198" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/accessor.hxx" bodystart="197" bodyend="245"/>
    <listofallmembers>
      <member refid="classvigra_1_1StandardValueAccessor_1a2eb541fc0f76bbde9028bc3c4f02ed04" prot="public" virt="non-virtual"><scope>vigra::StandardValueAccessor</scope><name>operator()</name></member>
      <member refid="classvigra_1_1StandardValueAccessor_1ab4a1e300f5bf29ed0a509cdf1c3bcea4" prot="public" virt="non-virtual"><scope>vigra::StandardValueAccessor</scope><name>operator()</name></member>
      <member refid="classvigra_1_1StandardValueAccessor_1ab8a7388dced872227daaa1d0f563c54e" prot="public" virt="non-virtual"><scope>vigra::StandardValueAccessor</scope><name>set</name></member>
      <member refid="classvigra_1_1StandardValueAccessor_1a17d4193fd23ba4e268de238388febbc7" prot="public" virt="non-virtual"><scope>vigra::StandardValueAccessor</scope><name>set</name></member>
      <member refid="classvigra_1_1StandardValueAccessor_1ad5d06809bf9f223ea38a9061f123b3b7" prot="public" virt="non-virtual"><scope>vigra::StandardValueAccessor</scope><name>set</name></member>
      <member refid="classvigra_1_1StandardValueAccessor_1ad81add7f462b51d2bedbccd43c12e32a" prot="public" virt="non-virtual"><scope>vigra::StandardValueAccessor</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
