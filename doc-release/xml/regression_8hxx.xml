<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="regression_8hxx" kind="file">
    <compoundname>regression.hxx</compoundname>
    <includes refid="matrix_8hxx" local="yes">matrix.hxx</includes>
    <includes refid="linear__solve_8hxx" local="yes">linear_solve.hxx</includes>
    <includes refid="singular__value__decomposition_8hxx" local="yes">singular_value_decomposition.hxx</includes>
    <includes refid="numerictraits_8hxx" local="yes">numerictraits.hxx</includes>
    <includes refid="functorexpression_8hxx" local="yes">functorexpression.hxx</includes>
    <includedby refid="rf__ridge__split_8hxx" local="yes">vigra/random_forest/rf_ridge_split.hxx</includedby>
    <incdepgraph>
      <node id="7451">
        <label>multi_pointoperators.hxx</label>
        <link refid="multi__pointoperators_8hxx_source"/>
        <childnode refid="7447" relation="include">
        </childnode>
        <childnode refid="7452" relation="include">
        </childnode>
        <childnode refid="7453" relation="include">
        </childnode>
        <childnode refid="7456" relation="include">
        </childnode>
        <childnode refid="7454" relation="include">
        </childnode>
        <childnode refid="7409" relation="include">
        </childnode>
        <childnode refid="7413" relation="include">
        </childnode>
        <childnode refid="7434" relation="include">
        </childnode>
      </node>
      <node id="7435">
        <label>functional</label>
      </node>
      <node id="7408">
        <label>iomanip</label>
      </node>
      <node id="7418">
        <label>limits</label>
      </node>
      <node id="7422">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="7413" relation="include">
        </childnode>
        <childnode refid="7418" relation="include">
        </childnode>
      </node>
      <node id="7436">
        <label>iterator</label>
      </node>
      <node id="7409">
        <label>multi_array.hxx</label>
        <link refid="multi__array_8hxx_source"/>
        <childnode refid="7410" relation="include">
        </childnode>
        <childnode refid="7411" relation="include">
        </childnode>
        <childnode refid="7412" relation="include">
        </childnode>
        <childnode refid="7426" relation="include">
        </childnode>
        <childnode refid="7442" relation="include">
        </childnode>
        <childnode refid="7444" relation="include">
        </childnode>
        <childnode refid="7445" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7449" relation="include">
        </childnode>
        <childnode refid="7413" relation="include">
        </childnode>
        <childnode refid="7432" relation="include">
        </childnode>
      </node>
      <node id="7434">
        <label>inspector_passes.hxx</label>
        <link refid="inspector__passes_8hxx_source"/>
        <childnode refid="7413" relation="include">
        </childnode>
      </node>
      <node id="7423">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="7447">
        <label>initimage.hxx</label>
        <link refid="initimage_8hxx_source"/>
        <childnode refid="7446" relation="include">
        </childnode>
        <childnode refid="7439" relation="include">
        </childnode>
        <childnode refid="7448" relation="include">
        </childnode>
      </node>
      <node id="7433">
        <label>algorithm.hxx</label>
        <link refid="algorithm_8hxx_source"/>
        <childnode refid="7422" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7434" relation="include">
        </childnode>
        <childnode refid="7411" relation="include">
        </childnode>
        <childnode refid="7435" relation="include">
        </childnode>
        <childnode refid="7436" relation="include">
        </childnode>
      </node>
      <node id="7406">
        <label>cmath</label>
      </node>
      <node id="7416">
        <label>stdexcept</label>
      </node>
      <node id="7448">
        <label>functortraits.hxx</label>
        <link refid="functortraits_8hxx_source"/>
        <childnode refid="7435" relation="include">
        </childnode>
        <childnode refid="7413" relation="include">
        </childnode>
      </node>
      <node id="7438">
        <label>iteratortags.hxx</label>
        <link refid="iteratortags_8hxx_source"/>
        <childnode refid="7436" relation="include">
        </childnode>
      </node>
      <node id="7430">
        <label>string</label>
      </node>
      <node id="7452">
        <label>copyimage.hxx</label>
        <link refid="copyimage_8hxx_source"/>
        <childnode refid="7446" relation="include">
        </childnode>
      </node>
      <node id="7444">
        <label>basicimageview.hxx</label>
        <link refid="basicimageview_8hxx_source"/>
        <childnode refid="7445" relation="include">
        </childnode>
        <childnode refid="7447" relation="include">
        </childnode>
      </node>
      <node id="7439">
        <label>iteratortraits.hxx</label>
        <link refid="iteratortraits_8hxx_source"/>
        <childnode refid="7412" relation="include">
        </childnode>
        <childnode refid="7440" relation="include">
        </childnode>
      </node>
      <node id="7457">
        <label>linear_solve.hxx</label>
        <link refid="linear__solve_8hxx_source"/>
        <childnode refid="7458" relation="include">
        </childnode>
        <childnode refid="7430" relation="include">
        </childnode>
        <childnode refid="7432" relation="include">
        </childnode>
        <childnode refid="7405" relation="include">
        </childnode>
        <childnode refid="7459" relation="include">
        </childnode>
      </node>
      <node id="7420">
        <label>cfloat</label>
      </node>
      <node id="7459">
        <label>singular_value_decomposition.hxx</label>
        <link refid="singular__value__decomposition_8hxx_source"/>
        <childnode refid="7405" relation="include">
        </childnode>
        <childnode refid="7460" relation="include">
        </childnode>
      </node>
      <node id="7446">
        <label>utilities.hxx</label>
        <link refid="utilities_8hxx_source"/>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7428" relation="include">
        </childnode>
        <childnode refid="7413" relation="include">
        </childnode>
        <childnode refid="7424" relation="include">
        </childnode>
        <childnode refid="7437" relation="include">
        </childnode>
        <childnode refid="7432" relation="include">
        </childnode>
        <childnode refid="7430" relation="include">
        </childnode>
        <childnode refid="7429" relation="include">
        </childnode>
      </node>
      <node id="7415">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="7453">
        <label>transformimage.hxx</label>
        <link refid="transformimage_8hxx_source"/>
        <childnode refid="7446" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7439" relation="include">
        </childnode>
        <childnode refid="7442" relation="include">
        </childnode>
        <childnode refid="7448" relation="include">
        </childnode>
        <childnode refid="7454" relation="include">
        </childnode>
      </node>
      <node id="7424">
        <label>tuple.hxx</label>
        <link refid="tuple_8hxx_source"/>
        <childnode refid="7425" relation="include">
        </childnode>
      </node>
      <node id="7426">
        <label>tinyvector.hxx</label>
        <link refid="tinyvector_8hxx_source"/>
        <childnode refid="7406" relation="include">
        </childnode>
        <childnode refid="7427" relation="include">
        </childnode>
        <childnode refid="7407" relation="include">
        </childnode>
        <childnode refid="7411" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7428" relation="include">
        </childnode>
        <childnode refid="7413" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7431" relation="include">
        </childnode>
        <childnode refid="7432" relation="include">
        </childnode>
        <childnode refid="7437" relation="include">
        </childnode>
      </node>
      <node id="7450">
        <label>sys/types.h</label>
      </node>
      <node id="7454">
        <label>inspectimage.hxx</label>
        <link refid="inspectimage_8hxx_source"/>
        <childnode refid="7455" relation="include">
        </childnode>
        <childnode refid="7411" relation="include">
        </childnode>
        <childnode refid="7446" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7439" relation="include">
        </childnode>
        <childnode refid="7448" relation="include">
        </childnode>
        <childnode refid="7442" relation="include">
        </childnode>
        <childnode refid="7434" relation="include">
        </childnode>
      </node>
      <node id="7432">
        <label>mathutil.hxx</label>
        <link refid="mathutil_8hxx_source"/>
        <childnode refid="7406" relation="include">
        </childnode>
        <childnode refid="7427" relation="include">
        </childnode>
        <childnode refid="7421" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7428" relation="include">
        </childnode>
        <childnode refid="7424" relation="include">
        </childnode>
        <childnode refid="7422" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7433" relation="include">
        </childnode>
      </node>
      <node id="7414">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="7415" relation="include">
        </childnode>
        <childnode refid="7416" relation="include">
        </childnode>
      </node>
      <node id="7419">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="7417" relation="include">
        </childnode>
        <childnode refid="7418" relation="include">
        </childnode>
        <childnode refid="7420" relation="include">
        </childnode>
        <childnode refid="7421" relation="include">
        </childnode>
        <childnode refid="7413" relation="include">
        </childnode>
        <childnode refid="7422" relation="include">
        </childnode>
        <childnode refid="7423" relation="include">
        </childnode>
      </node>
      <node id="7455">
        <label>vector</label>
      </node>
      <node id="7445">
        <label>imageiterator.hxx</label>
        <link refid="imageiterator_8hxx_source"/>
        <childnode refid="7446" relation="include">
        </childnode>
        <childnode refid="7412" relation="include">
        </childnode>
        <childnode refid="7439" relation="include">
        </childnode>
        <childnode refid="7413" relation="include">
        </childnode>
      </node>
      <node id="7441">
        <label>iteratoradapter.hxx</label>
        <link refid="iteratoradapter_8hxx_source"/>
      </node>
      <node id="7404">
        <label>vigra/regression.hxx</label>
        <link refid="regression.hxx"/>
        <childnode refid="7405" relation="include">
        </childnode>
        <childnode refid="7457" relation="include">
        </childnode>
        <childnode refid="7459" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7461" relation="include">
        </childnode>
      </node>
      <node id="7440">
        <label>imageiteratoradapter.hxx</label>
        <link refid="imageiteratoradapter_8hxx_source"/>
        <childnode refid="7436" relation="include">
        </childnode>
      </node>
      <node id="7425">
        <label>utility</label>
      </node>
      <node id="7429">
        <label>sstream</label>
      </node>
      <node id="7442">
        <label>rgbvalue.hxx</label>
        <link refid="rgbvalue_8hxx_source"/>
        <childnode refid="7406" relation="include">
        </childnode>
        <childnode refid="7427" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7412" relation="include">
        </childnode>
        <childnode refid="7426" relation="include">
        </childnode>
        <childnode refid="7443" relation="include">
        </childnode>
      </node>
      <node id="7437">
        <label>diff2d.hxx</label>
        <link refid="diff2d_8hxx_source"/>
        <childnode refid="7406" relation="include">
        </childnode>
        <childnode refid="7407" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7438" relation="include">
        </childnode>
        <childnode refid="7439" relation="include">
        </childnode>
        <childnode refid="7441" relation="include">
        </childnode>
        <childnode refid="7424" relation="include">
        </childnode>
      </node>
      <node id="7428">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="7416" relation="include">
        </childnode>
        <childnode refid="7429" relation="include">
        </childnode>
        <childnode refid="7430" relation="include">
        </childnode>
        <childnode refid="7414" relation="include">
        </childnode>
      </node>
      <node id="7443">
        <label>static_assert.hxx</label>
        <link refid="static__assert_8hxx_source"/>
      </node>
      <node id="7460">
        <label>array_vector.hxx</label>
        <link refid="array__vector_8hxx_source"/>
        <childnode refid="7428" relation="include">
        </childnode>
        <childnode refid="7431" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7410" relation="include">
        </childnode>
        <childnode refid="7411" relation="include">
        </childnode>
        <childnode refid="7407" relation="include">
        </childnode>
      </node>
      <node id="7407">
        <label>iosfwd</label>
      </node>
      <node id="7427">
        <label>cstdlib</label>
      </node>
      <node id="7449">
        <label>multi_iterator.hxx</label>
        <link refid="multi__iterator_8hxx_source"/>
        <childnode refid="7450" relation="include">
        </childnode>
        <childnode refid="7426" relation="include">
        </childnode>
        <childnode refid="7438" relation="include">
        </childnode>
      </node>
      <node id="7458">
        <label>ctype.h</label>
      </node>
      <node id="7417">
        <label>climits</label>
      </node>
      <node id="7413">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="7414" relation="include">
        </childnode>
        <childnode refid="7417" relation="include">
        </childnode>
        <childnode refid="7418" relation="include">
        </childnode>
        <childnode refid="7411" relation="include">
        </childnode>
      </node>
      <node id="7461">
        <label>functorexpression.hxx</label>
        <link refid="functorexpression_8hxx_source"/>
      </node>
      <node id="7456">
        <label>combineimages.hxx</label>
        <link refid="combineimages_8hxx_source"/>
        <childnode refid="7446" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7448" relation="include">
        </childnode>
        <childnode refid="7406" relation="include">
        </childnode>
      </node>
      <node id="7421">
        <label>complex</label>
      </node>
      <node id="7405">
        <label>matrix.hxx</label>
        <link refid="matrix_8hxx_source"/>
        <childnode refid="7406" relation="include">
        </childnode>
        <childnode refid="7407" relation="include">
        </childnode>
        <childnode refid="7408" relation="include">
        </childnode>
        <childnode refid="7409" relation="include">
        </childnode>
        <childnode refid="7432" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7451" relation="include">
        </childnode>
      </node>
      <node id="7411">
        <label>algorithm</label>
      </node>
      <node id="7431">
        <label>memory.hxx</label>
        <link refid="memory_8hxx_source"/>
        <childnode refid="7413" relation="include">
        </childnode>
      </node>
      <node id="7412">
        <label>accessor.hxx</label>
        <link refid="accessor_8hxx_source"/>
        <childnode refid="7413" relation="include">
        </childnode>
        <childnode refid="7419" relation="include">
        </childnode>
        <childnode refid="7424" relation="include">
        </childnode>
      </node>
      <node id="7410">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7465">
        <label>vigra/random_forest_hdf5_impex.hxx</label>
        <link refid="random__forest__hdf5__impex_8hxx_source"/>
      </node>
      <node id="7463">
        <label>vigra/random_forest/rf_ridge_split.hxx</label>
        <link refid="rf__ridge__split_8hxx_source"/>
        <childnode refid="7464" relation="include">
        </childnode>
      </node>
      <node id="7464">
        <label>vigra/random_forest.hxx</label>
        <link refid="random__forest_8hxx_source"/>
        <childnode refid="7465" relation="include">
        </childnode>
      </node>
      <node id="7462">
        <label>vigra/regression.hxx</label>
        <link refid="regression.hxx"/>
        <childnode refid="7463" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structvigra_1_1linalg_1_1detail_1_1LarsData" prot="public">vigra::linalg::detail::LarsData</innerclass>
    <innerclass refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" prot="public">vigra::linalg::LeastAngleRegressionOptions</innerclass>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
    <innernamespace refid="namespacevigra_1_1linalg">vigra::linalg</innernamespace>
    <innernamespace refid="namespacevigra_1_1linalg_1_1detail">vigra::linalg::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2008<sp/>by<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_REGRESSION_HXX</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_REGRESSION_HXX</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;matrix.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;linear_solve.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;singular_value_decomposition.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;numerictraits.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;functorexpression.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">linalg</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">/**<sp/>\addtogroup<sp/>Optimization<sp/>Optimization<sp/>and<sp/>Regression</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="56"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Ordinary<sp/>Least<sp/>Squares<sp/>Regression.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>a<sp/>matrix<sp/>\a<sp/>A<sp/>with<sp/>&lt;tt&gt;m&lt;/tt&gt;<sp/>rows<sp/>and<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>columns<sp/>(with<sp/>&lt;tt&gt;m<sp/>\&gt;=<sp/>n&lt;/tt&gt;),</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>a<sp/>column<sp/>vector<sp/>\a<sp/>b<sp/>of<sp/>length<sp/>&lt;tt&gt;m&lt;/tt&gt;<sp/>rows,<sp/>this<sp/>function<sp/>computes</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>column<sp/>vector<sp/>\a<sp/>x<sp/>of<sp/>length<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>rows<sp/>that<sp/>solves<sp/>the<sp/>optimization<sp/>problem</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left|\left|\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right|\right|_2^2</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>\a<sp/>b<sp/>is<sp/>a<sp/>matrix<sp/>with<sp/>&lt;tt&gt;k&lt;/tt&gt;<sp/>columns,<sp/>\a<sp/>x<sp/>must<sp/>also<sp/>have</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;k&lt;/tt&gt;<sp/>columns,<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding<sp/>columns<sp/>of</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>b.<sp/>Note<sp/>that<sp/>all<sp/>matrices<sp/>must<sp/>already<sp/>have<sp/>the<sp/>correct<sp/>shape.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>is<sp/>just<sp/>another<sp/>name<sp/>for<sp/>\ref<sp/>linearSolve(),<sp/>perhaps</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leading<sp/>to<sp/>more<sp/>readable<sp/>code<sp/>when<sp/>\a<sp/>A<sp/>is<sp/>a<sp/>rectangular<sp/>matrix.<sp/>It<sp/>returns</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;false&lt;/tt&gt;<sp/>when<sp/>the<sp/>rank<sp/>of<sp/>\a<sp/>A<sp/>is<sp/>less<sp/>than<sp/>&lt;tt&gt;n&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>\ref<sp/>linearSolve()<sp/>for<sp/>more<sp/>documentation.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/regression.hxx\&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="group__Optimization_1gab3be347f5631d0aa2ee74c07479e0383" refkind="member"><highlight class="normal"><ref refid="group__Optimization_1gab3be347f5631d0aa2ee74c07479e0383" kindref="member">leastSquares</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>&amp;x,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>method<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;QR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__MatrixAlgebra_1gac51ce45fdb17942988cdc77e50611983" kindref="member">linearSolve</ref>(A,<sp/>b,<sp/>x,<sp/>method);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Weighted<sp/>Least<sp/>Squares<sp/>Regression.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>a<sp/>matrix<sp/>\a<sp/>A<sp/>with<sp/>&lt;tt&gt;m&lt;/tt&gt;<sp/>rows<sp/>and<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>columns<sp/>(with<sp/>&lt;tt&gt;m<sp/>\&gt;=<sp/>n&lt;/tt&gt;),</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>vector<sp/>\a<sp/>b<sp/>of<sp/>length<sp/>&lt;tt&gt;m&lt;/tt&gt;,<sp/>and<sp/>a<sp/>weight<sp/>vector<sp/>\a<sp/>weights<sp/>of<sp/>length<sp/>&lt;tt&gt;m&lt;/tt&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>non-negative<sp/>entries,<sp/>this<sp/>function<sp/>computes<sp/>the<sp/>vector<sp/>\a<sp/>x<sp/>of<sp/>length<sp/>&lt;tt&gt;n&lt;/tt&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>solves<sp/>the<sp/>optimization<sp/>problem</highlight></codeline>
<codeline lineno="93"><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left(\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right)^T</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\textrm{diag}(\textrm{\bf<sp/>weights})</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left(\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right)</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="99"><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>&lt;tt&gt;diag(weights)&lt;/tt&gt;<sp/>creates<sp/>a<sp/>diagonal<sp/>matrix<sp/>from<sp/>\a<sp/>weights.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>algorithm<sp/>calls<sp/>\ref<sp/>leastSquares()<sp/>on<sp/>the<sp/>equivalent<sp/>problem</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left|\left|\textrm{diag}(\textrm{\bf<sp/>weights})^{1/2}\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\textrm{diag}(\textrm{\bf<sp/>weights})^{1/2}<sp/>\textrm{\bf<sp/>b}\right|\right|_2^2</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="107"><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>the<sp/>square<sp/>root<sp/>of<sp/>\a<sp/>weights<sp/>is<sp/>just<sp/>taken<sp/>element-wise.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>\a<sp/>b<sp/>is<sp/>a<sp/>matrix<sp/>with<sp/>&lt;tt&gt;k&lt;/tt&gt;<sp/>columns,<sp/>\a<sp/>x<sp/>must<sp/>also<sp/>have</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;k&lt;/tt&gt;<sp/>columns,<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding<sp/>columns<sp/>of</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>b.<sp/>Note<sp/>that<sp/>all<sp/>matrices<sp/>must<sp/>already<sp/>have<sp/>the<sp/>correct<sp/>shape.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>function<sp/>returns</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;false&lt;/tt&gt;<sp/>when<sp/>the<sp/>rank<sp/>of<sp/>the<sp/>weighted<sp/>matrix<sp/>\a<sp/>A<sp/>is<sp/>less<sp/>than<sp/>&lt;tt&gt;n&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/regression.hxx\&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C4&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="group__Optimization_1ga591ca4f43e4114253d7bfa2953f07c4d" refkind="member"><highlight class="normal"><ref refid="group__Optimization_1ga591ca4f43e4114253d7bfa2953f07c4d" kindref="member">weightedLeastSquares</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;weights,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C4&gt;</ref><sp/>&amp;x,<sp/>std::string<sp/>method<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;QR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Real;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(rows<sp/>&gt;=<sp/>cols,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedLeastSquares():<sp/>Input<sp/>matrix<sp/>A<sp/>must<sp/>be<sp/>rectangular<sp/>with<sp/>rowCount<sp/>&gt;=<sp/>columnCount.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>==<sp/>rows,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedLeastSquares():<sp/>Shape<sp/>mismatch<sp/>between<sp/>matrices<sp/>A<sp/>and<sp/>b.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(weights)<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(weights)<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedLeastSquares():<sp/>Weight<sp/>matrix<sp/>has<sp/>wrong<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(x)<sp/>==<sp/>cols<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(x)<sp/>==<sp/>rhsCount,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedLeastSquares():<sp/>Result<sp/>matrix<sp/>x<sp/>has<sp/>wrong<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>wa(A.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>()),<sp/>wb(b.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;rows;<sp/>++k)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(weights(k,0)<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedLeastSquares():<sp/>Weights<sp/>must<sp/>be<sp/>positive.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>w<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga04ac28305eb14c42937b447c874518cd" kindref="member">std::sqrt</ref>(weights(k,0));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;cols;<sp/>++l)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wa(k,l)<sp/>=<sp/>w<sp/>*<sp/>A(k,l);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;rhsCount;<sp/>++l)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wb(k,l)<sp/>=<sp/>w<sp/>*<sp/>b(k,l);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1gab3be347f5631d0aa2ee74c07479e0383" kindref="member">leastSquares</ref>(wa,<sp/>wb,<sp/>x,<sp/>method);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Ridge<sp/>Regression.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>a<sp/>matrix<sp/>\a<sp/>A<sp/>with<sp/>&lt;tt&gt;m&lt;/tt&gt;<sp/>rows<sp/>and<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>columns<sp/>(with<sp/>&lt;tt&gt;m<sp/>\&gt;=<sp/>n&lt;/tt&gt;),</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>vector<sp/>\a<sp/>b<sp/>of<sp/>length<sp/>&lt;tt&gt;m&lt;/tt&gt;,<sp/>and<sp/>a<sp/>regularization<sp/>parameter<sp/>&lt;tt&gt;lambda<sp/>\&gt;=<sp/>0.0&lt;/tt&gt;,</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>function<sp/>computes<sp/>the<sp/>vector<sp/>\a<sp/>x<sp/>of<sp/>length<sp/>&lt;tt&gt;n&lt;/tt&gt;</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>solves<sp/>the<sp/>optimization<sp/>problem</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left|\left|\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right|\right|_2^2<sp/>+</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\lambda<sp/>\textrm{\bf<sp/>x}^T\textrm{\bf<sp/>x}</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="167"><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>implemented<sp/>by<sp/>means<sp/>of<sp/>\ref<sp/>singularValueDecomposition().</highlight></codeline>
<codeline lineno="169"><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>\a<sp/>b<sp/>is<sp/>a<sp/>matrix<sp/>with<sp/>&lt;tt&gt;k&lt;/tt&gt;<sp/>columns,<sp/>\a<sp/>x<sp/>must<sp/>also<sp/>have</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;k&lt;/tt&gt;<sp/>columns,<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding<sp/>columns<sp/>of</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>b.<sp/>Note<sp/>that<sp/>all<sp/>matrices<sp/>must<sp/>already<sp/>have<sp/>the<sp/>correct<sp/>shape.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>function<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;<sp/>if<sp/>the<sp/>rank<sp/>of<sp/>\a<sp/>A<sp/>is<sp/>less<sp/>than<sp/>&lt;tt&gt;n&lt;/tt&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>&lt;tt&gt;lambda<sp/>==<sp/>0.0&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/regression.hxx\&gt;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="group__Optimization_1ga647810e9f3f2ff2e401f410b4855c58a" refkind="member"><highlight class="normal"><ref refid="group__Optimization_1ga647810e9f3f2ff2e401f410b4855c58a" kindref="member">ridgeRegression</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>&amp;x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Real;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(rows<sp/>&gt;=<sp/>cols,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ridgeRegression():<sp/>Input<sp/>matrix<sp/>A<sp/>must<sp/>be<sp/>rectangular<sp/>with<sp/>rowCount<sp/>&gt;=<sp/>columnCount.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>==<sp/>rows,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ridgeRegression():<sp/>Shape<sp/>mismatch<sp/>between<sp/>matrices<sp/>A<sp/>and<sp/>b.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(x)<sp/>==<sp/>cols<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(x)<sp/>==<sp/>rhsCount,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ridgeRegression():<sp/>Result<sp/>matrix<sp/>x<sp/>has<sp/>wrong<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(lambda<sp/>&gt;=<sp/>0.0,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ridgeRegression():<sp/>lambda<sp/>&gt;=<sp/>0.0<sp/>required.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>rows;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>cols;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>u(m,<sp/>n),<sp/>s(n,<sp/>1),<sp/>v(n,<sp/>n);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/><ref refid="group__MatrixAlgebra_1gaf20e05edcc344f32d96fdaf5a6b3b972" kindref="member">singularValueDecomposition</ref>(A,<sp/>u,<sp/>s,<sp/>v);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rank<sp/>&lt;<sp/>n<sp/>&amp;&amp;<sp/>lambda<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>t<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(u)*b;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;cols;<sp/>++k)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;rhsCount;<sp/>++l)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t(k,l)<sp/>*=<sp/>s(k,0)<sp/>/<sp/>(<ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(s(k,0))<sp/>+<sp/>lambda);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>v*t;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Weighted<sp/>ridge<sp/>Regression.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>a<sp/>matrix<sp/>\a<sp/>A<sp/>with<sp/>&lt;tt&gt;m&lt;/tt&gt;<sp/>rows<sp/>and<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>columns<sp/>(with<sp/>&lt;tt&gt;m<sp/>\&gt;=<sp/>n&lt;/tt&gt;),</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>vector<sp/>\a<sp/>b<sp/>of<sp/>length<sp/>&lt;tt&gt;m&lt;/tt&gt;,<sp/>a<sp/>weight<sp/>vector<sp/>\a<sp/>weights<sp/>of<sp/>length<sp/>&lt;tt&gt;m&lt;/tt&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>non-negative<sp/>entries,<sp/>and<sp/>a<sp/>regularization<sp/>parameter<sp/>&lt;tt&gt;lambda<sp/>&gt;=<sp/>0.0&lt;/tt&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>function<sp/>computes<sp/>the<sp/>vector<sp/>\a<sp/>x<sp/>of<sp/>length<sp/>&lt;tt&gt;n&lt;/tt&gt;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>solves<sp/>the<sp/>optimization<sp/>problem</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left(\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right)^T</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\textrm{diag}(\textrm{\bf<sp/>weights})</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left(\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right)<sp/>+</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\lambda<sp/>\textrm{\bf<sp/>x}^T\textrm{\bf<sp/>x}</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="230"><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>&lt;tt&gt;diag(weights)&lt;/tt&gt;<sp/>creates<sp/>a<sp/>diagonal<sp/>matrix<sp/>from<sp/>\a<sp/>weights.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>algorithm<sp/>calls<sp/>\ref<sp/>ridgeRegression()<sp/>on<sp/>the<sp/>equivalent<sp/>problem</highlight></codeline>
<codeline lineno="233"><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left|\left|\textrm{diag}(\textrm{\bf<sp/>weights})^{1/2}\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\textrm{diag}(\textrm{\bf<sp/>weights})^{1/2}<sp/>\textrm{\bf<sp/>b}\right|\right|_2^2<sp/>+</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\lambda<sp/>\textrm{\bf<sp/>x}^T\textrm{\bf<sp/>x}</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="239"><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>the<sp/>square<sp/>root<sp/>of<sp/>\a<sp/>weights<sp/>is<sp/>just<sp/>taken<sp/>element-wise.<sp/><sp/>This<sp/>solution<sp/>is</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>computed<sp/>by<sp/>means<sp/>of<sp/>\ref<sp/>singularValueDecomposition().</highlight></codeline>
<codeline lineno="242"><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>\a<sp/>b<sp/>is<sp/>a<sp/>matrix<sp/>with<sp/>&lt;tt&gt;k&lt;/tt&gt;<sp/>columns,<sp/>\a<sp/>x<sp/>must<sp/>also<sp/>have</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;k&lt;/tt&gt;<sp/>columns,<sp/>which<sp/>will<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding<sp/>columns<sp/>of</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>b.<sp/>Note<sp/>that<sp/>all<sp/>matrices<sp/>must<sp/>already<sp/>have<sp/>the<sp/>correct<sp/>shape.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>function<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;<sp/>if<sp/>the<sp/>rank<sp/>of<sp/>\a<sp/>A<sp/>is<sp/>less<sp/>than<sp/>&lt;tt&gt;n&lt;/tt&gt;</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>&lt;tt&gt;lambda<sp/>==<sp/>0.0&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"></highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/regression.hxx\&gt;</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C4&gt;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group__Optimization_1gade6eb7c915e0e6b1820974316b1d5d32" refkind="member"><highlight class="normal"><ref refid="group__Optimization_1gade6eb7c915e0e6b1820974316b1d5d32" kindref="member">weightedRidgeRegression</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;weights,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C4&gt;</ref><sp/>&amp;x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lambda)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Real;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhsCount<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(rows<sp/>&gt;=<sp/>cols,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedRidgeRegression():<sp/>Input<sp/>matrix<sp/>A<sp/>must<sp/>be<sp/>rectangular<sp/>with<sp/>rowCount<sp/>&gt;=<sp/>columnCount.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>==<sp/>rows,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedRidgeRegression():<sp/>Shape<sp/>mismatch<sp/>between<sp/>matrices<sp/>A<sp/>and<sp/>b.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(weights)<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(weights)<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedRidgeRegression():<sp/>Weight<sp/>matrix<sp/>has<sp/>wrong<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(x)<sp/>==<sp/>cols<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(x)<sp/>==<sp/>rhsCount,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedRidgeRegression():<sp/>Result<sp/>matrix<sp/>x<sp/>has<sp/>wrong<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(lambda<sp/>&gt;=<sp/>0.0,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedRidgeRegression():<sp/>lambda<sp/>&gt;=<sp/>0.0<sp/>required.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>wa(A.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>()),<sp/>wb(b.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;rows;<sp/>++k)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(weights(k,0)<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;weightedRidgeRegression():<sp/>Weights<sp/>must<sp/>be<sp/>positive.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>w<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga04ac28305eb14c42937b447c874518cd" kindref="member">std::sqrt</ref>(weights(k,0));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;cols;<sp/>++l)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wa(k,l)<sp/>=<sp/>w<sp/>*<sp/>A(k,l);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>l=0;<sp/>l&lt;rhsCount;<sp/>++l)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wb(k,l)<sp/>=<sp/>w<sp/>*<sp/>b(k,l);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1ga647810e9f3f2ff2e401f410b4855c58a" kindref="member">ridgeRegression</ref>(wa,<sp/>wb,<sp/>x,<sp/>lambda);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Ridge<sp/>Regression<sp/>with<sp/>many<sp/>lambdas.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"></highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>executes<sp/>\ref<sp/>ridgeRegression()<sp/>for<sp/>a<sp/>sequence<sp/>of<sp/>regularization<sp/>parameters.<sp/>This</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>implemented<sp/>so<sp/>that<sp/>the<sp/>\ref<sp/>singularValueDecomposition()<sp/>has<sp/>to<sp/>be<sp/>executed<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>lambda<sp/>must<sp/>be<sp/>an<sp/>array<sp/>conforming<sp/>to<sp/>the<sp/>&lt;tt&gt;std::vector&lt;/tt&gt;<sp/>interface,<sp/>i.e.<sp/>must</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>support<sp/>&lt;tt&gt;lambda.size()&lt;/tt&gt;<sp/>and<sp/>&lt;tt&gt;lambda[k]&lt;/tt&gt;.<sp/>The<sp/>columns<sp/>of<sp/>the<sp/>matrix<sp/>\a<sp/>x</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>contain<sp/>the<sp/>solutions<sp/>for<sp/>the<sp/>corresponding<sp/>lambda,<sp/>so<sp/>the<sp/><sp/>number<sp/>of<sp/>columns<sp/>of</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>matrix<sp/>\a<sp/>x<sp/>must<sp/>be<sp/>equal<sp/>to<sp/>&lt;tt&gt;lambda.size()&lt;/tt&gt;,<sp/>and<sp/>\a<sp/>b<sp/>must<sp/>be<sp/>a<sp/>columns<sp/>vector,</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i.e.<sp/>cannot<sp/>contain<sp/>several<sp/>right<sp/>hand<sp/>sides<sp/>at<sp/>once.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>function<sp/>returns<sp/>&lt;tt&gt;false&lt;/tt&gt;<sp/>when<sp/>the<sp/>matrix<sp/>\a<sp/>A<sp/>is<sp/>rank<sp/>deficient.<sp/>If<sp/>this</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>happens,<sp/>and<sp/>one<sp/>of<sp/>the<sp/>lambdas<sp/>is<sp/>zero,<sp/>the<sp/>corresponding<sp/>column<sp/>of<sp/>\a<sp/>x<sp/>will<sp/>be<sp/>skipped.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/regression.hxx\&gt;</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="group__Optimization_1gad20a4d83649e2c65d9d553105882af9f" refkind="member"><highlight class="normal"><ref refid="group__Optimization_1gad20a4d83649e2c65d9d553105882af9f" kindref="member">ridgeRegressionSeries</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>&amp;x,<sp/>Array<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>lambda)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>Real;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cols<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lambdaCount<sp/>=<sp/>lambda.size();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(rows<sp/>&gt;=<sp/>cols,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ridgeRegressionSeries():<sp/>Input<sp/>matrix<sp/>A<sp/>must<sp/>be<sp/>rectangular<sp/>with<sp/>rowCount<sp/>&gt;=<sp/>columnCount.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>==<sp/>rows<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b)<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ridgeRegressionSeries():<sp/>Shape<sp/>mismatch<sp/>between<sp/>matrices<sp/>A<sp/>and<sp/>b.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(x)<sp/>==<sp/>cols<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(x)<sp/>==<sp/>lambdaCount,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ridgeRegressionSeries():<sp/>Result<sp/>matrix<sp/>x<sp/>has<sp/>wrong<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>rows;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>cols;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>u(m,<sp/>n),<sp/>s(n,<sp/>1),<sp/>v(n,<sp/>n);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/>=<sp/><ref refid="group__MatrixAlgebra_1gaf20e05edcc344f32d96fdaf5a6b3b972" kindref="member">singularValueDecomposition</ref>(A,<sp/>u,<sp/>s,<sp/>v);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>xl<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(u)*b;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1Matrix" kindref="compound">Matrix&lt;T&gt;</ref><sp/>xt(cols,1);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;lambdaCount;<sp/>++i)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(lambda[i]<sp/>&gt;=<sp/>0.0,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ridgeRegressionSeries():<sp/>lambda<sp/>&gt;=<sp/>0.0<sp/>required.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lambda[i]<sp/>==<sp/>0.0<sp/>&amp;&amp;<sp/>rank<sp/>&lt;<sp/>rows)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;cols;<sp/>++k)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xt(k,0)<sp/>=<sp/>xl(k,0)<sp/>*<sp/>s(k,0)<sp/>/<sp/>(<ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(s(k,0))<sp/>+<sp/>lambda[i]);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(x,<sp/>i)<sp/>=<sp/>v*xt;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rank<sp/>==<sp/>n);</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="346"><highlight class="comment">/**<sp/>\brief<sp/>Pass<sp/>options<sp/>to<sp/>leastAngleRegression().</highlight></codeline>
<codeline lineno="347"><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/regression.hxx\&gt;</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="350"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" kindref="compound" tooltip="Pass options to leastAngleRegression().">LeastAngleRegressionOptions</ref></highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Mode<sp/>{<sp/>LARS,<sp/>LASSO,<sp/>NNLASSO<sp/>};</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Initialize<sp/>all<sp/>options<sp/>with<sp/>default<sp/>values.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1a857b414e001f5d5f2f357ad1ba6b7297" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1a857b414e001f5d5f2f357ad1ba6b7297" kindref="member">LeastAngleRegressionOptions</ref>()</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>max_solution_count(0),</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unconstrained_dimension_count(0),</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mode(LASSO),</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>least_squares_solutions(true)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Maximum<sp/>number<sp/>of<sp/>solutions<sp/>to<sp/>be<sp/>computed.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>\a<sp/>n<sp/>is<sp/>0<sp/>(the<sp/>default),<sp/>the<sp/>number<sp/>of<sp/>solutions<sp/>is<sp/>determined<sp/>by<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>solution<sp/>array.<sp/>Otherwise,<sp/>the<sp/>minimum<sp/>of<sp/>maxSolutionCount()<sp/>and<sp/>that</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length<sp/>is<sp/>taken.&lt;br&gt;</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default:<sp/>0<sp/>(use<sp/>length<sp/>of<sp/>solution<sp/>array)</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1a7d09e52d484f5aced17987ef9a9ea1bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" kindref="compound" tooltip="Pass options to leastAngleRegression().">LeastAngleRegressionOptions</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1a7d09e52d484f5aced17987ef9a9ea1bd" kindref="member">maxSolutionCount</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_solution_count<sp/>=<sp/>(int)n;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Set<sp/>the<sp/>mode<sp/>of<sp/>the<sp/>algorithm.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"></highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mode<sp/>must<sp/>be<sp/>one<sp/>of<sp/>&quot;lars&quot;,<sp/>&quot;lasso&quot;,<sp/>&quot;nnlasso&quot;.<sp/>The<sp/>function<sp/>just<sp/>calls</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>member<sp/>function<sp/>of<sp/>the<sp/>corresponding<sp/>name<sp/>to<sp/>set<sp/>the<sp/>mode.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"></highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default:<sp/>&quot;lasso&quot;</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1ab8a57eca5fbf53a5daaa26f8bf261ead" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" kindref="compound" tooltip="Pass options to leastAngleRegression().">LeastAngleRegressionOptions</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1ab8a57eca5fbf53a5daaa26f8bf261ead" kindref="member">setMode</ref>(std::string<sp/>mode)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;mode.size();<sp/>++k)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode[k]<sp/>=<sp/>(std::string::value_type)tolower(mode[k]);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lars&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1aede22ea3ca20637290b3b3f1589e467f" kindref="member">lars</ref>();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;lasso&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1acaf3bd267d5d659368770b92bb37a6b7" kindref="member">lasso</ref>();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;nnlasso&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1a7d732a5ef3bc9181382b0b0e491d3221" kindref="member">nnlasso</ref>();</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_fail(</highlight><highlight class="stringliteral">&quot;LeastAngleRegressionOptions.setMode():<sp/>Invalid<sp/>mode.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Use<sp/>the<sp/>plain<sp/>LARS<sp/>algorithm.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default:<sp/>inactive</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1aede22ea3ca20637290b3b3f1589e467f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" kindref="compound" tooltip="Pass options to leastAngleRegression().">LeastAngleRegressionOptions</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1aede22ea3ca20637290b3b3f1589e467f" kindref="member">lars</ref>()</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>LARS;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Use<sp/>the<sp/>LASSO<sp/>modification<sp/>of<sp/>the<sp/>LARS<sp/>algorithm.</highlight></codeline>
<codeline lineno="412"><highlight class="comment"></highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>allows<sp/>features<sp/>to<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>active<sp/>set<sp/>under<sp/>certain<sp/>conditions.&lt;br&gt;</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default:<sp/>active</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1acaf3bd267d5d659368770b92bb37a6b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" kindref="compound" tooltip="Pass options to leastAngleRegression().">LeastAngleRegressionOptions</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1acaf3bd267d5d659368770b92bb37a6b7" kindref="member">lasso</ref>()</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>LASSO;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Use<sp/>the<sp/>non-negative<sp/>LASSO<sp/>modification<sp/>of<sp/>the<sp/>LARS<sp/>algorithm.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"></highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>enforces<sp/>all<sp/>non-zero<sp/>entries<sp/>in<sp/>the<sp/>solution<sp/>to<sp/>be<sp/>positive.&lt;br&gt;</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default:<sp/>inactive</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1a7d732a5ef3bc9181382b0b0e491d3221" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" kindref="compound" tooltip="Pass options to leastAngleRegression().">LeastAngleRegressionOptions</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1a7d732a5ef3bc9181382b0b0e491d3221" kindref="member">nnlasso</ref>()</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>NNLASSO;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Compute<sp/>least<sp/>squares<sp/>solutions.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"></highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>least<sp/>angle<sp/>regression<sp/>to<sp/>determine<sp/>active<sp/>sets,<sp/>but</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>least<sp/>squares<sp/>solutions<sp/>for<sp/>the<sp/>features<sp/>in<sp/>each<sp/>active<sp/>set,</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instead<sp/>of<sp/>constrained<sp/>solutions.&lt;br&gt;</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Default:<sp/>&lt;tt&gt;true&lt;/tt&gt;</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1ace0ea38e4ecc228ec83004e96ddc4fae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" kindref="compound" tooltip="Pass options to leastAngleRegression().">LeastAngleRegressionOptions</ref><sp/>&amp;<sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions_1ace0ea38e4ecc228ec83004e96ddc4fae" kindref="member">leastSquaresSolutions</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>select<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>least_squares_solutions<sp/>=<sp/>select;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_solution_count,<sp/>unconstrained_dimension_count;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>Mode<sp/>mode;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>least_squares_solutions;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">};</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2&gt;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LarsData</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1TinyVector" kindref="compound" tooltip="Class for fixed size vectors.This class contains an array of size SIZE of the specified VALUETYPE...">MultiArrayShape&lt;2&gt;::type</ref><sp/>Shape;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>activeSetSize;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/>A;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/>b;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>R,<sp/>qtb,<sp/>lars_solution,<sp/>lars_prediction,<sp/>next_lsq_solution,<sp/>next_lsq_prediction,<sp/>searchVector;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;MultiArrayIndex&gt;</ref><sp/>columnPermutation;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>data<sp/>for<sp/>a<sp/>new<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>LarsData(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>Ai,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>bi)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>activeSetSize(1),</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A(Ai),<sp/>b(bi),<sp/>R(A),<sp/>qtb(b),</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lars_solution(A.shape(1),<sp/>1),<sp/>lars_prediction(A.shape(0),<sp/>1),</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_lsq_solution(A.shape(1),<sp/>1),<sp/>next_lsq_prediction(A.shape(0),<sp/>1),<sp/>searchVector(A.shape(0),<sp/>1),</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>columnPermutation(A.shape(1))</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;columnPermutation.size();<sp/>++k)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnPermutation[k]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data<sp/>for<sp/>the<sp/>recursive<sp/>call<sp/>in<sp/>nnlassolsq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>LarsData(LarsData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asetSize)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>activeSetSize(asetSize),</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A(d.R.subarray(Shape(0,0),<sp/>Shape(d.A.shape(0),<sp/>activeSetSize))),<sp/>b(d.qtb),<sp/>R(A),<sp/>qtb(b),</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lars_solution(d.lars_solution.subarray(Shape(0,0),<sp/>Shape(activeSetSize,<sp/>1))),<sp/>lars_prediction(d.lars_prediction),</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_lsq_solution(d.next_lsq_solution.subarray(Shape(0,0),<sp/>Shape(activeSetSize,<sp/>1))),<sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_lsq_prediction(d.next_lsq_prediction),<sp/>searchVector(d.searchVector),</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>columnPermutation(A.shape(1))</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;columnPermutation.size();<sp/>++k)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnPermutation[k]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal">};</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array3&gt;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal">leastAngleRegressionMainLoop(LarsData&lt;T,<sp/>C1,<sp/>C2&gt;<sp/>&amp;<sp/>d,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array1<sp/>&amp;<sp/>activeSets,<sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array2<sp/>*<sp/>lars_solutions,<sp/>Array3<sp/>*<sp/>lsq_solutions,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeastAngleRegressionOptions<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>options)</highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">vigra::functor;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;2&gt;::type<sp/>Shape;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Matrix&lt;T&gt;::view_type<sp/>Subarray;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ArrayVector&lt;MultiArrayIndex&gt;<sp/>Permutation;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Permutation::view_type<sp/>ColumnSet;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(d.activeSetSize<sp/>&gt;<sp/>0,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;leastAngleRegressionMainLoop()<sp/>must<sp/>not<sp/>be<sp/>called<sp/>with<sp/>empty<sp/>active<sp/>set.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enforce_positive<sp/>=<sp/>(options.mode<sp/>==<sp/>LeastAngleRegressionOptions::NNLASSO);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lasso_modification<sp/>=<sp/>(options.mode<sp/>!=<sp/>LeastAngleRegressionOptions::LARS);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rows<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(d.R);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>cols<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(d.R);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>maxRank<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">std::min</ref>(rows,<sp/>cols);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>maxSolutionCount<sp/>=<sp/>options.max_solution_count;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(maxSolutionCount<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxSolutionCount<sp/>=<sp/>lasso_modification</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>10*maxRank</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>maxRank;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>needToRemoveColumn<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>columnToBeAdded<sp/>=<sp/>0,<sp/>columnToBeRemoved<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>currentSolutionCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(currentSolutionCount<sp/>&lt;<sp/>maxSolutionCount)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ColumnSet<sp/>activeSet<sp/>=<sp/>d.columnPermutation.subarray(0,<sp/>(unsigned<sp/>int)d.activeSetSize);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ColumnSet<sp/>inactiveSet<sp/>=<sp/>d.columnPermutation.subarray((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)d.activeSetSize,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)cols);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>next<sp/>dimension<sp/>to<sp/>be<sp/>activated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>cLARS<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(d.A)<sp/>*<sp/>(d.b<sp/>-<sp/>d.lars_prediction),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>correlation<sp/>with<sp/>LARS<sp/>residual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cLSQ<sp/><sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(d.A)<sp/>*<sp/>(d.b<sp/>-<sp/>d.next_lsq_prediction);<sp/><sp/></highlight><highlight class="comment">//<sp/>correlation<sp/>with<sp/>LSQ<sp/>residual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>theory,<sp/>all<sp/>vectors<sp/>in<sp/>the<sp/>active<sp/>set<sp/>should<sp/>have<sp/>the<sp/>same<sp/>correlation<sp/>C,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>correlation<sp/>of<sp/>all<sp/>others<sp/>should<sp/>not<sp/>exceed<sp/>this.<sp/>In<sp/>practice,<sp/>we<sp/>may<sp/>find<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>correlation<sp/>in<sp/>any<sp/>variable<sp/>due<sp/>to<sp/>tiny<sp/>numerical<sp/>inaccuracies.<sp/>Therefore,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>C<sp/>from<sp/>the<sp/>entire<sp/>set<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>cmaxIndex<sp/>=<sp/>enforce_positive</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="group__LinearAlgebraFunctions_1ga19d5d885848fc3dc9364892229aaa59e" kindref="member">argMax</ref>(cLARS)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>argMax(<ref refid="group__LinearAlgebraFunctions_1ga53f1096eae84afd8f97055fe7ac5c5fe" kindref="member">abs</ref>(cLARS));</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>C<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga53f1096eae84afd8f97055fe7ac5c5fe" kindref="member">abs</ref>(cLARS(cmaxIndex,<sp/>0));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>ac(cols<sp/>-<sp/>d.activeSetSize,<sp/>1);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k<sp/>=<sp/>0;<sp/>k&lt;cols-d.activeSetSize;<sp/>++k)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>rho<sp/>=<sp/>cLSQ(inactiveSet[k],<sp/>0),<sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/><sp/>=<sp/>C<sp/>-<sp/><ref refid="group__LinearAlgebraFunctions_1ga558f5dc8c65cee5a87292d2b6f8079e3" kindref="member">sign</ref>(rho)*cLARS(inactiveSet[k],<sp/>0);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rho<sp/>==<sp/>0.0)<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>that<sp/>0/0<sp/>cannot<sp/>happen<sp/>in<sp/>the<sp/>other<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ac(k,0)<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">//<sp/>variable<sp/>k<sp/>is<sp/>linearly<sp/>dependent<sp/>on<sp/>the<sp/>active<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rho<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ac(k,0)<sp/>=<sp/>cc<sp/>/<sp/>(cc<sp/>+<sp/>rho);<sp/></highlight><highlight class="comment">//<sp/>variable<sp/>k<sp/>would<sp/>enter<sp/>the<sp/>active<sp/>set<sp/>with<sp/>positive<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enforce_positive)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ac(k,0)<sp/>=<sp/>1.0;<sp/></highlight><highlight class="comment">//<sp/>variable<sp/>k<sp/>cannot<sp/>enter<sp/>the<sp/>active<sp/>set<sp/>because<sp/>it<sp/>would<sp/>be<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ac(k,0)<sp/>=<sp/>cc<sp/>/<sp/>(cc<sp/>-<sp/>rho);<sp/></highlight><highlight class="comment">//<sp/>variable<sp/>k<sp/>would<sp/>enter<sp/>the<sp/>active<sp/>set<sp/>with<sp/>negative<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>non-negative<sp/>case:<sp/>make<sp/>sure<sp/>that<sp/>a<sp/>column<sp/>just<sp/>removed<sp/>cannot<sp/>re-enter<sp/>right<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(in<sp/>standard<sp/>LASSO,<sp/>this<sp/>is<sp/>allowed,<sp/>because<sp/>the<sp/>variable<sp/>may<sp/>re-enter<sp/>with<sp/>opposite<sp/>sign)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enforce_positive<sp/>&amp;&amp;<sp/>needToRemoveColumn)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ac(columnToBeRemoved-d.activeSetSize,0)<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>candidate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>R<sp/>uses<sp/>Arg1()<sp/>&gt;<sp/>epsilon,<sp/>but<sp/>this<sp/>is<sp/>only<sp/>possible<sp/>because<sp/>it<sp/>allows<sp/>several<sp/>variables<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>join<sp/>the<sp/>active<sp/>set<sp/>simultaneously,<sp/>so<sp/>that<sp/>gamma<sp/>=<sp/>0<sp/>cannot<sp/>occur.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnToBeAdded<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga5845d7d3dbf947da264a4716d889b585" kindref="member">argMin</ref>(ac);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>new<sp/>column<sp/>can<sp/>be<sp/>added,<sp/>we<sp/>do<sp/>a<sp/>full<sp/>step<sp/>gamma<sp/>=<sp/>1.0<sp/>and<sp/>then<sp/>stop,<sp/>unless<sp/>a<sp/>column<sp/>is<sp/>removed<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="group__MathFunctions_1ga441c9e4bf9f952c0fe94836634bcf976" kindref="member">gamma</ref><sp/>=<sp/>(d.activeSetSize<sp/>==<sp/>maxRank)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>1.0</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ac(columnToBeAdded,<sp/>0);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>columnToBeAdded:<sp/>we<sp/>skipped<sp/>the<sp/>active<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(columnToBeAdded<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnToBeAdded<sp/>+=<sp/>d.activeSetSize;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>we<sp/>have<sp/>to<sp/>remove<sp/>a<sp/>column<sp/>from<sp/>the<sp/>active<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needToRemoveColumn<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lasso_modification)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>dimensions<sp/>whose<sp/>weight<sp/>changes<sp/>sign<sp/>below<sp/>gamma*searchDirection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>s(Shape(d.activeSetSize,<sp/>1),<sp/><ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">NumericTraits&lt;T&gt;::max</ref>());</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;d.activeSetSize;<sp/>++k)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((<sp/>enforce_positive<sp/>&amp;&amp;<sp/>d.next_lsq_solution(k,0)<sp/>&lt;<sp/>0.0)<sp/>||</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!enforce_positive<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga558f5dc8c65cee5a87292d2b6f8079e3" kindref="member">sign</ref>(d.lars_solution(k,0))*<ref refid="group__LinearAlgebraFunctions_1ga558f5dc8c65cee5a87292d2b6f8079e3" kindref="member">sign</ref>(d.next_lsq_solution(k,0))<sp/>==<sp/>-1.0))</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s(k,0)<sp/>=<sp/>d.lars_solution(k,0)<sp/>/<sp/>(d.lars_solution(k,0)<sp/>-<sp/>d.next_lsq_solution(k,0));</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnToBeRemoved<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaad444bde435d2eed820759f45203dfd9" kindref="member">argMinIf</ref>(s,<sp/>Arg1()<sp/>&lt;=<sp/>Param(gamma));</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(columnToBeRemoved<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needToRemoveColumn<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>takes<sp/>precedence<sp/>over<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/>s(columnToBeRemoved,<sp/>0);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>current<sp/>solutions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.lars_prediction<sp/><sp/>=<sp/>gamma<sp/>*<sp/>d.next_lsq_prediction<sp/>+<sp/>(1.0<sp/>-<sp/><ref refid="group__MathFunctions_1ga441c9e4bf9f952c0fe94836634bcf976" kindref="member">gamma</ref>)<sp/>*<sp/>d.lars_prediction;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.lars_solution<sp/><sp/><sp/><sp/>=<sp/>gamma<sp/>*<sp/>d.next_lsq_solution<sp/><sp/><sp/>+<sp/>(1.0<sp/>-<sp/>gamma)<sp/>*<sp/>d.lars_solution;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(needToRemoveColumn)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.lars_solution(columnToBeRemoved,<sp/>0)<sp/>=<sp/>0.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>turn<sp/>possible<sp/>epsilon<sp/>into<sp/>an<sp/>exact<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>current<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++currentSolutionCount;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activeSets.push_back(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Array1::value_type(d.columnPermutation.begin(),<sp/>d.columnPermutation.begin()+d.activeSetSize));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lsq_solutions<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enforce_positive)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;Matrix&lt;T&gt;<sp/>&gt;<sp/>nnresults;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;ArrayVector&lt;MultiArrayIndex&gt;<sp/>&gt;<sp/>nnactiveSets;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LarsData&lt;T,<sp/>C1,<sp/>C2&gt;<sp/>nnd(d,<sp/>d.activeSetSize);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leastAngleRegressionMainLoop(nnd,<sp/>nnactiveSets,<sp/>&amp;nnresults,<sp/>(Array3*)0,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeastAngleRegressionOptions().leastSquaresSolutions(</highlight><highlight class="keyword">false</highlight><highlight class="normal">).nnlasso());</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Matrix&lt;T&gt;<sp/>nnlsq_solution(d.activeSetSize,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Array2::value_type<sp/>nnlsq_solution(Shape(d.activeSetSize,<sp/>1));</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;nnactiveSets.back().size();<sp/>++k)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnlsq_solution(nnactiveSets.back()[k],0)<sp/>=<sp/>nnresults.back()[k];</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lsq_solutions-&gt;push_back(nnlsq_solution);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsq_solutions-&gt;push_back(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Array3::value_type());</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsq_solutions-&gt;back()<sp/>=<sp/>nnlsq_solution;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lsq_solutions-&gt;push_back(d.next_lsq_solution.subarray(Shape(0,0),<sp/>Shape(d.activeSetSize,<sp/>1)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsq_solutions-&gt;push_back(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Array3::value_type());</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsq_solutions-&gt;back()<sp/>=<sp/>d.next_lsq_solution.subarray(Shape(0,0),<sp/>Shape(d.activeSetSize,<sp/>1));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(lars_solutions<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//lars_solutions-&gt;push_back(d.lars_solution.subarray(Shape(0,0),<sp/>Shape(d.activeSetSize,<sp/>1)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lars_solutions-&gt;push_back(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Array2::value_type());</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lars_solutions-&gt;back()<sp/>=<sp/>d.lars_solution.subarray(Shape(0,0),<sp/>Shape(d.activeSetSize,<sp/>1));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>further<sp/>solutions<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>==<sp/>1.0)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(needToRemoveColumn)</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--d.activeSetSize;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(columnToBeRemoved<sp/>!=<sp/>d.activeSetSize)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>column<sp/>&apos;columnToBeRemoved&apos;<sp/>and<sp/>restore<sp/>triangular<sp/>form<sp/>of<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note:<sp/>columnPermutation<sp/>is<sp/>automatically<sp/>swapped<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::upperTriangularSwapColumns(columnToBeRemoved,<sp/>d.activeSetSize,<sp/>d.R,<sp/>d.qtb,<sp/>d.columnPermutation);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>solution<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(d.lars_solution(columnToBeRemoved,<sp/>0),<sp/>d.lars_solution(d.activeSetSize,0));</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(d.next_lsq_solution(columnToBeRemoved,<sp/>0),<sp/>d.next_lsq_solution(d.activeSetSize,0));</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnToBeRemoved<sp/>=<sp/>d.activeSetSize;<sp/></highlight><highlight class="comment">//<sp/>keep<sp/>track<sp/>of<sp/>removed<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.lars_solution(d.activeSetSize,0)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.next_lsq_solution(d.activeSetSize,0)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_invariant(columnToBeAdded<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;leastAngleRegression():<sp/>internal<sp/>error<sp/>(columnToBeAdded<sp/>&lt;<sp/>0)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>column<sp/>&apos;columnToBeAdded&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(d.activeSetSize<sp/>!=<sp/>columnToBeAdded)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(d.columnPermutation[d.activeSetSize],<sp/>d.columnPermutation[columnToBeAdded]);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(d.R,<sp/>d.activeSetSize).swapData(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(d.R,<sp/>columnToBeAdded));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columnToBeAdded<sp/>=<sp/>d.activeSetSize;<sp/></highlight><highlight class="comment">//<sp/>keep<sp/>track<sp/>of<sp/>added<sp/>column</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>the<sp/>corresponding<sp/>entries<sp/>of<sp/>the<sp/>solutions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.next_lsq_solution(d.activeSetSize,0)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.lars_solution(d.activeSetSize,0)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reduce<sp/>R<sp/>(i.e.<sp/>its<sp/>newly<sp/>added<sp/>column)<sp/>to<sp/>triangular<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::qrColumnHouseholderStep(d.activeSetSize,<sp/>d.R,<sp/>d.qtb);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++d.activeSetSize;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>LSQ<sp/>solution<sp/>of<sp/>the<sp/>new<sp/>active<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subarray<sp/>Ractive<sp/>=<sp/>d.R.subarray(Shape(0,0),<sp/>Shape(d.activeSetSize,<sp/>d.activeSetSize));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subarray<sp/>qtbactive<sp/>=<sp/>d.qtb.subarray(Shape(0,0),<sp/>Shape(d.activeSetSize,<sp/>1));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subarray<sp/>next_lsq_solution_view<sp/>=<sp/>d.next_lsq_solution.subarray(Shape(0,0),<sp/>Shape(d.activeSetSize,<sp/>1));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(Ractive,<sp/>qtbactive,<sp/>next_lsq_solution_view);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>LSQ<sp/>prediction<sp/>of<sp/>the<sp/>new<sp/>active<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.next_lsq_prediction.init(0.0);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;d.activeSetSize;<sp/>++k)</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.next_lsq_prediction<sp/>+=<sp/>next_lsq_solution_view(k,0)*<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(d.A,<sp/>d.columnPermutation[k]);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)currentSolutionCount;</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array2&gt;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">leastAngleRegressionImpl(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array1<sp/>&amp;<sp/>activeSets,<sp/>Array2<sp/>*<sp/>lasso_solutions,<sp/>Array2<sp/>*<sp/>lsq_solutions,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeastAngleRegressionOptions<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>options)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">vigra::functor;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>rows<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b)<sp/>==<sp/>rows<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b)<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;leastAngleRegression():<sp/>Shape<sp/>mismatch<sp/>between<sp/>matrices<sp/>A<sp/>and<sp/>b.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enforce_positive<sp/>=<sp/>(options.mode<sp/>==<sp/>LeastAngleRegressionOptions::NNLASSO);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::LarsData&lt;T,<sp/>C1,<sp/>C2&gt;<sp/>d(A,<sp/>b);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>dimension<sp/>with<sp/>largest<sp/>correlation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>c<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(A)*b;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>initialColumn<sp/>=<sp/>enforce_positive</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="group__LinearAlgebraFunctions_1ga54d64ca4336ce853ea122ec56b961891" kindref="member">argMaxIf</ref>(c,<sp/>Arg1()<sp/>&gt;<sp/>Param(0.0))</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>argMax(<ref refid="group__LinearAlgebraFunctions_1ga53f1096eae84afd8f97055fe7ac5c5fe" kindref="member">abs</ref>(c));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(initialColumn<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>solution<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>initial<sp/>active<sp/>set<sp/>and<sp/>search<sp/>direction<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(d.columnPermutation[0],<sp/>d.columnPermutation[initialColumn]);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(d.R,<sp/>0).swapData(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(d.R,<sp/>initialColumn));</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::qrColumnHouseholderStep(0,<sp/>d.R,<sp/>d.qtb);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>d.next_lsq_solution(0,0)<sp/>=<sp/>d.qtb(0,0)<sp/>/<sp/>d.R(0,0);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>d.next_lsq_prediction<sp/>=<sp/>d.next_lsq_solution(0,0)<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(A,<sp/>d.columnPermutation[0]);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>d.searchVector<sp/>=<sp/>d.next_lsq_solution(0,0)<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(A,<sp/>d.columnPermutation[0]);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>leastAngleRegressionMainLoop(d,<sp/>activeSets,<sp/>lasso_solutions,<sp/>lsq_solutions,<sp/>options);</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Least<sp/>Angle<sp/>Regression.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"></highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/regression.hxx\&gt;</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="740"><highlight class="comment"></highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/>&lt;b&gt;<sp/>Declarations:&lt;/b&gt;</highlight></codeline>
<codeline lineno="742"><highlight class="comment"></highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/>namespace<sp/>vigra<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>linalg<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compute<sp/>either<sp/>LASSO<sp/>or<sp/>least<sp/>squares<sp/>solutions</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T,<sp/>class<sp/>C1,<sp/>class<sp/>C2,<sp/>class<sp/>Array1,<sp/>class<sp/>Array2&gt;</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leastAngleRegression(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>const<sp/>&amp;<sp/>A,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>const<sp/>&amp;b,</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array1<sp/>&amp;<sp/>activeSets,<sp/>Array2<sp/>&amp;<sp/>solutions,</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeastAngleRegressionOptions<sp/>const<sp/>&amp;<sp/>options<sp/>=<sp/>LeastAngleRegressionOptions());</highlight></codeline>
<codeline lineno="752"><highlight class="comment"></highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>compute<sp/>LASSO<sp/>and<sp/>least<sp/>squares<sp/>solutions</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T,<sp/>class<sp/>C1,<sp/>class<sp/>C2,<sp/>class<sp/>Array1,<sp/>class<sp/>Array2&gt;</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leastAngleRegression(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>const<sp/>&amp;<sp/>A,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>const<sp/>&amp;b,</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array1<sp/>&amp;<sp/>activeSets,<sp/>Array2<sp/>&amp;<sp/>lasso_solutions,<sp/>Array2<sp/>&amp;<sp/>lsq_solutions,</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeastAngleRegressionOptions<sp/>const<sp/>&amp;<sp/>options<sp/>=<sp/>LeastAngleRegressionOptions());</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>linalg::leastAngleRegression;</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="763"><highlight class="comment"></highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>implements<sp/>Least<sp/>Angle<sp/>Regression<sp/>(LARS)<sp/>as<sp/>described<sp/>in</highlight></codeline>
<codeline lineno="765"><highlight class="comment"></highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.Efron,<sp/>T.Hastie,<sp/>I.Johnstone,<sp/>and<sp/>R.Tibshirani:<sp/>&lt;i&gt;&quot;Least<sp/>Angle<sp/>Regression&quot;&lt;/i&gt;,</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Annals<sp/>of<sp/>Statistics<sp/>32(2):407-499,<sp/>2004.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"></highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>is<sp/>an<sp/>efficient<sp/>algorithm<sp/>to<sp/>solve<sp/>the<sp/>L1-regularized<sp/>least<sp/>squares<sp/>(LASSO)<sp/>problem</highlight></codeline>
<codeline lineno="771"><highlight class="comment"></highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left|\left|\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right|\right|_2^2</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\textrm{<sp/>subject<sp/>to<sp/>}<sp/>\left|\left|\textrm{\bf<sp/>x}\right|\right|_1\le<sp/>s</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="776"><highlight class="comment"></highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>L1-regularized<sp/>non-negative<sp/>least<sp/>squares<sp/>(NN-LASSO)<sp/>problem</highlight></codeline>
<codeline lineno="778"><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}<sp/>\left|\left|\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right|\right|_2^2</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\textrm{<sp/>subject<sp/>to<sp/>}<sp/>\left|\left|\textrm{\bf<sp/>x}\right|\right|_1\le<sp/>s<sp/>\textrm{<sp/>and<sp/>}<sp/>\textrm{\bf<sp/>x}\ge<sp/>\textrm{\bf<sp/>0}</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="782"><highlight class="comment"></highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>\a<sp/>A<sp/>is<sp/>a<sp/>matrix<sp/>with<sp/>&lt;tt&gt;m&lt;/tt&gt;<sp/>rows<sp/>and<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>columns<sp/>(often<sp/>with<sp/>&lt;tt&gt;m<sp/>\&lt;<sp/>n&lt;/tt&gt;),</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>b<sp/>a<sp/>vector<sp/>of<sp/>length<sp/>&lt;tt&gt;m&lt;/tt&gt;,<sp/>and<sp/>a<sp/>regularization<sp/>parameter<sp/>s<sp/>\&gt;=<sp/>0.0.</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L1-regularization<sp/>has<sp/>the<sp/>desirable<sp/>effect<sp/>that<sp/>it<sp/>causes<sp/>the<sp/>solution<sp/>\a<sp/>x<sp/>to<sp/>be<sp/>sparse,<sp/>i.e.<sp/>only</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>most<sp/>important<sp/>variables<sp/>(called<sp/>the<sp/>&lt;em&gt;active<sp/>set&lt;/em&gt;)<sp/>have<sp/>non-zero<sp/>values.<sp/>The</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>insight<sp/>of<sp/>the<sp/>LARS<sp/>algorithm<sp/>is<sp/>the<sp/>following:<sp/>When<sp/>the<sp/>solution<sp/>vector<sp/>is<sp/>considered</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>a<sp/>function<sp/>of<sp/>the<sp/>regularization<sp/>parameter<sp/>s,<sp/>then<sp/>&lt;b&gt;x&lt;/b&gt;(s)<sp/>is<sp/>a<sp/>piecewise</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linear<sp/>function,<sp/>i.e.<sp/>a<sp/>polyline<sp/>in<sp/>n-dimensional<sp/>space.<sp/>The<sp/>knots<sp/>of<sp/>the<sp/>polyline</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>occur<sp/>precisely<sp/>at<sp/>those<sp/>values<sp/>of<sp/>s<sp/>where<sp/>one<sp/>variable<sp/>enters<sp/>or<sp/>leaves<sp/>the<sp/>active<sp/>set,</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>can<sp/>be<sp/>efficiently<sp/>computed.</highlight></codeline>
<codeline lineno="792"><highlight class="comment"></highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Therefore,<sp/>leastAngleRegression()<sp/>returns<sp/>the<sp/>entire<sp/>solution<sp/>path<sp/>as<sp/>a<sp/>sequence<sp/>of<sp/>knot<sp/>points,<sp/>starting</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>\f$\textrm{\bf<sp/>x}(s=0)\f$<sp/>(where<sp/>the<sp/>only<sp/>feasible<sp/>solution<sp/>is<sp/>obviously<sp/>&lt;b&gt;x&lt;/b&gt;<sp/>=<sp/>0)<sp/>and<sp/>ending<sp/>at</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f$\textrm{\bf<sp/>x}(s=\infty)\f$<sp/>(where<sp/>the<sp/>solution<sp/>becomes<sp/>the<sp/>ordinary<sp/>least<sp/>squares<sp/>solution).<sp/>Actually,</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>initial<sp/>null<sp/>solution<sp/>is<sp/>not<sp/>explicitly<sp/>returned,<sp/>i.e.<sp/>the<sp/>sequence<sp/>starts<sp/>at<sp/>the<sp/>first<sp/>non-zero</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solution<sp/>with<sp/>one<sp/>variable<sp/>in<sp/>the<sp/>active<sp/>set.<sp/>The<sp/>function<sp/>leastAngleRegression()<sp/>returns<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>solutions(<sp/>i.e.<sp/>knot<sp/>points)<sp/>computed.</highlight></codeline>
<codeline lineno="799"><highlight class="comment"></highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>sequences<sp/>of<sp/>active<sp/>sets<sp/>and<sp/>corresponding<sp/>variable<sp/>weights<sp/>are<sp/>returned<sp/>in<sp/>\a<sp/>activeSets<sp/>and</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>solutions<sp/>respectively.<sp/>That<sp/>is,<sp/>&lt;tt&gt;activeSets[i]&lt;/tt&gt;<sp/>is<sp/>an<sp/>\ref<sp/>vigra::ArrayVector<sp/>&quot;ArrayVector\&lt;int\&gt;&quot;</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>containing<sp/>the<sp/>indices<sp/>of<sp/>the<sp/>variables<sp/>that<sp/>are<sp/>active<sp/>at<sp/>the<sp/>i-th<sp/>knot,<sp/>and<sp/>&lt;tt&gt;solutions&lt;/tt&gt;<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\ref<sp/>vigra::linalg::Matrix<sp/>&quot;Matrix\&lt;T\&gt;&quot;<sp/>containing<sp/>the<sp/>weights<sp/>of<sp/>those<sp/>variables,<sp/>in<sp/>the<sp/>same<sp/>order<sp/>(see</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>example<sp/>below).<sp/>Variables<sp/>not<sp/>contained<sp/>in<sp/>&lt;tt&gt;activeSets[i]&lt;/tt&gt;<sp/>are<sp/>zero<sp/>at<sp/>this<sp/>solution.</highlight></codeline>
<codeline lineno="805"><highlight class="comment"></highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>behavior<sp/>of<sp/>the<sp/>algorithm<sp/>can<sp/>be<sp/>adapted<sp/>by<sp/>\ref<sp/>vigra::linalg::LeastAngleRegressionOptions</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;LeastAngleRegressionOptions&quot;:</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DL&gt;</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;options.lasso()&lt;/b&gt;<sp/>(active<sp/>by<sp/>default)</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DD&gt;<sp/>Compute<sp/>the<sp/>LASSO<sp/>solution<sp/>as<sp/>described<sp/>above.</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;options.nnlasso()&lt;/b&gt;<sp/>(inactive<sp/>by<sp/>default)</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DD&gt;<sp/>Compute<sp/>non-negative<sp/>LASSO<sp/>solutions,<sp/>i.e.<sp/>use<sp/>the<sp/>additional<sp/>constraint<sp/>that</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;x&lt;/b&gt;<sp/>\&gt;=<sp/>0<sp/>in<sp/>all<sp/>solutions.</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;options.lars()&lt;/b&gt;<sp/>(inactive<sp/>by<sp/>default)</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DD&gt;<sp/>Compute<sp/>a<sp/>solution<sp/>path<sp/>according<sp/>to<sp/>the<sp/>plain<sp/>LARS<sp/>rule,<sp/>i.e.<sp/>never<sp/>remove</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>variable<sp/>from<sp/>the<sp/>active<sp/>set<sp/>once<sp/>it<sp/>entered.</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;options.leastSquaresSolutions(bool)&lt;/b&gt;<sp/>(default:<sp/>true)</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DD&gt;<sp/>Use<sp/>the<sp/>algorithm<sp/>mode<sp/>selected<sp/>above</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>determine<sp/>the<sp/>sequence<sp/>of<sp/>active<sp/>sets,<sp/>but<sp/>then<sp/>compute<sp/>and<sp/>return<sp/>an</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordinary<sp/>(unconstrained)<sp/>least<sp/>squares<sp/>solution<sp/>for<sp/>every<sp/>active<sp/>set.&lt;br&gt;</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;Note:&lt;/b&gt;<sp/>The<sp/>second<sp/>form<sp/>of<sp/>leastAngleRegression()<sp/>ignores<sp/>this<sp/>option<sp/>and</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>always<sp/>compute<sp/>both<sp/>constrained<sp/>and<sp/>unconstrained<sp/>solutions<sp/>(returned<sp/>in</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\a<sp/>lasso_solutions<sp/>and<sp/>\a<sp/>lsq_solutions<sp/>respectively).</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DT&gt;&lt;b&gt;maxSolutionCount(unsigned<sp/>int<sp/>n)&lt;/b&gt;<sp/>(default:<sp/>n<sp/>=<sp/>0,<sp/>i.e.<sp/>compute<sp/>all<sp/>solutions)</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;DD&gt;<sp/>Compute<sp/>at<sp/>most<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>solutions.</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/DL&gt;</highlight></codeline>
<codeline lineno="827"><highlight class="comment"></highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;Usage:&lt;/b&gt;</highlight></codeline>
<codeline lineno="829"><highlight class="comment"></highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m<sp/>=<sp/>...,<sp/>n<sp/>=<sp/>...;</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;double&gt;<sp/>A(m,<sp/>n),<sp/>b(m,<sp/>1);</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...<sp/>//<sp/>fill<sp/>A<sp/>and<sp/>b</highlight></codeline>
<codeline lineno="834"><highlight class="comment"></highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>normalize<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;double&gt;<sp/>offset(1,n),<sp/>scaling(1,n);</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepareColumns(A,<sp/>A,<sp/>offset,<sp/>scaling,<sp/>DataPreparationGoals(ZeroMean|UnitVariance));</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepareColumns(b,<sp/>b,<sp/>DataPreparationGoals(ZeroMean));</highlight></codeline>
<codeline lineno="839"><highlight class="comment"></highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>arrays<sp/>to<sp/>hold<sp/>the<sp/>output</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;ArrayVector&lt;int&gt;<sp/>&gt;<sp/>activeSets;</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArrayVector&lt;Matrix&lt;double&gt;<sp/>&gt;<sp/>solutions;</highlight></codeline>
<codeline lineno="843"><highlight class="comment"></highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>run<sp/>leastAngleRegression()<sp/>in<sp/>non-negative<sp/>LASSO<sp/>mode</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>numSolutions<sp/>=<sp/>leastAngleRegression(A,<sp/>b,<sp/>activeSets,<sp/>solutions,</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeastAngleRegressionOptions().nnlasso());</highlight></codeline>
<codeline lineno="847"><highlight class="comment"></highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>print<sp/>results</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;double&gt;<sp/>denseSolution(1,<sp/>n);</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(MultiArrayIndex<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>numSolutions;<sp/>++k)</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>transform<sp/>the<sp/>sparse<sp/>solution<sp/>into<sp/>a<sp/>dense<sp/>vector</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denseSolution.init(0.0);<sp/>//<sp/>ensure<sp/>that<sp/>inactive<sp/>variables<sp/>are<sp/>zero</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>activeSets[k].size();<sp/>++i)</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>set<sp/>the<sp/>values<sp/>of<sp/>the<sp/>active<sp/>variables;</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>activeSets[k][i]<sp/>is<sp/>the<sp/>true<sp/>index<sp/>of<sp/>the<sp/>i-th<sp/>variable<sp/>in<sp/>the<sp/>active<sp/>set</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denseSolution(0,<sp/>activeSets[k][i])<sp/>=<sp/>solutions[k](i,0);</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="comment"></highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>invert<sp/>the<sp/>input<sp/>normalization</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denseSolution<sp/>=<sp/>denseSolution<sp/>*<sp/>pointWise(scaling);</highlight></codeline>
<codeline lineno="863"><highlight class="comment"></highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>output<sp/>the<sp/>solution</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;solution<sp/>&quot;<sp/>&lt;&lt;<sp/>k<sp/>&lt;&lt;<sp/>&quot;:\n&quot;<sp/>&lt;&lt;<sp/>denseSolution<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="868"><highlight class="comment"></highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;Required<sp/>Interface:&lt;/b&gt;</highlight></codeline>
<codeline lineno="870"><highlight class="comment"></highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;ul&gt;</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>&lt;tt&gt;T&lt;/tt&gt;<sp/>must<sp/>be<sp/>numeric<sp/>type<sp/>(compatible<sp/>to<sp/>double)</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>&lt;tt&gt;Array1<sp/>a1;&lt;/tt&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;a1.push_back(ArrayVector\&lt;int\&gt;());&lt;/tt&gt;</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>&lt;tt&gt;Array2<sp/>a2;&lt;/tt&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;a2.push_back(Matrix\&lt;T\&gt;());&lt;/tt&gt;</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;/ul&gt;</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">doxygen_overloaded_function(template<sp/>&lt;...&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1gab47cd570de4c39a53b4da2d830d4568c" kindref="member">leastAngleRegression</ref>)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array2&gt;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><ref refid="group__Optimization_1gab47cd570de4c39a53b4da2d830d4568c" kindref="member">leastAngleRegression</ref>(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array1<sp/>&amp;<sp/>activeSets,<sp/>Array2<sp/>&amp;<sp/>solutions,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeastAngleRegressionOptions<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>options<sp/>=<sp/>LeastAngleRegressionOptions())</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(options.least_squares_solutions)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::leastAngleRegressionImpl(A,<sp/>b,<sp/>activeSets,<sp/>(Array2*)0,<sp/>&amp;solutions,<sp/>options);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::leastAngleRegressionImpl(A,<sp/>b,<sp/>activeSets,<sp/>&amp;solutions,<sp/>(Array2*)0,<sp/>options);</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Array2&gt;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><ref refid="group__Optimization_1gab47cd570de4c39a53b4da2d830d4568c" kindref="member">leastAngleRegression</ref>(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Array1<sp/>&amp;<sp/>activeSets,<sp/>Array2<sp/>&amp;<sp/>lasso_solutions,<sp/>Array2<sp/>&amp;<sp/>lsq_solutions,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeastAngleRegressionOptions<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>options<sp/>=<sp/>LeastAngleRegressionOptions())</highlight></codeline>
<codeline lineno="898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::leastAngleRegressionImpl(A,<sp/>b,<sp/>activeSets,<sp/>&amp;lasso_solutions,<sp/>&amp;lsq_solutions,<sp/>options);</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Non-negative<sp/>Least<sp/>Squares<sp/>Regression.</highlight></codeline>
<codeline lineno="903"><highlight class="comment"></highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Given<sp/>a<sp/>matrix<sp/>\a<sp/>A<sp/>with<sp/>&lt;tt&gt;m&lt;/tt&gt;<sp/>rows<sp/>and<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>columns<sp/>(with<sp/>&lt;tt&gt;m<sp/>\&gt;=<sp/>n&lt;/tt&gt;),</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>a<sp/>column<sp/>vector<sp/>\a<sp/>b<sp/>of<sp/>length<sp/>&lt;tt&gt;m&lt;/tt&gt;<sp/>rows,<sp/>this<sp/>function<sp/>computes</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>column<sp/>vector<sp/>\a<sp/>x<sp/>of<sp/>length<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>with<sp/>&lt;b&gt;non-negative<sp/>entries&lt;/b&gt;<sp/>that<sp/>solves<sp/>the<sp/>optimization<sp/>problem</highlight></codeline>
<codeline lineno="907"><highlight class="comment"></highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f[<sp/>\tilde<sp/>\textrm{\bf<sp/>x}<sp/>=<sp/>\textrm{argmin}</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\left|\left|\textrm{\bf<sp/>A}<sp/>\textrm{\bf<sp/>x}<sp/>-<sp/>\textrm{\bf<sp/>b}\right|\right|_2^2</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\textrm{<sp/>subject<sp/>to<sp/>}<sp/>\textrm{\bf<sp/>x}<sp/>\ge<sp/>\textrm{\bf<sp/>0}</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\f]</highlight></codeline>
<codeline lineno="912"><highlight class="comment"></highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Both<sp/>\a<sp/>b<sp/>and<sp/>\a<sp/>x<sp/>must<sp/>be<sp/>column<sp/>vectors<sp/>(i.e.<sp/>matrices<sp/>with<sp/>&lt;tt&gt;1&lt;/tt&gt;<sp/>column).</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>all<sp/>matrices<sp/>must<sp/>already<sp/>have<sp/>the<sp/>correct<sp/>shape.<sp/>The<sp/>solution<sp/>is<sp/>computed<sp/>by<sp/>means</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>\ref<sp/>leastAngleRegression()<sp/>with<sp/>non-negativity<sp/>constraint.</highlight></codeline>
<codeline lineno="916"><highlight class="comment"></highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/regression.hxx\&gt;</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra<sp/>and<sp/>vigra::linalg</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922" refid="group__Optimization_1ga73b680f4375cd2963543db1a7cf85e41" refkind="member"><highlight class="normal"><ref refid="group__Optimization_1ga73b680f4375cd2963543db1a7cf85e41" kindref="member">nonnegativeLeastSquares</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>A,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;b,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>&amp;x)</highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(A)<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(x)<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(A)<sp/>==<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(b),</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nonnegativeLeastSquares():<sp/>Matrix<sp/>shape<sp/>mismatch.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(b)<sp/>==<sp/>1<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(x)<sp/>==<sp/>1,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;nonnegativeLeastSquares():<sp/>RHS<sp/>and<sp/>solution<sp/>must<sp/>be<sp/>vectors<sp/>(i.e.<sp/>columnCount<sp/>==<sp/>1).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;ArrayVector&lt;MultiArrayIndex&gt;</ref><sp/>&gt;<sp/>activeSets;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;Matrix&lt;T&gt;</ref><sp/>&gt;<sp/>results;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__Optimization_1gab47cd570de4c39a53b4da2d830d4568c" kindref="member">leastAngleRegression</ref>(A,<sp/>b,<sp/>activeSets,<sp/>results,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1linalg_1_1LeastAngleRegressionOptions" kindref="compound" tooltip="Pass options to leastAngleRegression().">LeastAngleRegressionOptions</ref>().leastSquaresSolutions(</highlight><highlight class="keyword">false</highlight><highlight class="normal">).nnlasso());</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>x.<ref refid="classvigra_1_1MultiArrayView_1ae8d75c08347781b9854c8aea98c34610" kindref="member">init</ref>(NumericTraits&lt;T&gt;::zero());</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(activeSets.<ref refid="classvigra_1_1ArrayVectorView_1a503ab01f6c0142145d3434f6924714e7" kindref="member">size</ref>()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;activeSets.<ref refid="classvigra_1_1ArrayVectorView_1af71e6c1eccbc12e9339c00a86a981a43" kindref="member">back</ref>().size();<sp/>++k)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(activeSets.<ref refid="classvigra_1_1ArrayVectorView_1af71e6c1eccbc12e9339c00a86a981a43" kindref="member">back</ref>()[k],0)<sp/>=<sp/>results.<ref refid="classvigra_1_1ArrayVectorView_1af71e6c1eccbc12e9339c00a86a981a43" kindref="member">back</ref>()[k];</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="942"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="943"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>linalg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1gab3be347f5631d0aa2ee74c07479e0383" kindref="member">linalg::leastSquares</ref>;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1ga591ca4f43e4114253d7bfa2953f07c4d" kindref="member">linalg::weightedLeastSquares</ref>;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1ga647810e9f3f2ff2e401f410b4855c58a" kindref="member">linalg::ridgeRegression</ref>;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1gade6eb7c915e0e6b1820974316b1d5d32" kindref="member">linalg::weightedRidgeRegression</ref>;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1gad20a4d83649e2c65d9d553105882af9f" kindref="member">linalg::ridgeRegressionSeries</ref>;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1ga73b680f4375cd2963543db1a7cf85e41" kindref="member">linalg::nonnegativeLeastSquares</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__Optimization_1gab47cd570de4c39a53b4da2d830d4568c" kindref="member">linalg::leastAngleRegression</ref>;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>linalg::LeastAngleRegressionOptions;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>VIGRA_REGRESSION_HXX</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/regression.hxx"/>
  </compounddef>
</doxygen>
