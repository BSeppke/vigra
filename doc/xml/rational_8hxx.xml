<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="rational_8hxx" kind="file">
    <compoundname>rational.hxx</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">iosfwd</includes>
    <includes refid="config_8hxx" local="yes">config.hxx</includes>
    <includes refid="mathutil_8hxx" local="yes">mathutil.hxx</includes>
    <includes refid="numerictraits_8hxx" local="yes">numerictraits.hxx</includes>
    <includes refid="metaprogramming_8hxx" local="yes">metaprogramming.hxx</includes>
    <includedby refid="resampling__convolution_8hxx" local="yes">vigra/resampling_convolution.hxx</includedby>
    <incdepgraph>
      <node id="7326">
        <label>functional</label>
      </node>
      <node id="7319">
        <label>limits</label>
      </node>
      <node id="7316">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="7317" relation="include">
        </childnode>
        <childnode refid="7319" relation="include">
        </childnode>
      </node>
      <node id="7327">
        <label>iterator</label>
      </node>
      <node id="7325">
        <label>inspector_passes.hxx</label>
        <link refid="inspector__passes_8hxx_source"/>
        <childnode refid="7317" relation="include">
        </childnode>
      </node>
      <node id="7323">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="7324">
        <label>algorithm.hxx</label>
        <link refid="algorithm_8hxx_source"/>
        <childnode refid="7316" relation="include">
        </childnode>
        <childnode refid="7321" relation="include">
        </childnode>
        <childnode refid="7325" relation="include">
        </childnode>
        <childnode refid="7320" relation="include">
        </childnode>
        <childnode refid="7326" relation="include">
        </childnode>
        <childnode refid="7327" relation="include">
        </childnode>
      </node>
      <node id="7302">
        <label>vigra/rational.hxx</label>
        <link refid="rational.hxx"/>
        <childnode refid="7303" relation="include">
        </childnode>
        <childnode refid="7304" relation="include">
        </childnode>
        <childnode refid="7305" relation="include">
        </childnode>
        <childnode refid="7306" relation="include">
        </childnode>
        <childnode refid="7308" relation="include">
        </childnode>
        <childnode refid="7321" relation="include">
        </childnode>
        <childnode refid="7317" relation="include">
        </childnode>
      </node>
      <node id="7303">
        <label>cmath</label>
      </node>
      <node id="7304">
        <label>stdexcept</label>
      </node>
      <node id="7313">
        <label>string</label>
      </node>
      <node id="7322">
        <label>cfloat</label>
      </node>
      <node id="7307">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="7314">
        <label>tuple.hxx</label>
        <link refid="tuple_8hxx_source"/>
        <childnode refid="7315" relation="include">
        </childnode>
      </node>
      <node id="7308">
        <label>mathutil.hxx</label>
        <link refid="mathutil_8hxx_source"/>
        <childnode refid="7303" relation="include">
        </childnode>
        <childnode refid="7309" relation="include">
        </childnode>
        <childnode refid="7310" relation="include">
        </childnode>
        <childnode refid="7306" relation="include">
        </childnode>
        <childnode refid="7311" relation="include">
        </childnode>
        <childnode refid="7314" relation="include">
        </childnode>
        <childnode refid="7316" relation="include">
        </childnode>
        <childnode refid="7321" relation="include">
        </childnode>
        <childnode refid="7324" relation="include">
        </childnode>
      </node>
      <node id="7306">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="7307" relation="include">
        </childnode>
        <childnode refid="7304" relation="include">
        </childnode>
      </node>
      <node id="7321">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="7318" relation="include">
        </childnode>
        <childnode refid="7319" relation="include">
        </childnode>
        <childnode refid="7322" relation="include">
        </childnode>
        <childnode refid="7310" relation="include">
        </childnode>
        <childnode refid="7317" relation="include">
        </childnode>
        <childnode refid="7316" relation="include">
        </childnode>
        <childnode refid="7323" relation="include">
        </childnode>
      </node>
      <node id="7315">
        <label>utility</label>
      </node>
      <node id="7312">
        <label>sstream</label>
      </node>
      <node id="7311">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="7304" relation="include">
        </childnode>
        <childnode refid="7312" relation="include">
        </childnode>
        <childnode refid="7313" relation="include">
        </childnode>
        <childnode refid="7306" relation="include">
        </childnode>
      </node>
      <node id="7305">
        <label>iosfwd</label>
      </node>
      <node id="7309">
        <label>cstdlib</label>
      </node>
      <node id="7318">
        <label>climits</label>
      </node>
      <node id="7317">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="7306" relation="include">
        </childnode>
        <childnode refid="7318" relation="include">
        </childnode>
        <childnode refid="7319" relation="include">
        </childnode>
        <childnode refid="7320" relation="include">
        </childnode>
      </node>
      <node id="7310">
        <label>complex</label>
      </node>
      <node id="7320">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7339">
        <label>vigra/symmetry.hxx</label>
        <link refid="symmetry_8hxx_source"/>
      </node>
      <node id="7330">
        <label>vigra/resizeimage.hxx</label>
        <link refid="resizeimage_8hxx_source"/>
        <childnode refid="7331" relation="include">
        </childnode>
        <childnode refid="7345" relation="include">
        </childnode>
      </node>
      <node id="7328">
        <label>vigra/rational.hxx</label>
        <link refid="rational.hxx"/>
        <childnode refid="7329" relation="include">
        </childnode>
      </node>
      <node id="7345">
        <label>vigra/multi_resize.hxx</label>
        <link refid="multi__resize_8hxx_source"/>
      </node>
      <node id="7331">
        <label>vigra/stdimagefunctions.hxx</label>
        <link refid="stdimagefunctions_8hxx_source"/>
        <childnode refid="7332" relation="include">
        </childnode>
        <childnode refid="7336" relation="include">
        </childnode>
        <childnode refid="7341" relation="include">
        </childnode>
        <childnode refid="7342" relation="include">
        </childnode>
      </node>
      <node id="7343">
        <label>vigra/watersheds3d.hxx</label>
        <link refid="watersheds3d_8hxx_source"/>
      </node>
      <node id="7334">
        <label>vigra/boundarytensor.hxx</label>
        <link refid="boundarytensor_8hxx_source"/>
      </node>
      <node id="7336">
        <label>vigra/edgedetection.hxx</label>
        <link refid="edgedetection_8hxx_source"/>
        <childnode refid="7337" relation="include">
        </childnode>
      </node>
      <node id="7333">
        <label>vigra/convolution.hxx</label>
        <link refid="convolution_8hxx_source"/>
        <childnode refid="7334" relation="include">
        </childnode>
        <childnode refid="7335" relation="include">
        </childnode>
        <childnode refid="7336" relation="include">
        </childnode>
        <childnode refid="7338" relation="include">
        </childnode>
        <childnode refid="7339" relation="include">
        </childnode>
        <childnode refid="7340" relation="include">
        </childnode>
      </node>
      <node id="7332">
        <label>vigra/nonlineardiffusion.hxx</label>
        <link refid="nonlineardiffusion_8hxx_source"/>
        <childnode refid="7333" relation="include">
        </childnode>
      </node>
      <node id="7329">
        <label>vigra/resampling_convolution.hxx</label>
        <link refid="resampling__convolution_8hxx_source"/>
        <childnode refid="7330" relation="include">
        </childnode>
      </node>
      <node id="7337">
        <label>vigra/slanted_edge_mtf.hxx</label>
        <link refid="slanted__edge__mtf_8hxx_source"/>
      </node>
      <node id="7340">
        <label>vigra/tv_filter.hxx</label>
        <link refid="tv__filter_8hxx_source"/>
      </node>
      <node id="7341">
        <label>vigra/seededregiongrowing.hxx</label>
        <link refid="seededregiongrowing_8hxx_source"/>
        <childnode refid="7342" relation="include">
        </childnode>
        <childnode refid="7344" relation="include">
        </childnode>
      </node>
      <node id="7342">
        <label>vigra/seededregiongrowing3d.hxx</label>
        <link refid="seededregiongrowing3d_8hxx_source"/>
        <childnode refid="7343" relation="include">
        </childnode>
      </node>
      <node id="7338">
        <label>vigra/gradient_energy_tensor.hxx</label>
        <link refid="gradient__energy__tensor_8hxx_source"/>
      </node>
      <node id="7344">
        <label>vigra/watersheds.hxx</label>
        <link refid="watersheds_8hxx_source"/>
        <childnode refid="7343" relation="include">
        </childnode>
      </node>
      <node id="7335">
        <label>vigra/cornerdetection.hxx</label>
        <link refid="cornerdetection_8hxx_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classvigra_1_1bad__rational" prot="public">vigra::bad_rational</innerclass>
    <innerclass refid="structvigra_1_1NormTraits_3_01Rational_3_01T_01_4_01_4" prot="public">vigra::NormTraits&lt; Rational&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1NumericTraits_3_01Rational_3_01T_01_4_01_4" prot="public">vigra::NumericTraits&lt; Rational&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1PromoteTraits_3_01Rational_3_01T_01_4_00_01Rational_3_01T_01_4_01_4" prot="public">vigra::PromoteTraits&lt; Rational&lt; T &gt;, Rational&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1PromoteTraits_3_01Rational_3_01T1_01_4_00_01Rational_3_01T2_01_4_01_4" prot="public">vigra::PromoteTraits&lt; Rational&lt; T1 &gt;, Rational&lt; T2 &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1PromoteTraits_3_01Rational_3_01T1_01_4_00_01T2_01_4" prot="public">vigra::PromoteTraits&lt; Rational&lt; T1 &gt;, T2 &gt;</innerclass>
    <innerclass refid="structvigra_1_1PromoteTraits_3_01T1_00_01Rational_3_01T2_01_4_01_4" prot="public">vigra::PromoteTraits&lt; T1, Rational&lt; T2 &gt; &gt;</innerclass>
    <innerclass refid="classvigra_1_1Rational" prot="public">vigra::Rational</innerclass>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>1998-2004<sp/>by<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>It<sp/>was<sp/>adapted<sp/>from<sp/>the<sp/>file<sp/>boost/rational.hpp<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>boost<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>file<sp/>is<sp/>based<sp/>on<sp/>work<sp/>by<sp/>Paul<sp/>Moore:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>(C)<sp/>Copyright<sp/>Paul<sp/>Moore<sp/>1999.<sp/>Permission<sp/>to<sp/>copy,<sp/>use,<sp/>modify,<sp/>sell<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>distribute<sp/>this<sp/>software<sp/>is<sp/>granted<sp/>provided<sp/>this<sp/>copyright<sp/>notice<sp/>appears</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>in<sp/>all<sp/>copies.<sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&quot;as<sp/>is&quot;<sp/>without<sp/>express<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>implied<sp/>warranty,<sp/>and<sp/>with<sp/>no<sp/>claim<sp/>as<sp/>to<sp/>its<sp/>suitability<sp/>for<sp/>any<sp/>purpose.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>See<sp/>http://www.boost.org/libs/rational<sp/>for<sp/>documentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_RATIONAL_HPP</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_RATIONAL_HPP</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;config.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mathutil.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;numerictraits.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;metaprogramming.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**<sp/>\addtogroup<sp/>MathFunctions<sp/>Mathematical<sp/>Functions</highlight></codeline>
<codeline lineno="62"><highlight class="comment">*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="64"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gcd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/*!<sp/>Calculate<sp/>the<sp/>greatest<sp/>common<sp/>divisor.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>works<sp/>for<sp/>arbitrary<sp/>integer<sp/>types,<sp/>including<sp/>user-defined</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>(e.g.<sp/>infinite<sp/>precision)<sp/>ones.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/rational.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="79"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="81" refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" refkind="member"><highlight class="normal">IntType<sp/><ref refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" kindref="member">gcd</ref>(IntType<sp/>n,<sp/>IntType<sp/>m)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>repeated<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>abs()<sp/>-<sp/>given<sp/>the<sp/>existence<sp/>of<sp/>broken<sp/>compilers<sp/>with<sp/>Koenig</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lookup<sp/>issues<sp/>and<sp/>other<sp/>problems,<sp/>I<sp/>code<sp/>this<sp/>explicitly.<sp/>(Remember,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IntType<sp/>may<sp/>be<sp/>a<sp/>user-defined<sp/>type).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>zero)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>-n;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>zero)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>-m;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>n<sp/>and<sp/>m<sp/>are<sp/>now<sp/>positive,<sp/>we<sp/>can<sp/>be<sp/>sure<sp/>that<sp/>%=<sp/>returns<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>positive<sp/>value<sp/>(the<sp/>standard<sp/>guarantees<sp/>this<sp/>for<sp/>built-in<sp/>types,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>require<sp/>it<sp/>of<sp/>user-defined<sp/>types).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>%=<sp/>m;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>%=<sp/>n;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/*!<sp/>Calculate<sp/>the<sp/>lowest<sp/>common<sp/>multiple.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>function<sp/>works<sp/>for<sp/>arbitrary<sp/>integer<sp/>types,<sp/>including<sp/>user-defined</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>(e.g.<sp/>infinite<sp/>precision)<sp/>ones.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/rational.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="120"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="122" refid="group__MathFunctions_1ga1aa613671eda401daa90a686497c27da" refkind="member"><highlight class="normal">IntType<sp/><ref refid="group__MathFunctions_1ga1aa613671eda401daa90a686497c27da" kindref="member">lcm</ref>(IntType<sp/>n,<sp/>IntType<sp/>m)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>repeated<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>zero<sp/>||<sp/>m<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>zero;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>/=<sp/><ref refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" kindref="member">gcd</ref>(n,<sp/>m);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>*=<sp/>m;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>zero)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>-n;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">bad_rational<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::domain_error</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>bad_rational()<sp/>:<sp/>std::domain_error(</highlight><highlight class="stringliteral">&quot;bad<sp/>rational:<sp/>zero<sp/>denominator&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Rational;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">Rational&lt;IntType&gt;<sp/><ref refid="group__FFTWComplexOperators_1ga6f4ef274842b6153923f02a6cd264576" kindref="member" tooltip="absolute value (= magnitude)">abs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;&amp;<sp/>r);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">Rational&lt;IntType&gt;<sp/>pow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">Rational&lt;IntType&gt;<sp/><ref refid="group__FixedPointOperations_1gaf8fe85520fc0bc2d77ec8e6cf26f3c5d" kindref="member" tooltip="rounding down.">floor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;&amp;<sp/>r);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">Rational&lt;IntType&gt;<sp/><ref refid="group__FixedPointOperations_1ga14fe7b9ffa21e091c6ff4ede68717c30" kindref="member" tooltip="rounding up.">ceil</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;&amp;<sp/>r);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rational<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**<sp/>Template<sp/>for<sp/>rational<sp/>numbers.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>template<sp/>can<sp/>make<sp/>use<sp/>of<sp/>arbitrary<sp/>integer<sp/>types,<sp/>including</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/>user-defined<sp/>(e.g.<sp/>infinite<sp/>precision)<sp/>ones.<sp/>Note,<sp/>however,</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/>that<sp/>overflow<sp/>in<sp/>either<sp/>the<sp/>numerator<sp/>or<sp/>denominator<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/>detected<sp/>during<sp/>calculations<sp/>--<sp/>the<sp/>standard<sp/>behavior<sp/>of<sp/>the<sp/>integer<sp/>type</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/>(e.g.<sp/>wrap<sp/>around)<sp/>applies.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>class<sp/>can<sp/>represent<sp/>and<sp/>handle<sp/>positive<sp/>and<sp/>negative<sp/>infinity</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/>resulting<sp/>from<sp/>division<sp/>by<sp/>zero.<sp/>Indeterminate<sp/>expressions<sp/>such<sp/>as<sp/>0/0</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/>are<sp/>signaled<sp/>by<sp/>a<sp/>&lt;tt&gt;bad_rational&lt;/tt&gt;<sp/>exception<sp/>which<sp/>is<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;std::domain_error&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;Rational&lt;/tt&gt;<sp/>implements<sp/>the<sp/>required<sp/>interface<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/>\ref<sp/>AlgebraicField<sp/>and<sp/>the<sp/>required<sp/>\ref<sp/>RationalTraits<sp/>&quot;numeric<sp/>and</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/>promotion<sp/>traits&quot;.<sp/>All<sp/>arithmetic<sp/>and<sp/>comparison<sp/>operators,<sp/>as<sp/>well</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/>as<sp/>the<sp/>relevant<sp/>algebraic<sp/>functions<sp/>are<sp/>supported<sp/>.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;See<sp/>also:&lt;/b&gt;</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;ul&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>\ref<sp/>RationalTraits</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>\ref<sp/>RationalOperations</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/ul&gt;</highlight></codeline>
<codeline lineno="187"><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/rational.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="191"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="193" refid="classvigra_1_1Rational" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref></highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>The<sp/>type<sp/>of<sp/>numerator<sp/>and<sp/>denominator</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classvigra_1_1Rational_1abb048c37fd66bc0f7f6b520b9bfc8771" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>IntType<sp/><ref refid="classvigra_1_1Rational_1abb048c37fd66bc0f7f6b520b9bfc8771" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Determine<sp/>whether<sp/>arguments<sp/>should<sp/>be<sp/>passed<sp/>as</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>or<sp/>&lt;tt&gt;IntType<sp/>const<sp/>&amp;&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>If&lt;typename<sp/>TypeTraits&lt;IntType&gt;::isBuiltinType,</highlight></codeline>
<codeline lineno="204" refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntType,<sp/>IntType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;&gt;::type<sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Default<sp/>constructor:<sp/>creates<sp/>zero<sp/>(&lt;tt&gt;0/1&lt;/tt&gt;)</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="classvigra_1_1Rational_1ae0a33e796fe904111569461516de04e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational_1ae0a33e796fe904111569461516de04e9" kindref="member">Rational</ref>()</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>num(0),</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>den(1)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Copy<sp/>constructor</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="216" refid="classvigra_1_1Rational_1ade893e284e9ad9d3133551d11fabebcd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational_1ae0a33e796fe904111569461516de04e9" kindref="member">Rational</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>num(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()),</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>den(r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>())</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Integer<sp/>constructor:<sp/>creates<sp/>&lt;tt&gt;n/1&lt;/tt&gt;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="classvigra_1_1Rational_1a1b64024cf030cc41bfe252a4af7d4cfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational_1ae0a33e796fe904111569461516de04e9" kindref="member">Rational</ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>n)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>num(n),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>den(IntType(1))</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Ratio<sp/>constructor:<sp/>creates<sp/>&lt;tt&gt;n/d&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>ratio<sp/>will<sp/>be<sp/>normalized<sp/>unless<sp/>&lt;tt&gt;doNormalize<sp/>=<sp/>false&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Since<sp/>the<sp/>internal<sp/>representation<sp/>is<sp/>assumed<sp/>to<sp/>be<sp/>normalized,</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;doNormalize<sp/>=<sp/>false&lt;/tt&gt;<sp/>must<sp/>only<sp/>be<sp/>used<sp/>as<sp/>an<sp/>optimization</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&lt;tt&gt;n&lt;/tt&gt;<sp/>and<sp/>&lt;tt&gt;d&lt;/tt&gt;<sp/>are<sp/>known<sp/>to<sp/>be<sp/>already<sp/>normalized</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(i.e.<sp/>have<sp/>1<sp/>as<sp/>their<sp/>greatest<sp/>common<sp/>divisor).</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classvigra_1_1Rational_1a172193f724cc8d146cf8bfe7044580d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational_1ae0a33e796fe904111569461516de04e9" kindref="member">Rational</ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>n,<sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>d,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doNormalize<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>num(n),</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>den(d)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(doNormalize)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Construct<sp/>as<sp/>an<sp/>approximation<sp/>of<sp/>a<sp/>real<sp/>number.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>maximal<sp/>allowed<sp/>relative<sp/>error<sp/>is<sp/>given<sp/>by<sp/>&lt;tt&gt;epsilon&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classvigra_1_1Rational_1a431b2616e49d7b95ab78ac2ff9c32036" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ae0a33e796fe904111569461516de04e9" kindref="member">Rational</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>1e-4)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>num(IntType(v<sp/>&lt;<sp/>0.0<sp/>?</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v/epsilon<sp/>-<sp/>0.5</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>v/epsilon<sp/>+<sp/>0.5)),</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>den(IntType(1.0/epsilon<sp/>+<sp/>0.5))</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>copy<sp/>constructor<sp/>and<sp/>assignment<sp/>are<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Assignment<sp/>from<sp/>&lt;tt&gt;IntType&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="classvigra_1_1Rational_1a3bf305dad4c0932127dbdfd7f0a444aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1a3bf305dad4c0932127dbdfd7f0a444aa" kindref="member">operator=</ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1af1fd6d940ed3b587f2aecfecd113f2fd" kindref="member">assign</ref>(n,<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Assignment<sp/>from<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>pair.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1af1fd6d940ed3b587f2aecfecd113f2fd" kindref="member">assign</ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>n,<sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>d,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doNormalize<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Access<sp/>numerator.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/><ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num;<sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Access<sp/>denominator.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/><ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>den;<sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Add-assignment<sp/>from<sp/>&lt;tt&gt;Rational&lt;/tt&gt;</highlight></codeline>
<codeline lineno="276"><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ad4cea6beb1ce868aa9afd5217ebca782" kindref="member">operator+= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>&amp;<sp/>r);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Subtract-assignment<sp/>from<sp/>&lt;tt&gt;Rational&lt;/tt&gt;</highlight></codeline>
<codeline lineno="282"><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1af29dbd66c631f1ccad752eb56a613d1a" kindref="member">operator-= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>&amp;<sp/>r);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Multiply-assignment<sp/>from<sp/>&lt;tt&gt;Rational&lt;/tt&gt;</highlight></codeline>
<codeline lineno="288"><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ad78f26f7ee49c917688b3df3802a519e" kindref="member">operator*= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>&amp;<sp/>r);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Divide-assignment<sp/>from<sp/>&lt;tt&gt;Rational&lt;/tt&gt;</highlight></codeline>
<codeline lineno="294"><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1a7fc72d1aa3e20f60a02c51a46133e39a" kindref="member">operator/= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>&amp;<sp/>r);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Add-assignment<sp/>from<sp/>&lt;tt&gt;IntType&lt;/tt&gt;</highlight></codeline>
<codeline lineno="300"><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ad4cea6beb1ce868aa9afd5217ebca782" kindref="member">operator+= </ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>i);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Subtract-assignment<sp/>from<sp/>&lt;tt&gt;IntType&lt;/tt&gt;</highlight></codeline>
<codeline lineno="306"><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1af29dbd66c631f1ccad752eb56a613d1a" kindref="member">operator-= </ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>i);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Multiply-assignment<sp/>from<sp/>&lt;tt&gt;IntType&lt;/tt&gt;</highlight></codeline>
<codeline lineno="312"><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ad78f26f7ee49c917688b3df3802a519e" kindref="member">operator*= </ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>i);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Divide-assignment<sp/>from<sp/>&lt;tt&gt;IntType&lt;/tt&gt;</highlight></codeline>
<codeline lineno="318"><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1a7fc72d1aa3e20f60a02c51a46133e39a" kindref="member">operator/= </ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>i);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Pre-increment.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ae3996b4c1b328cd4b97e94eead0d520a" kindref="member">operator++</ref>();</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Pre-decrement.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ab72be46aa0524dd489df981953459e66" kindref="member">operator--</ref>();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Post-increment.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="classvigra_1_1Rational_1aa1f81e90baf268ac29c0368f06cce1ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/><ref refid="classvigra_1_1Rational_1aa1f81e90baf268ac29c0368f06cce1ae" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><ref refid="classvigra_1_1Rational_1aa1f81e90baf268ac29c0368f06cce1ae" kindref="member">operator++</ref>();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Post-decrement.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classvigra_1_1Rational_1ad9e36dc55a0f4041883484cfdf41e028" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/><ref refid="classvigra_1_1Rational_1ad9e36dc55a0f4041883484cfdf41e028" kindref="member">operator--</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>res(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/><ref refid="classvigra_1_1Rational_1ad9e36dc55a0f4041883484cfdf41e028" kindref="member">operator--</ref>();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;<sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Check<sp/>for<sp/>zero<sp/>by<sp/>calling<sp/>&lt;tt&gt;!numerator()&lt;/tt&gt;</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="classvigra_1_1Rational_1ac8b1d32dbd52d431450c70b151cfa205" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ac8b1d32dbd52d431450c70b151cfa205" kindref="member">operator!</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!num;<sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Check<sp/>whether<sp/>we<sp/>have<sp/>positive<sp/>infinity.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="classvigra_1_1Rational_1ab6ba23781a4e39fcf512348562c27374" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab6ba23781a4e39fcf512348562c27374" kindref="member">is_pinf</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="344"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>den<sp/>==<sp/>zero<sp/>&amp;&amp;<sp/>num<sp/>&gt;<sp/>zero;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Check<sp/>whether<sp/>we<sp/>have<sp/>negative<sp/>infinity.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="classvigra_1_1Rational_1a002f500c34790f953f2b2a98e10ff92e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1a002f500c34790f953f2b2a98e10ff92e" kindref="member">is_ninf</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="352"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>den<sp/>==<sp/>zero<sp/>&amp;&amp;<sp/>num<sp/>&lt;<sp/>zero;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Check<sp/>whether<sp/>we<sp/>have<sp/>positive<sp/>or<sp/>negative<sp/>infinity.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="classvigra_1_1Rational_1a933038143f002ac7e1b885b0043ff534" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1a933038143f002ac7e1b885b0043ff534" kindref="member">is_inf</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="360"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>den<sp/>==<sp/>zero<sp/>&amp;&amp;<sp/>num<sp/>!=<sp/>zero;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**<sp/>Check<sp/>the<sp/>sign.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gives<sp/>1<sp/>if<sp/>the<sp/>number<sp/>is<sp/>positive,<sp/>-1<sp/>if<sp/>negative,<sp/>and<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="classvigra_1_1Rational_1ac79e9fb8002282a5f3651fe0b2a6b2a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ac79e9fb8002282a5f3651fe0b2a6b2a9" kindref="member">sign</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="370"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num<sp/>==<sp/>zero<sp/>?<sp/>0<sp/>:<sp/>num<sp/>&lt;<sp/>zero<sp/>?<sp/>-1<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementation<sp/>-<sp/>numerator<sp/>and<sp/>denominator<sp/>(normalized).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Other<sp/>possibilities<sp/>-<sp/>separate<sp/>whole-part,<sp/>or<sp/>sign,<sp/>fields?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>num;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>den;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Representation<sp/>note:<sp/>Fractions<sp/>are<sp/>kept<sp/>in<sp/>normalized<sp/>form<sp/>at<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>times.<sp/>normalized<sp/>form<sp/>is<sp/>defined<sp/>as<sp/>gcd(num,den)<sp/>==<sp/>1<sp/>and<sp/>den<sp/>&gt;<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>particular,<sp/>note<sp/>that<sp/>the<sp/>implementation<sp/>of<sp/>abs()<sp/>below<sp/>relies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>den<sp/>always<sp/>being<sp/>positive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>normalize();</highlight></codeline>
<codeline lineno="386"><highlight class="normal">};</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assign<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;&amp;</highlight></codeline>
<codeline lineno="391" refid="classvigra_1_1Rational_1af1fd6d940ed3b587f2aecfecd113f2fd" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational_1af1fd6d940ed3b587f2aecfecd113f2fd" kindref="member">Rational&lt;IntType&gt;::assign</ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>n,<sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>d,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doNormalize)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(doNormalize)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalize();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arithmetic<sp/>assignment<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="402" refid="classvigra_1_1Rational_1ad4cea6beb1ce868aa9afd5217ebca782" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ad4cea6beb1ce868aa9afd5217ebca782" kindref="member">Rational&lt;IntType&gt;::operator+= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>Inf<sp/>and<sp/>NaN<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.den<sp/>==<sp/>zero<sp/>&amp;&amp;<sp/><ref refid="group__MathFunctions_1ga99756ca23b738bdc82afba3b0e49df74" kindref="member">sign</ref>()*r.<ref refid="classvigra_1_1Rational_1ac79e9fb8002282a5f3651fe0b2a6b2a9" kindref="member">sign</ref>()<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assign(r.num,<sp/>zero,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Inf<sp/>or<sp/>-Inf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>calculation<sp/>avoids<sp/>overflow,<sp/>and<sp/>minimises<sp/>the<sp/>number<sp/>of<sp/>expensive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculations.<sp/>Thanks<sp/>to<sp/>Nickolay<sp/>Mladenov<sp/>for<sp/>this<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Proof:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>compute<sp/>a/b<sp/>+<sp/>c/d,<sp/>where<sp/>gcd(a,b)=1<sp/>and<sp/>gcd(b,c)=1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>g<sp/>=<sp/>gcd(b,d),<sp/>and<sp/>b<sp/>=<sp/>b1*g,<sp/>d=d1*g.<sp/>Then<sp/>gcd(b1,d1)=1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>is<sp/>(a*d1<sp/>+<sp/>c*b1)<sp/>/<sp/>(b1*d1*g).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>have<sp/>to<sp/>normalize<sp/>this<sp/>ratio.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>assume<sp/>h<sp/>|<sp/>gcd((a*d1<sp/>+<sp/>c*b1),<sp/>(b1*d1*g)),<sp/>and<sp/>h<sp/>&gt;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>h<sp/>|<sp/>b1<sp/>then<sp/>gcd(h,d1)=1<sp/>and<sp/>hence<sp/>h|(a*d1+c*b1)<sp/>=&gt;<sp/>h|a.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>since<sp/>gcd(a,b1)=1<sp/>we<sp/>have<sp/>h=1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Similarly<sp/>h|d1<sp/>leads<sp/>to<sp/>h=1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>have<sp/>that<sp/>h<sp/>|<sp/>gcd((a*d1<sp/>+<sp/>c*b1)<sp/>,<sp/>(b1*d1*g))<sp/>=&gt;<sp/>h|g</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally<sp/>we<sp/>have<sp/>gcd((a*d1<sp/>+<sp/>c*b1),<sp/>(b1*d1*g))<sp/>=<sp/>gcd((a*d1<sp/>+<sp/>c*b1),<sp/>g)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Which<sp/>proves<sp/>that<sp/>instead<sp/>of<sp/>normalizing<sp/>the<sp/>result,<sp/>it<sp/>is<sp/>better<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>divide<sp/>num<sp/>and<sp/>den<sp/>by<sp/>gcd((a*d1<sp/>+<sp/>c*b1),<sp/>g)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>against<sp/>self-modification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>r_num<sp/>=<sp/>r.num;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>r_den<sp/>=<sp/>r.den;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>g<sp/>=<sp/><ref refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" kindref="member">gcd</ref>(den,<sp/>r_den);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>/=<sp/>g;<sp/><sp/></highlight><highlight class="comment">//<sp/>=<sp/>b1<sp/>from<sp/>the<sp/>calculations<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num<sp/>*<sp/>(r_den<sp/>/<sp/>g)<sp/>+<sp/>r_num<sp/>*<sp/>den;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" kindref="member">gcd</ref>(num,<sp/>g);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>/=<sp/>g;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>*=<sp/>r_den/g;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="452" refid="classvigra_1_1Rational_1af29dbd66c631f1ccad752eb56a613d1a" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1af29dbd66c631f1ccad752eb56a613d1a" kindref="member">Rational&lt;IntType&gt;::operator-= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>Inf<sp/>and<sp/>NaN<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.den<sp/>==<sp/>zero<sp/>&amp;&amp;<sp/><ref refid="group__MathFunctions_1ga99756ca23b738bdc82afba3b0e49df74" kindref="member">sign</ref>()*r.<ref refid="classvigra_1_1Rational_1ac79e9fb8002282a5f3651fe0b2a6b2a9" kindref="member">sign</ref>()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assign(-r.num,<sp/>zero,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Inf<sp/>or<sp/>-Inf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>against<sp/>self-modification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>r_num<sp/>=<sp/>r.num;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>r_den<sp/>=<sp/>r.den;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>calculation<sp/>avoids<sp/>overflow,<sp/>and<sp/>minimises<sp/>the<sp/>number<sp/>of<sp/>expensive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calculations.<sp/>It<sp/>corresponds<sp/>exactly<sp/>to<sp/>the<sp/>+=<sp/>case<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>g<sp/>=<sp/><ref refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" kindref="member">gcd</ref>(den,<sp/>r_den);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>/=<sp/>g;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num<sp/>*<sp/>(r_den<sp/>/<sp/>g)<sp/>-<sp/>r_num<sp/>*<sp/>den;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" kindref="member">gcd</ref>(num,<sp/>g);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>/=<sp/>g;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>*=<sp/>r_den/g;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="486" refid="classvigra_1_1Rational_1ad78f26f7ee49c917688b3df3802a519e" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ad78f26f7ee49c917688b3df3802a519e" kindref="member">Rational&lt;IntType&gt;::operator*= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>Inf<sp/>and<sp/>NaN<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.num<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>*=<sp/>r.<ref refid="classvigra_1_1Rational_1ac79e9fb8002282a5f3651fe0b2a6b2a9" kindref="member">sign</ref>();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>r.num<sp/>*<sp/><ref refid="group__MathFunctions_1ga99756ca23b738bdc82afba3b0e49df74" kindref="member">sign</ref>();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>against<sp/>self-modification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>r_num<sp/>=<sp/>r.num;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>r_den<sp/>=<sp/>r.den;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>overflow<sp/>and<sp/>preserve<sp/>normalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>gcd1<sp/>=<sp/>gcd&lt;IntType&gt;(num,<sp/>r_den);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>gcd2<sp/>=<sp/>gcd&lt;IntType&gt;(r_num,<sp/>den);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>(num/gcd1)<sp/>*<sp/>(r_num/gcd2);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>=<sp/>(den/gcd2)<sp/>*<sp/>(r_den/gcd1);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="520" refid="classvigra_1_1Rational_1a7fc72d1aa3e20f60a02c51a46133e39a" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1a7fc72d1aa3e20f60a02c51a46133e39a" kindref="member">Rational&lt;IntType&gt;::operator/= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational</ref><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>the<sp/>Inf<sp/>and<sp/>NaN<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.num<sp/>!=<sp/>zero)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>*=<sp/>r.<ref refid="classvigra_1_1Rational_1ac79e9fb8002282a5f3651fe0b2a6b2a9" kindref="member">sign</ref>();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.num<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>IntType(<ref refid="group__MathFunctions_1ga99756ca23b738bdc82afba3b0e49df74" kindref="member">sign</ref>());<sp/><sp/></highlight><highlight class="comment">//<sp/>normalized<sp/>inf!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Protect<sp/>against<sp/>self-modification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>r_num<sp/>=<sp/>r.num;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>r_den<sp/>=<sp/>r.den;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>overflow<sp/>and<sp/>preserve<sp/>normalization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>gcd1<sp/>=<sp/>gcd&lt;IntType&gt;(num,<sp/>r_num);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>gcd2<sp/>=<sp/>gcd&lt;IntType&gt;(r_den,<sp/>den);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>=<sp/>(num/gcd1)<sp/>*<sp/>(r_den/gcd2);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>=<sp/>(den/gcd2)<sp/>*<sp/>(r_num/gcd1);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(den<sp/>&lt;<sp/>zero)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>-num;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>-den;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mixed-mode<sp/>operators<sp/>--<sp/>implement<sp/>explicitly<sp/>to<sp/>save<sp/>gcd()<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="565" refid="classvigra_1_1Rational_1adde9eb389ef2be4c33cc1a7b2fbb883f" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational_1ad4cea6beb1ce868aa9afd5217ebca782" kindref="member">Rational&lt;IntType&gt;::operator+= </ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>i)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>+=<sp/>i<sp/>*<sp/>den;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="573" refid="classvigra_1_1Rational_1a4da0e74674f083c49fd187a93aba194f" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational_1af29dbd66c631f1ccad752eb56a613d1a" kindref="member">Rational&lt;IntType&gt;::operator-= </ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>i)</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>-=<sp/>i<sp/>*<sp/>den;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="581" refid="classvigra_1_1Rational_1ae02a5f3196e9f0484d4078fa64b068a2" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational_1ad78f26f7ee49c917688b3df3802a519e" kindref="member">Rational&lt;IntType&gt;::operator*= </ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>i)</highlight></codeline>
<codeline lineno="582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>IntType(1))</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>IntType(1);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>g<sp/>=<sp/><ref refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" kindref="member">gcd</ref>(i,<sp/>den);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>/=<sp/>g;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>*=<sp/>i<sp/>/<sp/>g;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="608" refid="classvigra_1_1Rational_1a7f8f03a6e027258843a190d5e18f7d5b" refkind="member"><highlight class="normal"><ref refid="classvigra_1_1Rational_1a7fc72d1aa3e20f60a02c51a46133e39a" kindref="member">Rational&lt;IntType&gt;::operator/= </ref>(<ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">param_type</ref><sp/>i)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>IntType(1))</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>IntType(<ref refid="group__MathFunctions_1ga99756ca23b738bdc82afba3b0e49df74" kindref="member">sign</ref>());<sp/></highlight><highlight class="comment">//<sp/>normalized<sp/>inf!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>g<sp/>=<sp/><ref refid="group__MathFunctions_1ga5825d3973169fc0c90404849a5906697" kindref="member">gcd</ref>(i,<sp/>num);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>zero)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>/=<sp/>-g;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>*=<sp/>-i<sp/>/<sp/>g;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>/=<sp/>g;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>*=<sp/>i<sp/>/<sp/>g;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increment<sp/>and<sp/>decrement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="639" refid="classvigra_1_1Rational_1ae3996b4c1b328cd4b97e94eead0d520a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ae3996b4c1b328cd4b97e94eead0d520a" kindref="member">Rational&lt;IntType&gt;::operator++</ref>()</highlight></codeline>
<codeline lineno="640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>never<sp/>denormalise<sp/>the<sp/>fraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>+=<sp/>den;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="647" refid="classvigra_1_1Rational_1ab72be46aa0524dd489df981953459e66" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/><ref refid="classvigra_1_1Rational_1ab72be46aa0524dd489df981953459e66" kindref="member">Rational&lt;IntType&gt;::operator--</ref>()</highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>never<sp/>denormalise<sp/>the<sp/>fraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>-=<sp/>den;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normalisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;::normalize</ref>()</highlight></codeline>
<codeline lineno="657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>repeated<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(den<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>&lt;<sp/>zero)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>IntType(-1);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>IntType(1);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>case<sp/>of<sp/>zero<sp/>separately,<sp/>to<sp/>avoid<sp/>division<sp/>by<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>==<sp/>zero)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>IntType(1);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>g<sp/>=<sp/>gcd&lt;IntType&gt;(num,<sp/>den);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>/=<sp/>g;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>den<sp/>/=<sp/>g;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>the<sp/>denominator<sp/>is<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(den<sp/>&lt;<sp/>zero)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>-num;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>-den;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rational-Traits<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="696"><highlight class="comment">/**<sp/>\page<sp/>RationalTraits<sp/>Numeric<sp/>and<sp/>Promote<sp/>Traits<sp/>of<sp/>Rational</highlight></codeline>
<codeline lineno="697"><highlight class="comment"></highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>numeric<sp/>and<sp/>promote<sp/>traits<sp/>for<sp/>Rational<sp/>follow</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>general<sp/>specifications<sp/>for<sp/>\ref<sp/>NumericPromotionTraits<sp/>and</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/>\ref<sp/>AlgebraicField.<sp/>They<sp/>are<sp/>implemented<sp/>in<sp/>terms<sp/>of<sp/>the<sp/>traits<sp/>of<sp/>the<sp/>basic<sp/>types<sp/>by</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/>partial<sp/>template<sp/>specialization:</highlight></codeline>
<codeline lineno="702"><highlight class="comment"></highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="704"><highlight class="comment"></highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>NumericTraits&lt;Rational&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Rational&lt;typename<sp/>NumericTraits&lt;T&gt;::Promote&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Rational&lt;typename<sp/>NumericTraits&lt;T&gt;::RealPromote&gt;<sp/>RealPromote;</highlight></codeline>
<codeline lineno="710"><highlight class="comment"></highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>NumericTraits&lt;T&gt;::isIntegral<sp/>isIntegral;</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/>isScalar;</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>NumericTraits&lt;T&gt;::isSigned<sp/>isSigned;</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>VigraTrueType<sp/>isOrdered;</highlight></codeline>
<codeline lineno="715"><highlight class="comment"></highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>etc.</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="718"><highlight class="comment"></highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/>template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>NormTraits&lt;Rational&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Rational&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>NumericTraits&lt;Type&gt;::Promote<sp/>SquaredNormType;</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NormType;</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="726"><highlight class="comment"></highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>PromoteTraits&lt;Rational&lt;T1&gt;,<sp/>Rational&lt;T2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>Rational&lt;typename<sp/>PromoteTraits&lt;T1,<sp/>T2&gt;::Promote&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="733"><highlight class="comment"></highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/rational.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="736"><highlight class="comment"></highlight></codeline>
<codeline lineno="737"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_PARTIAL_TEMPLATE_SPECIALIZATION</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NumericTraits&lt;Rational&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rational&lt;T&gt;<sp/>Type;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rational&lt;typename<sp/>NumericTraits&lt;T&gt;::Promote&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rational&lt;typename<sp/>NumericTraits&lt;T&gt;::RealPromote&gt;<sp/>RealPromote;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::complex&lt;Rational&lt;RealPromote&gt;<sp/>&gt;<sp/>ComplexPromote;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>ValueType;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NumericTraits&lt;T&gt;::isIntegral<sp/>isIntegral;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isScalar;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NumericTraits&lt;T&gt;::isSigned<sp/>isSigned;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraTrueType<sp/>isOrdered;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VigraFalseType<sp/>isComplex;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Type<sp/>zero()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type(0);<sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Type<sp/>one()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type(1);<sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Type<sp/>nonZero()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>one();<sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Promote<sp/>toPromote(Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Promote(v.numerator(),<sp/>v.denominator(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RealPromote<sp/>toRealPromote(Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RealPromote(v.numerator(),<sp/>v.denominator(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Type<sp/>fromPromote(Promote<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type(NumericTraits&lt;T&gt;::fromPromote(v.numerator()),</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumericTraits&lt;T&gt;::fromPromote(v.denominator()),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Type<sp/>fromRealPromote(RealPromote<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Type(NumericTraits&lt;T&gt;::fromRealPromote(v.numerator()),</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NumericTraits&lt;T&gt;::fromRealPromote(v.denominator()),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal">};</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NormTraits&lt;Rational&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rational&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NumericTraits&lt;Type&gt;::Promote<sp/>SquaredNormType;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NormType;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">};</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PromoteTraits&lt;Rational&lt;T&gt;,<sp/>Rational&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="781"><highlight class="normal">{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rational&lt;typename<sp/>PromoteTraits&lt;T,<sp/>T&gt;::Promote&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Promote<sp/>toPromote(Rational&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal">};</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PromoteTraits&lt;Rational&lt;T1&gt;,<sp/>Rational&lt;T2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rational&lt;typename<sp/>PromoteTraits&lt;T1,<sp/>T2&gt;::Promote&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Promote<sp/>toPromote(Rational&lt;T1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Promote<sp/>toPromote(Rational&lt;T2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal">};</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PromoteTraits&lt;Rational&lt;T1&gt;,<sp/>T2<sp/>&gt;</highlight></codeline>
<codeline lineno="796"><highlight class="normal">{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rational&lt;typename<sp/>PromoteTraits&lt;T1,<sp/>T2&gt;::Promote&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Promote<sp/>toPromote(Rational&lt;T1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Promote<sp/>toPromote(T2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Promote(v);<sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal">};</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PromoteTraits&lt;T1,<sp/>Rational&lt;T2&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Rational&lt;typename<sp/>PromoteTraits&lt;T1,<sp/>T2&gt;::Promote&gt;<sp/>Promote;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Promote<sp/>toPromote(T1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Promote(v);<sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Promote<sp/>toPromote(Rational&lt;T2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal">};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>NO_PARTIAL_TEMPLATE_SPECIALIZATION</highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RationalOperations<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="818"><highlight class="comment">/**<sp/>\addtogroup<sp/>RationalOperations<sp/>Functions<sp/>for<sp/>Rational</highlight></codeline>
<codeline lineno="819"><highlight class="comment"></highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/>\brief<sp/><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/rational.hxx\&gt;&lt;br&gt;</highlight></codeline>
<codeline lineno="821"><highlight class="comment"></highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/>These<sp/>functions<sp/>fulfill<sp/>the<sp/>requirements<sp/>of<sp/>an<sp/>\ref<sp/>AlgebraicField.</highlight></codeline>
<codeline lineno="823"><highlight class="comment"></highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;p&gt;</highlight></codeline>
<codeline lineno="826"><highlight class="comment"></highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="828"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="829"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arithmetic<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>unary<sp/>plus</highlight></codeline>
<codeline lineno="837"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="838" refid="group__RationalOperations_1gabb5ab7ca8675f3ceb1364aed2790b931" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/><ref refid="group__RangesAndPoints_1gaae0d5ddc9e1bb121fcd46339a797795d" kindref="member">operator+ </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>unary<sp/>minus<sp/>(negation)</highlight></codeline>
<codeline lineno="844"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="845" refid="group__RationalOperations_1ga0809bb4cb9a7b804fce33ba1ec74cbf9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/><ref refid="group__RangesAndPoints_1ga8bc0dbe52072019f3c87980a96db2ddd" kindref="member">operator- </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(-r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>(),<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>addition</highlight></codeline>
<codeline lineno="851"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="852" refid="group__RationalOperations_1gaf0c389a2806529a1c3180011b8d43430" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/><ref refid="group__RangesAndPoints_1gaae0d5ddc9e1bb121fcd46339a797795d" kindref="member">operator+</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>subtraction</highlight></codeline>
<codeline lineno="858"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="859" refid="group__RationalOperations_1ga6a3a4787f12788a01707347ffcc0d213" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/><ref refid="group__RangesAndPoints_1ga8bc0dbe52072019f3c87980a96db2ddd" kindref="member">operator-</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="860"><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>-=<sp/>r;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>multiplication</highlight></codeline>
<codeline lineno="865"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="866" refid="group__RationalOperations_1ga4db72780e2c1065114e179823754f133" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>operator*(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>*=<sp/>r;</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>division</highlight></codeline>
<codeline lineno="872"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="873" refid="group__RationalOperations_1gad9464662037b250d97b80bb12ac55cba" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>operator/(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>/=<sp/>r;</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>addition<sp/>of<sp/>right-hand<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="879"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="881" refid="group__RationalOperations_1gafa0019d0c7c5570da496e8cc1d532ee4" refkind="member"><highlight class="normal"><ref refid="group__RangesAndPoints_1gaae0d5ddc9e1bb121fcd46339a797795d" kindref="member">operator+</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>l,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">Rational&lt;IntType&gt;::param_type</ref><sp/>r)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>+=<sp/>r;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>subtraction<sp/>of<sp/>right-hand<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="887"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="889" refid="group__RationalOperations_1ga2fe238c8ba5f3173a66ba7a6cde7bbe4" refkind="member"><highlight class="normal"><ref refid="group__RangesAndPoints_1ga8bc0dbe52072019f3c87980a96db2ddd" kindref="member">operator-</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>l,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">Rational&lt;IntType&gt;::param_type</ref><sp/>r)</highlight></codeline>
<codeline lineno="890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>-=<sp/>r;</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>multiplication<sp/>with<sp/>right-hand<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="895"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="897" refid="group__RationalOperations_1gaf0329f6f30df694d802591c667810f15" refkind="member"><highlight class="normal">operator*(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>l,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">Rational&lt;IntType&gt;::param_type</ref><sp/>r)</highlight></codeline>
<codeline lineno="898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>*=<sp/>r;</highlight></codeline>
<codeline lineno="900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>division<sp/>by<sp/>right-hand<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="903"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="905" refid="group__RationalOperations_1ga5733c7dd1e51502d7f5c46fcbcb03a7c" refkind="member"><highlight class="normal">operator/(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>l,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">Rational&lt;IntType&gt;::param_type</ref><sp/>r)</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>/=<sp/>r;</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>addition<sp/>of<sp/>left-hand<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="911"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="913" refid="group__RationalOperations_1ga0c566c857a355a5e8920eabf8d320891" refkind="member"><highlight class="normal"><ref refid="group__RangesAndPoints_1gaae0d5ddc9e1bb121fcd46339a797795d" kindref="member">operator+</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">Rational&lt;IntType&gt;::param_type</ref><sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>r)</highlight></codeline>
<codeline lineno="914"><highlight class="normal">{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>+=<sp/>l;</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>subtraction<sp/>from<sp/>left-hand<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="919"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="921" refid="group__RationalOperations_1ga8dc3bdc13d09ae15c2b7e1e2a1cf91cb" refkind="member"><highlight class="normal"><ref refid="group__RangesAndPoints_1ga8bc0dbe52072019f3c87980a96db2ddd" kindref="member">operator-</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">Rational&lt;IntType&gt;::param_type</ref><sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-r)<sp/>+=<sp/>l;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>multiplication<sp/>with<sp/>left-hand<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="927"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="929" refid="group__RationalOperations_1ga0255914f77a9d75aa0f0437bd352c0c8" refkind="member"><highlight class="normal">operator*(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">Rational&lt;IntType&gt;::param_type</ref><sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/>r)</highlight></codeline>
<codeline lineno="930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>*=<sp/>l;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>division<sp/>of<sp/>left-hand<sp/>&lt;tt&gt;IntType&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="935"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="937" refid="group__RationalOperations_1gab6ad7be37eb62b881e9d35565ab308e7" refkind="member"><highlight class="normal">operator/(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational_1ab0f80695931bc23b79357590b8207aaf" kindref="member">Rational&lt;IntType&gt;::param_type</ref><sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>&lt;<sp/>IntType(0))</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(-r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>(),<sp/>-r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>*=<sp/>l;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>(),<sp/>r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>*=<sp/>l;</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comparison<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>equality</highlight></codeline>
<codeline lineno="953"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="group__RationalOperations_1gae0f327c3a58e9a60ccae929aadf42bc3" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1ga51aa30ebec3e036cbd162a05d9a34f7f" kindref="member" tooltip="equal">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType1&gt;</ref><sp/>&amp;<sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>==<sp/>r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>();<sp/></highlight><highlight class="comment">//<sp/>works<sp/>since<sp/>numbers<sp/>are<sp/>normalized,<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>they<sp/>represent<sp/>+-infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>equality<sp/>with<sp/>right-hand<sp/>&lt;tt&gt;IntType2&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="963"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965" refid="group__RationalOperations_1ga5ef13c2d85b678100cf7df108ee40983" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1ga51aa30ebec3e036cbd162a05d9a34f7f" kindref="member" tooltip="equal">operator== </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType1&gt;</ref><sp/>&amp;<sp/>l,<sp/>IntType2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight></codeline>
<codeline lineno="966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((l.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>IntType1(1))<sp/>&amp;&amp;<sp/>(l.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>==<sp/>i));</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>equality<sp/>with<sp/>left-hand<sp/>&lt;tt&gt;IntType1&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="971"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973" refid="group__RationalOperations_1gadd8b88ddbd3e4e9114e2907cbddd4872" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1ga51aa30ebec3e036cbd162a05d9a34f7f" kindref="member" tooltip="equal">operator==</ref>(IntType1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>==<sp/>l;</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>inequality</highlight></codeline>
<codeline lineno="979"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="group__RationalOperations_1ga97958d015915989451ddc7c28daa0c8c" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1gab6fe0235404f2cfe54c027ce7cb1c048" kindref="member" tooltip="not equal">operator!=</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>!=<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>||</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>!=<sp/>r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>();<sp/></highlight><highlight class="comment">//<sp/>works<sp/>since<sp/>numbers<sp/>are<sp/>normalized,<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>they<sp/>represent<sp/>+-infinity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>inequality<sp/>with<sp/>right-hand<sp/>&lt;tt&gt;IntType2&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="989"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991" refid="group__RationalOperations_1gaa0e894d0367337f440c7b9eb5e045157" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1gab6fe0235404f2cfe54c027ce7cb1c048" kindref="member" tooltip="not equal">operator!= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType1&gt;</ref><sp/>&amp;<sp/>l,<sp/>IntType2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight></codeline>
<codeline lineno="992"><highlight class="normal">{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((l.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>!=<sp/>IntType1(1))<sp/>||<sp/>(l.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>!=<sp/>i));</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>inequality<sp/>with<sp/>left-hand<sp/>&lt;tt&gt;IntType1&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="997"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999" refid="group__RationalOperations_1ga5bfb2105733941a385882631be999bee" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1gab6fe0235404f2cfe54c027ce7cb1c048" kindref="member" tooltip="not equal">operator!=</ref>(IntType1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>!=<sp/>l;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less-than</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007" refid="group__RationalOperations_1ga5dd4e237a725bb4353ab70f94132d266" refkind="member"><highlight class="normal">operator&lt;<sp/>(const<sp/>Rational&lt;IntType1&gt;<sp/>&amp;<sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>repeated<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;IntType1,<sp/>IntType2&gt;::Promote<sp/>IntType;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>easy<sp/>cases.<sp/>Take<sp/>advantage<sp/>of<sp/>the<sp/>fact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>denominator<sp/>is<sp/>never<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.denominator()<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.denominator()<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-inf<sp/>&lt;<sp/>inf,<sp/>!(-inf<sp/>&lt;<sp/>-inf),<sp/>!(inf<sp/>&lt;<sp/>-inf),<sp/>!(inf<sp/>&lt;<sp/>inf)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l.numerator()<sp/>&lt;<sp/>r.numerator();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-inf<sp/>&lt;<sp/>-1,<sp/>-inf<sp/>&lt;<sp/>0,<sp/>-inf<sp/>&lt;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!(inf<sp/>&lt;<sp/>-1),<sp/>!(inf<sp/>&lt;<sp/>0),<sp/>!(inf<sp/>&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l.numerator()<sp/>&lt;<sp/>zero;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.denominator()<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>&lt;<sp/>inf,<sp/>0<sp/>&lt;<sp/>inf,<sp/>1<sp/>&lt;<sp/>inf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!(-1<sp/>&lt;<sp/>-inf),<sp/>!(0<sp/>&lt;<sp/>-inf),<sp/>!(1<sp/>&lt;<sp/>-inf)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r.numerator()<sp/>&gt;<sp/>zero;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!(1<sp/>&lt;<sp/>-1),<sp/>!(1<sp/>&lt;<sp/>0),<sp/>!(0<sp/>&lt;<sp/>-1),<sp/>!(0<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.numerator()<sp/>&gt;=<sp/>zero<sp/>&amp;&amp;<sp/>r.numerator()<sp/>&lt;=<sp/>zero)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>&lt;<sp/>0,<sp/>-1<sp/>&lt;<sp/>1,<sp/>0<sp/>&lt;<sp/>1<sp/>(note:<sp/>!(0<sp/>&lt;<sp/>0)<sp/>was<sp/>already<sp/>handled!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.numerator()<sp/>&lt;=<sp/>zero<sp/>&amp;&amp;<sp/>r.numerator()<sp/>&gt;=<sp/>zero)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>numbers<sp/>have<sp/>the<sp/>same<sp/>sign<sp/>(and<sp/>are<sp/>neither<sp/>zero<sp/>or<sp/>+-infinity)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>=&gt;<sp/>calculate<sp/>result,<sp/>avoid<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>gcd1<sp/>=<sp/>gcd&lt;IntType&gt;(l.numerator(),<sp/>r.numerator());</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>gcd2<sp/>=<sp/>gcd&lt;IntType&gt;(r.denominator(),<sp/>l.denominator());</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(l.numerator()/gcd1)<sp/>*<sp/>(r.denominator()/gcd2)<sp/>&lt;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(l.denominator()/gcd2)<sp/>*<sp/>(r.numerator()/gcd1);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less-than<sp/>with<sp/>right-hand<sp/>&lt;tt&gt;IntType2&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047" refid="group__RationalOperations_1ga42ecce5ecb66183a0b8095c86d511165" refkind="member"><highlight class="normal">operator&lt;<sp/>(const<sp/>Rational&lt;IntType1&gt;<sp/>&amp;<sp/>l,<sp/>IntType2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>repeated<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>PromoteTraits&lt;IntType1,<sp/>IntType2&gt;::Promote<sp/>IntType;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>easy<sp/>cases.<sp/>Take<sp/>advantage<sp/>of<sp/>the<sp/>fact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>denominator<sp/>is<sp/>never<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.denominator()<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-inf<sp/>&lt;<sp/>-1,<sp/>-inf<sp/>&lt;<sp/>0,<sp/>-inf<sp/>&lt;<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!(inf<sp/>&lt;<sp/>-1),<sp/>!(inf<sp/>&lt;<sp/>0),<sp/>!(inf<sp/>&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l.numerator()<sp/>&lt;<sp/>zero;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!(1<sp/>&lt;<sp/>-1),<sp/>!(1<sp/>&lt;<sp/>0),<sp/>!(0<sp/>&lt;<sp/>-1),<sp/>!(0<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.numerator()<sp/>&gt;=<sp/>zero<sp/>&amp;&amp;<sp/>i<sp/>&lt;=<sp/>zero)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>&lt;<sp/>0,<sp/>-1<sp/>&lt;<sp/>1,<sp/>0<sp/>&lt;<sp/>1<sp/>(note:<sp/>!(0<sp/>&lt;<sp/>0)<sp/>was<sp/>already<sp/>handled!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(l.numerator()<sp/>&lt;=<sp/>zero<sp/>&amp;&amp;<sp/>i<sp/>&gt;=<sp/>zero)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>use<sp/>the<sp/>fact<sp/>that<sp/>n/d<sp/>truncates<sp/>towards<sp/>zero<sp/>as<sp/>long<sp/>as<sp/>n<sp/>and<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>both<sp/>positive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Divide<sp/>instead<sp/>of<sp/>multiplying<sp/>to<sp/>avoid<sp/>overflow<sp/>issues.<sp/>Of<sp/>course,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>division<sp/>may<sp/>be<sp/>slower,<sp/>but<sp/>accuracy<sp/>is<sp/>more<sp/>important<sp/>than<sp/>speed...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l.numerator()<sp/>&gt;<sp/>zero)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(l.numerator()/l.denominator())<sp/>&lt;<sp/>i;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-i<sp/>&lt;<sp/>(-l.numerator()/l.denominator());</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less-than<sp/>with<sp/>left-hand<sp/>&lt;tt&gt;IntType1&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079" refid="group__RationalOperations_1gac83e993970f34eb305dde31c49fa34be" refkind="member"><highlight class="normal">operator&lt;(IntType1<sp/>const<sp/>&amp;<sp/>l,<sp/>Rational&lt;IntType2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>&gt;<sp/>l;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater-than</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087" refid="group__RationalOperations_1ga2946ffa1ec8b6d02b8a15f361755b3e7" refkind="member"><highlight class="normal"><ref refid="group__FixedPointOperations_1gab8c9b89e1d7d338ca3243a0a6226a331" kindref="member" tooltip="greater">operator&gt;</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>&lt;<sp/>l;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater-than<sp/>with<sp/>right-hand<sp/>&lt;tt&gt;IntType2&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095" refid="group__RationalOperations_1ga719bcf3d7b89a4a8c0095eb1d4ebb5e8" refkind="member"><highlight class="normal"><ref refid="group__FixedPointOperations_1gab8c9b89e1d7d338ca3243a0a6226a331" kindref="member" tooltip="greater">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType1&gt;</ref><sp/>&amp;<sp/>l,<sp/>IntType2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>i)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trap<sp/>equality<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>==<sp/>i<sp/>&amp;&amp;<sp/>l.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>IntType1(1))</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>we<sp/>can<sp/>use<sp/>operator&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(l<sp/>&lt;<sp/>i);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater-than<sp/>with<sp/>left-hand<sp/>&lt;tt&gt;IntType1&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108" refid="group__RationalOperations_1gaa9603be3f4235c8650e2adb9bbbd27ca" refkind="member"><highlight class="normal"><ref refid="group__FixedPointOperations_1gab8c9b89e1d7d338ca3243a0a6226a331" kindref="member" tooltip="greater">operator&gt;</ref>(IntType1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>&lt;<sp/>l;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less-equal</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116" refid="group__RationalOperations_1ga8c0e1e285247020c13726b99c1b33580" refkind="member"><highlight class="normal">operator&lt;=(Rational&lt;IntType1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(r<sp/>&lt;<sp/>l);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less-equal<sp/>with<sp/>right-hand<sp/>&lt;tt&gt;IntType2&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124" refid="group__RationalOperations_1gaade2accfab99c5d97d43bbd85805ce23" refkind="member"><highlight class="normal">operator&lt;=(Rational&lt;IntType1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/>IntType2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(l<sp/>&gt;<sp/>r);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>less-equal<sp/>with<sp/>left-hand<sp/>&lt;tt&gt;IntType1&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132" refid="group__RationalOperations_1ga8b9d885c4a6d3ce993c44a79c5f382a2" refkind="member"><highlight class="normal">operator&lt;=(IntType1<sp/>const<sp/>&amp;<sp/>l,<sp/>Rational&lt;IntType2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>&gt;=<sp/>l;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater-equal</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140" refid="group__RationalOperations_1gabc0d7fd362c006305cb6d68076703af6" refkind="member"><highlight class="normal"><ref refid="group__FixedPointOperations_1ga9e66b07e0f99f4a0c73afe630d9ec9e6" kindref="member" tooltip="greater or equal">operator&gt;=</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(l<sp/>&lt;<sp/>r);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater-equal<sp/>with<sp/>right-hand<sp/>&lt;tt&gt;IntType2&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148" refid="group__RationalOperations_1ga0bc71efeac21bbb9c83ce5f094bf4dad" refkind="member"><highlight class="normal"><ref refid="group__FixedPointOperations_1ga9e66b07e0f99f4a0c73afe630d9ec9e6" kindref="member" tooltip="greater or equal">operator&gt;=</ref>(<ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/>IntType2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(l<sp/>&lt;<sp/>r);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>greater-equal<sp/>with<sp/>left-hand<sp/>&lt;tt&gt;IntType1&lt;/tt&gt;<sp/>argument</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType2&gt;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156" refid="group__RationalOperations_1ga6aae5b6b09ed46cf7f3517736a4f0c89" refkind="member"><highlight class="normal"><ref refid="group__FixedPointOperations_1ga9e66b07e0f99f4a0c73afe630d9ec9e6" kindref="member" tooltip="greater or equal">operator&gt;=</ref>(IntType1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>l,<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>&lt;=<sp/>l;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>algebraic<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">/********************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>absolute<sp/>value</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="1170" refid="group__RationalOperations_1gae9ca079686cdebf4fbe92a666b72598a" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1ga6f4ef274842b6153923f02a6cd264576" kindref="member" tooltip="absolute value (= magnitude)">abs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>&gt;=<sp/>IntType(0))</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(-r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>(),<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1178"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>norm<sp/>(same<sp/>as<sp/>&lt;tt&gt;abs(r)&lt;/tt&gt;)</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="1181" refid="group__RationalOperations_1gad9c83ada5074f95e030cf5e774d9ccf1" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1ga396baa79e8bd78a178597d32d5152041" kindref="member" tooltip="norm (= magnitude)">norm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__FFTWComplexOperators_1ga6f4ef274842b6153923f02a6cd264576" kindref="member" tooltip="absolute value (= magnitude)">abs</ref>(r);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>squared<sp/>norm</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NormTraits&lt;Rational&lt;IntType&gt;<sp/>&gt;::SquaredNormType</highlight></codeline>
<codeline lineno="1189" refid="group__RationalOperations_1ga821cb2d1bdfae5df5d4b97855358eaa9" refkind="member"><highlight class="normal"><ref refid="group__FFTWComplexOperators_1ga484df995dad9821aac02ec42cd58f7eb" kindref="member" tooltip="squared norm (= squared magnitude)">squaredNorm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NormTraits&lt;Rational&lt;IntType&gt;<sp/>&gt;::SquaredNormType(<ref refid="group__MathFunctions_1ga5fe62e7b0dc6f379dd436c9c8338c93e" kindref="member">sq</ref>(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()),<sp/><ref refid="group__MathFunctions_1ga5fe62e7b0dc6f379dd436c9c8338c93e" kindref="member">sq</ref>(r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>integer<sp/>powers</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"></highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;tt&gt;throws<sp/>bad_rational&lt;/tt&gt;<sp/>if<sp/>indeterminate<sp/>expression.</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="1200" refid="group__RationalOperations_1gaba43b6f85c1ae2dc67ab8150268a346b" refkind="member"><highlight class="normal">pow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ae;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>bad_rational();</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(IntType(1));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(IntType(1),<sp/>zero,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(zero);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ae<sp/>=<sp/>-e;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>zero<sp/>||<sp/>r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>==<sp/>zero)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ae<sp/>=<sp/>e;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>nold<sp/>=<sp/>r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>(),<sp/>dold<sp/>=<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>(),</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnew<sp/>=<sp/>IntType(1),<sp/>dnew<sp/>=<sp/>IntType(1);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>ae<sp/>!=<sp/>0;<sp/>ae<sp/>&gt;&gt;=<sp/>1,<sp/>nold<sp/>*=<sp/>nold,<sp/>dold<sp/>*=<sp/>dold)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ae<sp/>%<sp/>2<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nnew<sp/>*=<sp/>nold;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dnew<sp/>*=<sp/>dold;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nnew<sp/>&lt;<sp/>zero)</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(-dnew,<sp/>-nnew,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(dnew,<sp/>nnew,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(nnew,<sp/>dnew,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>largest<sp/>integer<sp/>not<sp/>larger<sp/>than<sp/>&lt;tt&gt;r&lt;/tt&gt;</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="1249" refid="group__RationalOperations_1ga00dbbcef01fb68816089d85e6332dbe5" refkind="member"><highlight class="normal"><ref refid="group__FixedPointOperations_1gaf8fe85520fc0bc2d77ec8e6cf26f3c5d" kindref="member" tooltip="rounding down.">floor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0),<sp/>one(1);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>zero<sp/>||<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>one)</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>&lt;<sp/>zero<sp/>?</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>/<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>-<sp/>one)</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>/<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>());</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>smallest<sp/>integer<sp/>not<sp/>smaller<sp/>than<sp/>&lt;tt&gt;r&lt;/tt&gt;</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">Rational&lt;IntType&gt;</highlight></codeline>
<codeline lineno="1262" refid="group__RationalOperations_1ga9c3bc30f7e0a5dea1bdcb60d3dee04c5" refkind="member"><highlight class="normal"><ref refid="group__FixedPointOperations_1ga14fe7b9ffa21e091c6ff4ede68717c30" kindref="member" tooltip="rounding up.">ceil</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>IntType<sp/>zero(0),<sp/>one(1);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>zero<sp/>||<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>==<sp/>one)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>&lt;<sp/>IntType(0)<sp/>?</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>/<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>())</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>(r.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>()<sp/>/<sp/>r.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>()<sp/>+<sp/>one);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Type<sp/>conversion</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"></highlight></codeline>
<codeline lineno="1275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Executes<sp/>&lt;tt&gt;static_cast&lt;T&gt;(numerator())<sp/>/<sp/>denominator()&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"></highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;Usage:&lt;/b&gt;</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"></highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Rational&lt;int&gt;<sp/>r;</highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline lineno="1282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>d;</highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>rational_cast&lt;int&gt;(r);<sp/><sp/><sp/><sp/><sp/>//<sp/>round<sp/>r<sp/>downwards</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>rational_cast&lt;double&gt;(r);<sp/><sp/>//<sp/>represent<sp/>rational<sp/>as<sp/>a<sp/>double</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>rational_cast&lt;Rational&lt;int&gt;<sp/>&gt;(r);<sp/><sp/><sp/>//<sp/>no<sp/>change</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1289" refid="group__RationalOperations_1ga0de10b17bd103b0a03ffb23f44019592" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/><ref refid="group__RationalOperations_1ga0de10b17bd103b0a03ffb23f44019592" kindref="member">rational_cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1Rational" kindref="compound">Rational&lt;IntType&gt;</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src.<ref refid="classvigra_1_1Rational_1aa2b4ad1193eb20a7ba1ef8235b9ba043" kindref="member">numerator</ref>())/src.<ref refid="classvigra_1_1Rational_1afe733e9216a2802d9705a50b70fc51c7" kindref="member">denominator</ref>();</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="group__RationalOperations_1ga0de10b17bd103b0a03ffb23f44019592" kindref="member">rational_cast</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1300"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IntType&gt;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;<sp/>(std::ostream&amp;<sp/>os,<sp/>const<sp/>vigra::Rational&lt;IntType&gt;&amp;<sp/>r)</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>r.numerator()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r.denominator();</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>VIGRA_RATIONAL_HPP</highlight></codeline>
<codeline lineno="1312"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/rational.hxx"/>
  </compounddef>
</doxygen>
