<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="quadprog_8hxx" kind="file">
    <compoundname>quadprog.hxx</compoundname>
    <includes local="no">limits</includes>
    <includes refid="mathutil_8hxx" local="yes">mathutil.hxx</includes>
    <includes refid="matrix_8hxx" local="yes">matrix.hxx</includes>
    <includes refid="linear__solve_8hxx" local="yes">linear_solve.hxx</includes>
    <includes refid="numerictraits_8hxx" local="yes">numerictraits.hxx</includes>
    <includes refid="array__vector_8hxx" local="yes">array_vector.hxx</includes>
    <incdepgraph>
      <node id="6376">
        <label>multi_pointoperators.hxx</label>
        <link refid="multi__pointoperators_8hxx_source"/>
        <childnode refid="6372" relation="include">
        </childnode>
        <childnode refid="6377" relation="include">
        </childnode>
        <childnode refid="6378" relation="include">
        </childnode>
        <childnode refid="6381" relation="include">
        </childnode>
        <childnode refid="6379" relation="include">
        </childnode>
        <childnode refid="6357" relation="include">
        </childnode>
        <childnode refid="6344" relation="include">
        </childnode>
        <childnode refid="6351" relation="include">
        </childnode>
      </node>
      <node id="6356">
        <label>iomanip</label>
      </node>
      <node id="6352">
        <label>functional</label>
      </node>
      <node id="6330">
        <label>limits</label>
      </node>
      <node id="6343">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="6344" relation="include">
        </childnode>
        <childnode refid="6330" relation="include">
        </childnode>
      </node>
      <node id="6353">
        <label>iterator</label>
      </node>
      <node id="6357">
        <label>multi_array.hxx</label>
        <link refid="multi__array_8hxx_source"/>
        <childnode refid="6358" relation="include">
        </childnode>
        <childnode refid="6346" relation="include">
        </childnode>
        <childnode refid="6359" relation="include">
        </childnode>
        <childnode refid="6360" relation="include">
        </childnode>
        <childnode refid="6367" relation="include">
        </childnode>
        <childnode refid="6369" relation="include">
        </childnode>
        <childnode refid="6370" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6374" relation="include">
        </childnode>
        <childnode refid="6344" relation="include">
        </childnode>
        <childnode refid="6331" relation="include">
        </childnode>
      </node>
      <node id="6351">
        <label>inspector_passes.hxx</label>
        <link refid="inspector__passes_8hxx_source"/>
        <childnode refid="6344" relation="include">
        </childnode>
      </node>
      <node id="6349">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="6372">
        <label>initimage.hxx</label>
        <link refid="initimage_8hxx_source"/>
        <childnode refid="6371" relation="include">
        </childnode>
        <childnode refid="6364" relation="include">
        </childnode>
        <childnode refid="6373" relation="include">
        </childnode>
      </node>
      <node id="6329">
        <label>vigra/quadprog.hxx</label>
        <link refid="quadprog.hxx"/>
        <childnode refid="6330" relation="include">
        </childnode>
        <childnode refid="6331" relation="include">
        </childnode>
        <childnode refid="6354" relation="include">
        </childnode>
        <childnode refid="6382" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6385" relation="include">
        </childnode>
      </node>
      <node id="6350">
        <label>algorithm.hxx</label>
        <link refid="algorithm_8hxx_source"/>
        <childnode refid="6343" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6351" relation="include">
        </childnode>
        <childnode refid="6346" relation="include">
        </childnode>
        <childnode refid="6352" relation="include">
        </childnode>
        <childnode refid="6353" relation="include">
        </childnode>
      </node>
      <node id="6332">
        <label>cmath</label>
      </node>
      <node id="6337">
        <label>stdexcept</label>
      </node>
      <node id="6373">
        <label>functortraits.hxx</label>
        <link refid="functortraits_8hxx_source"/>
        <childnode refid="6352" relation="include">
        </childnode>
        <childnode refid="6344" relation="include">
        </childnode>
      </node>
      <node id="6363">
        <label>iteratortags.hxx</label>
        <link refid="iteratortags_8hxx_source"/>
        <childnode refid="6353" relation="include">
        </childnode>
      </node>
      <node id="6340">
        <label>string</label>
      </node>
      <node id="6377">
        <label>copyimage.hxx</label>
        <link refid="copyimage_8hxx_source"/>
        <childnode refid="6371" relation="include">
        </childnode>
      </node>
      <node id="6369">
        <label>basicimageview.hxx</label>
        <link refid="basicimageview_8hxx_source"/>
        <childnode refid="6370" relation="include">
        </childnode>
        <childnode refid="6372" relation="include">
        </childnode>
      </node>
      <node id="6364">
        <label>iteratortraits.hxx</label>
        <link refid="iteratortraits_8hxx_source"/>
        <childnode refid="6359" relation="include">
        </childnode>
        <childnode refid="6365" relation="include">
        </childnode>
      </node>
      <node id="6382">
        <label>linear_solve.hxx</label>
        <link refid="linear__solve_8hxx_source"/>
        <childnode refid="6383" relation="include">
        </childnode>
        <childnode refid="6340" relation="include">
        </childnode>
        <childnode refid="6331" relation="include">
        </childnode>
        <childnode refid="6354" relation="include">
        </childnode>
        <childnode refid="6384" relation="include">
        </childnode>
      </node>
      <node id="6348">
        <label>cfloat</label>
      </node>
      <node id="6384">
        <label>singular_value_decomposition.hxx</label>
        <link refid="singular__value__decomposition_8hxx_source"/>
        <childnode refid="6354" relation="include">
        </childnode>
        <childnode refid="6385" relation="include">
        </childnode>
      </node>
      <node id="6371">
        <label>utilities.hxx</label>
        <link refid="utilities_8hxx_source"/>
        <childnode refid="6335" relation="include">
        </childnode>
        <childnode refid="6338" relation="include">
        </childnode>
        <childnode refid="6344" relation="include">
        </childnode>
        <childnode refid="6341" relation="include">
        </childnode>
        <childnode refid="6362" relation="include">
        </childnode>
        <childnode refid="6331" relation="include">
        </childnode>
        <childnode refid="6340" relation="include">
        </childnode>
        <childnode refid="6339" relation="include">
        </childnode>
      </node>
      <node id="6336">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="6378">
        <label>transformimage.hxx</label>
        <link refid="transformimage_8hxx_source"/>
        <childnode refid="6371" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6364" relation="include">
        </childnode>
        <childnode refid="6367" relation="include">
        </childnode>
        <childnode refid="6373" relation="include">
        </childnode>
        <childnode refid="6379" relation="include">
        </childnode>
      </node>
      <node id="6341">
        <label>tuple.hxx</label>
        <link refid="tuple_8hxx_source"/>
        <childnode refid="6342" relation="include">
        </childnode>
      </node>
      <node id="6360">
        <label>tinyvector.hxx</label>
        <link refid="tinyvector_8hxx_source"/>
        <childnode refid="6332" relation="include">
        </childnode>
        <childnode refid="6333" relation="include">
        </childnode>
        <childnode refid="6355" relation="include">
        </childnode>
        <childnode refid="6346" relation="include">
        </childnode>
        <childnode refid="6335" relation="include">
        </childnode>
        <childnode refid="6338" relation="include">
        </childnode>
        <childnode refid="6344" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6361" relation="include">
        </childnode>
        <childnode refid="6331" relation="include">
        </childnode>
        <childnode refid="6362" relation="include">
        </childnode>
      </node>
      <node id="6375">
        <label>sys/types.h</label>
      </node>
      <node id="6379">
        <label>inspectimage.hxx</label>
        <link refid="inspectimage_8hxx_source"/>
        <childnode refid="6380" relation="include">
        </childnode>
        <childnode refid="6346" relation="include">
        </childnode>
        <childnode refid="6371" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6364" relation="include">
        </childnode>
        <childnode refid="6373" relation="include">
        </childnode>
        <childnode refid="6367" relation="include">
        </childnode>
        <childnode refid="6351" relation="include">
        </childnode>
      </node>
      <node id="6331">
        <label>mathutil.hxx</label>
        <link refid="mathutil_8hxx_source"/>
        <childnode refid="6332" relation="include">
        </childnode>
        <childnode refid="6333" relation="include">
        </childnode>
        <childnode refid="6334" relation="include">
        </childnode>
        <childnode refid="6335" relation="include">
        </childnode>
        <childnode refid="6338" relation="include">
        </childnode>
        <childnode refid="6341" relation="include">
        </childnode>
        <childnode refid="6343" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6350" relation="include">
        </childnode>
      </node>
      <node id="6335">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="6336" relation="include">
        </childnode>
        <childnode refid="6337" relation="include">
        </childnode>
      </node>
      <node id="6347">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="6345" relation="include">
        </childnode>
        <childnode refid="6330" relation="include">
        </childnode>
        <childnode refid="6348" relation="include">
        </childnode>
        <childnode refid="6334" relation="include">
        </childnode>
        <childnode refid="6344" relation="include">
        </childnode>
        <childnode refid="6343" relation="include">
        </childnode>
        <childnode refid="6349" relation="include">
        </childnode>
      </node>
      <node id="6380">
        <label>vector</label>
      </node>
      <node id="6370">
        <label>imageiterator.hxx</label>
        <link refid="imageiterator_8hxx_source"/>
        <childnode refid="6371" relation="include">
        </childnode>
        <childnode refid="6359" relation="include">
        </childnode>
        <childnode refid="6364" relation="include">
        </childnode>
        <childnode refid="6344" relation="include">
        </childnode>
      </node>
      <node id="6366">
        <label>iteratoradapter.hxx</label>
        <link refid="iteratoradapter_8hxx_source"/>
      </node>
      <node id="6365">
        <label>imageiteratoradapter.hxx</label>
        <link refid="imageiteratoradapter_8hxx_source"/>
        <childnode refid="6353" relation="include">
        </childnode>
      </node>
      <node id="6342">
        <label>utility</label>
      </node>
      <node id="6339">
        <label>sstream</label>
      </node>
      <node id="6367">
        <label>rgbvalue.hxx</label>
        <link refid="rgbvalue_8hxx_source"/>
        <childnode refid="6332" relation="include">
        </childnode>
        <childnode refid="6333" relation="include">
        </childnode>
        <childnode refid="6335" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6359" relation="include">
        </childnode>
        <childnode refid="6360" relation="include">
        </childnode>
        <childnode refid="6368" relation="include">
        </childnode>
      </node>
      <node id="6362">
        <label>diff2d.hxx</label>
        <link refid="diff2d_8hxx_source"/>
        <childnode refid="6332" relation="include">
        </childnode>
        <childnode refid="6355" relation="include">
        </childnode>
        <childnode refid="6335" relation="include">
        </childnode>
        <childnode refid="6363" relation="include">
        </childnode>
        <childnode refid="6364" relation="include">
        </childnode>
        <childnode refid="6366" relation="include">
        </childnode>
        <childnode refid="6341" relation="include">
        </childnode>
      </node>
      <node id="6338">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="6337" relation="include">
        </childnode>
        <childnode refid="6339" relation="include">
        </childnode>
        <childnode refid="6340" relation="include">
        </childnode>
        <childnode refid="6335" relation="include">
        </childnode>
      </node>
      <node id="6368">
        <label>static_assert.hxx</label>
        <link refid="static__assert_8hxx_source"/>
      </node>
      <node id="6385">
        <label>array_vector.hxx</label>
        <link refid="array__vector_8hxx_source"/>
        <childnode refid="6338" relation="include">
        </childnode>
        <childnode refid="6361" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6358" relation="include">
        </childnode>
        <childnode refid="6346" relation="include">
        </childnode>
        <childnode refid="6355" relation="include">
        </childnode>
      </node>
      <node id="6355">
        <label>iosfwd</label>
      </node>
      <node id="6333">
        <label>cstdlib</label>
      </node>
      <node id="6374">
        <label>multi_iterator.hxx</label>
        <link refid="multi__iterator_8hxx_source"/>
        <childnode refid="6375" relation="include">
        </childnode>
        <childnode refid="6360" relation="include">
        </childnode>
        <childnode refid="6363" relation="include">
        </childnode>
      </node>
      <node id="6383">
        <label>ctype.h</label>
      </node>
      <node id="6345">
        <label>climits</label>
      </node>
      <node id="6344">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="6335" relation="include">
        </childnode>
        <childnode refid="6345" relation="include">
        </childnode>
        <childnode refid="6330" relation="include">
        </childnode>
        <childnode refid="6346" relation="include">
        </childnode>
      </node>
      <node id="6381">
        <label>combineimages.hxx</label>
        <link refid="combineimages_8hxx_source"/>
        <childnode refid="6371" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6373" relation="include">
        </childnode>
        <childnode refid="6332" relation="include">
        </childnode>
      </node>
      <node id="6334">
        <label>complex</label>
      </node>
      <node id="6354">
        <label>matrix.hxx</label>
        <link refid="matrix_8hxx_source"/>
        <childnode refid="6332" relation="include">
        </childnode>
        <childnode refid="6355" relation="include">
        </childnode>
        <childnode refid="6356" relation="include">
        </childnode>
        <childnode refid="6357" relation="include">
        </childnode>
        <childnode refid="6331" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6376" relation="include">
        </childnode>
      </node>
      <node id="6346">
        <label>algorithm</label>
      </node>
      <node id="6361">
        <label>memory.hxx</label>
        <link refid="memory_8hxx_source"/>
        <childnode refid="6344" relation="include">
        </childnode>
      </node>
      <node id="6359">
        <label>accessor.hxx</label>
        <link refid="accessor_8hxx_source"/>
        <childnode refid="6344" relation="include">
        </childnode>
        <childnode refid="6347" relation="include">
        </childnode>
        <childnode refid="6341" relation="include">
        </childnode>
      </node>
      <node id="6358">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2008<sp/>by<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>activeSet<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_QUADPROG_HXX</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_QUADPROG_HXX</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mathutil.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;matrix.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;linear_solve.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;numerictraits.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;array_vector.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>quadprogAddConstraint(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;<sp/>R,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>J,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C3&gt;<sp/>&amp;<sp/>d,<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>activeConstraintCount,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>R_norm)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;2&gt;::type<sp/>Shape;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(J);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>linalg::detail::qrGivensStepImpl(0,<sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(d,<sp/>activeConstraintCount,<sp/>n),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J.subarray(Shape(activeConstraintCount,0),<sp/>Shape(n,n)));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__FFTWComplexOperators_1ga6f4ef274842b6153923f02a6cd264576" kindref="member" tooltip="absolute value (= magnitude)">abs</ref>(d(activeConstraintCount,0))<sp/>&lt;=<sp/>NumericTraits&lt;T&gt;::epsilon()<sp/>*<sp/>R_norm)<sp/></highlight><highlight class="comment">//<sp/>problem<sp/>degenerate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>R_norm<sp/>=<sp/>std::max&lt;T&gt;(R_norm,<sp/><ref refid="group__FFTWComplexOperators_1ga6f4ef274842b6153923f02a6cd264576" kindref="member" tooltip="absolute value (= magnitude)">abs</ref>(d(activeConstraintCount,0)));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>++activeConstraintCount;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>d<sp/>as<sp/>a<sp/>new<sp/>column<sp/>to<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(R,<sp/>Shape(0,<sp/>activeConstraintCount<sp/>-<sp/>1),<sp/>activeConstraintCount)<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(d,<sp/>0,<sp/>activeConstraintCount);<sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3&gt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>quadprogDeleteConstraint(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>&amp;<sp/>R,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>&amp;<sp/>J,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C3&gt;<sp/>&amp;<sp/>u,<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>activeConstraintCount,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>constraintToBeRemoved)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;2&gt;::type<sp/>Shape;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newActiveConstraintCount<sp/>=<sp/>activeConstraintCount<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(constraintToBeRemoved<sp/>==<sp/>newActiveConstraintCount)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(u(constraintToBeRemoved,0),<sp/>u(newActiveConstraintCount,0));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(R,<sp/>constraintToBeRemoved).swapData(<ref refid="group__LinearAlgebraFunctions_1gab8ee32ac1c1c77108435f22be5cb08a0" kindref="member">columnVector</ref>(R,<sp/>newActiveConstraintCount));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>linalg::detail::qrGivensStepImpl(0,<sp/>R.subarray(Shape(constraintToBeRemoved,<sp/>constraintToBeRemoved),<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape(newActiveConstraintCount,newActiveConstraintCount)),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J.subarray(Shape(constraintToBeRemoved,<sp/>0),<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape(newActiveConstraintCount,newActiveConstraintCount)));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">/**<sp/>\addtogroup<sp/>Optimization<sp/>Optimization<sp/>and<sp/>Regression</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">//@{</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/>/**<sp/>Solve<sp/>Quadratic<sp/>Programming<sp/>Problem.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>quadraticProgramming()<sp/>function<sp/>implements<sp/>the<sp/>algorithm<sp/>described<sp/>in</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>D.<sp/>Goldfarb,<sp/>A.<sp/>Idnani:<sp/>&lt;i&gt;&quot;A<sp/>numerically<sp/>stable<sp/>dual<sp/>method<sp/>for<sp/>solving</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strictly<sp/>convex<sp/>quadratic<sp/>programs&quot;&lt;/i&gt;,<sp/>Mathematical<sp/>Programming<sp/>27:1-33,<sp/>1983.<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>for<sp/>the<sp/>solution<sp/>of<sp/>(convex)<sp/>quadratic<sp/>programming<sp/>problems<sp/>by<sp/>means<sp/>of<sp/>a<sp/>primal-dual<sp/>method.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/quadprog.hxx\&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Namespaces:<sp/>vigra</highlight></codeline>
<codeline lineno="103"><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;Declaration:&lt;/b&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>namespace<sp/>vigra<sp/>{<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T,<sp/>class<sp/>C1,<sp/>class<sp/>C2,<sp/>class<sp/>C3,<sp/>class<sp/>C4,<sp/>class<sp/>C5,<sp/>class<sp/>C6,<sp/>class<sp/>C7&gt;</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quadraticProgramming(MultiArrayView&lt;2,<sp/>T,<sp/>C1&gt;<sp/>const<sp/>&amp;<sp/>GG,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C2&gt;<sp/>const<sp/>&amp;<sp/>g,<sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C3&gt;<sp/>const<sp/>&amp;<sp/>CE,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C4&gt;<sp/>const<sp/>&amp;<sp/>ce,<sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C5&gt;<sp/>const<sp/>&amp;<sp/>CI,<sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C6&gt;<sp/>const<sp/>&amp;<sp/>ci,<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiArrayView&lt;2,<sp/>T,<sp/>C7&gt;<sp/>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>problem<sp/>must<sp/>be<sp/>specified<sp/>in<sp/>the<sp/>form:</highlight></codeline>
<codeline lineno="118"><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>\f{eqnarray*}</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\mbox{minimize<sp/>}<sp/>&amp;\,&amp;<sp/>\frac{1}{2}<sp/>\mbox{\bf<sp/>x}&apos;\,\mbox{\bf<sp/>G}\,<sp/>\mbox{\bf<sp/>x}<sp/>+<sp/>\mbox{\bf<sp/>g}&apos;\,\mbox{\bf<sp/>x}<sp/>\\</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\mbox{subject<sp/>to}<sp/>&amp;\,&amp;<sp/>\mbox{\bf<sp/>C}_E\,<sp/>\mbox{\bf<sp/>x}<sp/>=<sp/>\mbox{\bf<sp/>c}_e<sp/>\\</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;\,&amp;<sp/>\mbox{\bf<sp/>C}_I\,\mbox{\bf<sp/>x}<sp/>\ge<sp/>\mbox{\bf<sp/>c}_i</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>\f}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Matrix<sp/>&lt;b&gt;G&lt;/b&gt;<sp/>G<sp/>must<sp/>be<sp/>symmetric<sp/>positive<sp/>definite,<sp/>and<sp/>matrix<sp/>&lt;b&gt;C&lt;/b&gt;&lt;sub&gt;E&lt;/sub&gt;<sp/>must<sp/>have<sp/>full<sp/>row<sp/>rank.<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Matrix<sp/>and<sp/>vector<sp/>dimensions<sp/>must<sp/>be<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;ul&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>&lt;b&gt;G&lt;/b&gt;:<sp/>[n<sp/>*<sp/>n],<sp/>&lt;b&gt;g&lt;/b&gt;:<sp/>[n<sp/>*<sp/>1]</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>&lt;b&gt;C&lt;/b&gt;&lt;sub&gt;E&lt;/sub&gt;:<sp/>[me<sp/>*<sp/>n],<sp/>&lt;b&gt;c&lt;/b&gt;&lt;sub&gt;e&lt;/sub&gt;:<sp/>[me<sp/>*<sp/>1]</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>&lt;b&gt;C&lt;/b&gt;&lt;sub&gt;I&lt;/sub&gt;:<sp/>[mi<sp/>*<sp/>n],<sp/>&lt;b&gt;c&lt;/b&gt;&lt;sub&gt;i&lt;/sub&gt;:<sp/>[mi<sp/>*<sp/>1]</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;li&gt;<sp/>&lt;b&gt;x&lt;/b&gt;:<sp/>[n<sp/>*<sp/>1]</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;/ul&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>function<sp/>writes<sp/>the<sp/>optimal<sp/>solution<sp/>into<sp/>the<sp/>vector<sp/>\a<sp/>x<sp/>and<sp/>returns<sp/>the<sp/>cost<sp/>of<sp/>this<sp/>solution.<sp/></highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>problem<sp/>is<sp/>infeasible,<sp/>std::numeric_limits::infinity()<sp/>is<sp/>returned.<sp/>In<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>value<sp/>of<sp/>vector<sp/>\a<sp/>x<sp/>is<sp/>undefined.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&lt;b&gt;Usage:&lt;/b&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Minimize<sp/>&lt;tt&gt;<sp/>f<sp/>=<sp/>0.5<sp/>*<sp/>x&apos;*G*x<sp/>+<sp/>g&apos;*x<sp/>&lt;/tt&gt;<sp/>subject<sp/>to<sp/>&lt;tt&gt;<sp/>-1<sp/>&amp;lt;=<sp/>x<sp/>&amp;lt;=<sp/>1&lt;/tt&gt;.<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>solution<sp/>is<sp/>&lt;tt&gt;<sp/>x&apos;<sp/>=<sp/>[1.0,<sp/>0.5,<sp/>-1.0]<sp/>&lt;/tt&gt;<sp/>with<sp/>&lt;tt&gt;<sp/>f<sp/>=<sp/>-22.625&lt;/tt&gt;.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>Gdata[]<sp/>=<sp/>{13.0,<sp/>12.0,<sp/>-2.0,</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>12.0,<sp/>17.0,<sp/><sp/>6.0,</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2.0,<sp/><sp/>6.0,<sp/>12.0};</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gdata[]<sp/>=<sp/>{-22.0,<sp/>-14.5,<sp/>13.0};</highlight></codeline>
<codeline lineno="147"><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>CIdata[]<sp/>=<sp/>{<sp/>1.0,<sp/><sp/>0.0,<sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/>1.0,<sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/>0.0,<sp/><sp/>1.0,</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.0,<sp/><sp/>0.0,<sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-1.0,<sp/><sp/>0.0,</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/><sp/>0.0,<sp/>-1.0};</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>cidata[]<sp/>=<sp/>{-1.0,<sp/>-1.0,<sp/>-1.0,<sp/>-1.0,<sp/>-1.0,<sp/>-1.0};</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;double&gt;<sp/>G(3,3,<sp/>Gdata),<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g(3,1,<sp/>gdata),<sp/></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>empty<sp/>since<sp/>there<sp/>are<sp/>no<sp/>equality<sp/>constraints</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ce,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>likewise</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CI(7,3,<sp/>CIdata),<sp/></highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ci(7,1,<sp/>cidata),<sp/></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x(3,1);</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>f<sp/>=<sp/>quadraticProgramming(G,<sp/>g,<sp/>CE,<sp/>ce,<sp/>CI,<sp/>ci,<sp/>x);</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C3,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C4,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C5,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C6,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C7&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">T<sp/></highlight></codeline>
<codeline lineno="170" refid="group__Optimization_1ga60bf3f23776bd500a5009b2a25442860" refkind="member"><highlight class="normal"><ref refid="group__Optimization_1ga60bf3f23776bd500a5009b2a25442860" kindref="member">quadraticProgramming</ref>(<ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C1&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>G,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound">MultiArrayView&lt;2, T, C2&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>g,<sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>CE,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C4&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>ce,<sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C5&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>CI,<sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C6&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>ci,<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C7&gt;</ref><sp/>&amp;<sp/>x)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">linalg;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1TinyVector" kindref="compound" tooltip="Class for fixed size vectors.This class contains an array of size SIZE of the specified VALUETYPE...">MultiArrayShape&lt;2&gt;::type</ref><sp/>Shape;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/><sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(g),</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>me<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(ce),</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mi<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(ci),</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintCount<sp/>=<sp/>me<sp/>+<sp/>mi;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(G)<sp/>==<sp/>n<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(G)<sp/>==<sp/>n,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quadraticProgramming():<sp/>Matrix<sp/>shape<sp/>mismatch<sp/>between<sp/>G<sp/>and<sp/>g.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition(<ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(x)<sp/>==<sp/>n,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quadraticProgramming():<sp/>Output<sp/>vector<sp/>x<sp/>has<sp/>illegal<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition((me<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(CE)<sp/>==<sp/>n<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(CE)<sp/>==<sp/>me)<sp/>||<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(me<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(CE)<sp/>==<sp/>0),</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quadraticProgramming():<sp/>Matrix<sp/>CE<sp/>has<sp/>illegal<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>vigra_precondition((mi<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(CI)<sp/>==<sp/>n<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1gaa88b5c1277c72b4d4e2b70c278efbffe" kindref="member">rowCount</ref>(CI)<sp/>==<sp/>mi)<sp/>||<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mi<sp/>==<sp/>0<sp/>&amp;&amp;<sp/><ref refid="group__LinearAlgebraFunctions_1ga40eab6d0fc1e179c173a3b90c9d991be" kindref="member">columnCount</ref>(CI)<sp/>==<sp/>0),</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quadraticProgramming():<sp/>Matrix<sp/>CI<sp/>has<sp/>illegal<sp/>shape.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>J<sp/>=<sp/>identityMatrix&lt;T&gt;(n);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>L(G.<ref refid="classvigra_1_1MultiArrayView_1a53c8f0d5c70f10f31fbc246cbe524e32" kindref="member">shape</ref>());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1gadeaf1b2866e989c2612712b86236196e" kindref="member">choleskyDecomposition</ref>(G,<sp/>L);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>unconstrained<sp/>minimizer<sp/>of<sp/>the<sp/>quadratic<sp/>form<sp/><sp/>0.5<sp/>*<sp/>x<sp/>G<sp/>x<sp/>+<sp/>g&apos;<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga134cdba4837625a7d004a67cd5907058" kindref="member">choleskySolve</ref>(L,<sp/>-g,<sp/>x);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>factorized<sp/>matrix<sp/>G^-1,<sp/>this<sp/>is<sp/>the<sp/>initial<sp/>value<sp/>for<sp/>J</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga0a8f25a903663b7428cf0ba01b44b7e5" kindref="member">linearSolveLowerTriangular</ref>(L,<sp/>J,<sp/>J);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>solution<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>f_value<sp/>=<sp/>0.5<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(g,<sp/>x);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>epsilonZ<sp/><sp/><sp/>=<sp/>NumericTraits&lt;T&gt;::epsilon()<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(J.norm(0)),</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::numeric_limits&lt;T&gt;::infinity();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>R(n,<sp/>n),<sp/>r(constraintCount,<sp/>1),<sp/>u(constraintCount,1);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>R_norm<sp/>=<sp/>NumericTraits&lt;T&gt;::one();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>incorporate<sp/>equality<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>me;<sp/>++i)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C3&gt;</ref><sp/>np<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(CE,<sp/>i);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>d<sp/>=<sp/>J*<ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(np);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>z<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(J).subarray(Shape(0,<sp/>i),<sp/>Shape(n,n))*<ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(d,<sp/>i,<sp/>n);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(R.subarray(Shape(0,<sp/>0),<sp/>Shape(i,i)),<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(d,<sp/>0,<sp/>i),<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(r,<sp/>0,<sp/>i));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>step<sp/>in<sp/>primal<sp/>space<sp/>so<sp/>that<sp/>the<sp/>constraint<sp/>becomes<sp/>satisfied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>step<sp/>=<sp/>(<ref refid="group__LinearAlgebraFunctions_1gacb4fbe2464f536923f80991e7d7b9f16" kindref="member">squaredNorm</ref>(z)<sp/>&lt;=<sp/>epsilonZ)<sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>z<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>0.0<sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(-<ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(np,<sp/>x)<sp/>+<sp/>ce(i,0))<sp/>/<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(z,<sp/>np);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>step<sp/>*<sp/>z;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u(i,0)<sp/>=<sp/>step;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(u,<sp/>0,<sp/>i)<sp/>-=<sp/>step<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(r,<sp/>0,<sp/>i);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_value<sp/>+=<sp/>0.5<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(step)<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(z,<sp/>np);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra_precondition(vigra::detail::quadprogAddConstraint(R,<sp/>J,<sp/>d,<sp/>i,<sp/>R_norm),</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;quadraticProgramming():<sp/>Equality<sp/>constraints<sp/>are<sp/>linearly<sp/>dependent.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>activeConstraintCount<sp/>=<sp/>me;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>optimum<sp/>solution<sp/>and<sp/>corresponding<sp/>active<sp/>inequality<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1ArrayVector" kindref="compound">ArrayVector&lt;int&gt;</ref><sp/>activeSet(mi);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mi;<sp/>++i)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>activeSet[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>constraintToBeAdded<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ss<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>activeConstraintCount-me;<sp/>i<sp/>&lt;<sp/>mi;<sp/>++i)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>s<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(<ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(CI,<sp/>activeSet[i]),<sp/>x)<sp/>-<sp/>ci(activeSet[i],<sp/>0);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>ss)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintToBeAdded<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0,<sp/>maxIter<sp/>=<sp/>10*mi;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(iter++<sp/>&lt;<sp/>maxIter)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ss<sp/>&gt;=<sp/>0.0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>constraints<sp/>are<sp/>satisfied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_value;<sp/><sp/></highlight><highlight class="comment">//<sp/>=&gt;<sp/>solved!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>step<sp/>direction<sp/>in<sp/>the<sp/>primal<sp/>space<sp/>(through<sp/>J,<sp/>see<sp/>the<sp/>paper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1MultiArrayView" kindref="compound" tooltip="Base class for, and view to, vigra::MultiArray.">MultiArrayView&lt;2, T, C5&gt;</ref><sp/>np<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(CI,<sp/>activeSet[constraintToBeAdded]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>d<sp/>=<sp/>J*<ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(np);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix&lt;T&gt;<sp/>z<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga38a88300083908488d85348c0cf4d3ff" kindref="member">transpose</ref>(J).subarray(Shape(0,<sp/>activeConstraintCount),<sp/>Shape(n,n))*<ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(d,<sp/>activeConstraintCount,<sp/>n);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>negative<sp/>of<sp/>the<sp/>step<sp/>direction<sp/>in<sp/>the<sp/>dual<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MatrixAlgebra_1ga7661f6e132de307660799727834ac25b" kindref="member">linearSolveUpperTriangular</ref>(R.subarray(Shape(0,<sp/>0),<sp/>Shape(activeConstraintCount,activeConstraintCount)),<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(d,<sp/>0,<sp/>activeConstraintCount),<sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(r,<sp/>0,<sp/>activeConstraintCount));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>minimum<sp/>step<sp/>length<sp/>in<sp/>primal<sp/>space<sp/>such<sp/>that<sp/>activeSet[constraintToBeAdded]<sp/>becomes<sp/>feasible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>primalStep<sp/>=<sp/>(<ref refid="group__LinearAlgebraFunctions_1gacb4fbe2464f536923f80991e7d7b9f16" kindref="member">squaredNorm</ref>(z)<sp/>&lt;=<sp/>epsilonZ)<sp/></highlight><highlight class="comment">//<sp/>i.e.<sp/>z<sp/>==<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>inf</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>-ss<sp/>/<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(z,<sp/>np);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>determine<sp/>maximum<sp/>step<sp/>length<sp/>in<sp/>dual<sp/>space<sp/>that<sp/>doesn&apos;t<sp/>violate<sp/>dual<sp/>feasibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>corresponding<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>dualStep<sp/>=<sp/>inf;<sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>constraintToBeRemoved<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>me;<sp/>k<sp/>&lt;<sp/>activeConstraintCount;<sp/>++k)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r(k,0)<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u(k,0)<sp/>/<sp/>r(k,0)<sp/>&lt;<sp/>dualStep)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dualStep<sp/>=<sp/>u(k,0)<sp/>/<sp/>r(k,0);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintToBeRemoved<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>step<sp/>is<sp/>chosen<sp/>as<sp/>the<sp/>minimum<sp/>of<sp/>dualStep<sp/>and<sp/>primalStep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>step<sp/>=<sp/><ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">std::min</ref>(dualStep,<sp/>primalStep);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>take<sp/>step<sp/>and<sp/>update<sp/>matrices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(step<sp/>==<sp/>inf)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>(i):<sp/>no<sp/>step<sp/>in<sp/>primal<sp/>or<sp/>dual<sp/>space<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf;<sp/></highlight><highlight class="comment">//<sp/>QPP<sp/>is<sp/>infeasible<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(primalStep<sp/>==<sp/>inf)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>(ii):<sp/>step<sp/>in<sp/>dual<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(u,<sp/>0,<sp/>activeConstraintCount)<sp/>-=<sp/>step<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(r,<sp/>0,<sp/>activeConstraintCount);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra::detail::quadprogDeleteConstraint(R,<sp/>J,<sp/>u,<sp/>activeConstraintCount,<sp/>constraintToBeRemoved);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--activeConstraintCount;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(activeSet[constraintToBeRemoved-me],<sp/>activeSet[activeConstraintCount-me]);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>case<sp/>(iii):<sp/>step<sp/>in<sp/>primal<sp/>and<sp/>dual<sp/>space<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>step<sp/>*<sp/>z;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>the<sp/>solution<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_value<sp/>+=<sp/>0.5<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1ga9ab478f0a88c5174f28260163a1a6de9" kindref="member">sq</ref>(step)<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(z,<sp/>np);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>u<sp/>=<sp/>[u<sp/>1]&apos;<sp/>+<sp/>step<sp/>*<sp/>[-r<sp/>1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(u,<sp/>0,<sp/>activeConstraintCount)<sp/>-=<sp/>step<sp/>*<sp/><ref refid="group__LinearAlgebraFunctions_1gaa4ee090cbf619896f83d3d187a989da8" kindref="member">subVector</ref>(r,<sp/>0,<sp/>activeConstraintCount);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u(activeConstraintCount,0)<sp/>=<sp/>step;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(step<sp/>==<sp/>primalStep)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>constraintToBeAdded<sp/>to<sp/>the<sp/>active<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra::detail::quadprogAddConstraint(R,<sp/>J,<sp/>d,<sp/>activeConstraintCount,<sp/>R_norm);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(activeSet[constraintToBeAdded],<sp/>activeSet[activeConstraintCount-me]);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++activeConstraintCount;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>drop<sp/>constraintToBeRemoved<sp/>from<sp/>the<sp/>active<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra::detail::quadprogDeleteConstraint(R,<sp/>J,<sp/>u,<sp/>activeConstraintCount,<sp/>constraintToBeRemoved);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--activeConstraintCount;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(activeSet[constraintToBeRemoved-me],<sp/>activeSet[activeConstraintCount-me]);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>values<sp/>of<sp/>inactive<sp/>inequality<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>activeConstraintCount-me;<sp/>i<sp/>&lt;<sp/>mi;<sp/>++i)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>CI*x<sp/>-<sp/>ci<sp/>with<sp/>appropriate<sp/>row<sp/>permutation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>s<sp/>=<sp/><ref refid="group__LinearAlgebraFunctions_1ga8b1b82161fd38d3af8983f2545bc3e5d" kindref="member">dot</ref>(<ref refid="group__LinearAlgebraFunctions_1ga8cc5e13ed0643c0d9b8c9021eaae625d" kindref="member">rowVector</ref>(CI,<sp/>activeSet[i]),<sp/>x)<sp/>-<sp/>ci(activeSet[i],<sp/>0);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>ss)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constraintToBeAdded<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inf;<sp/></highlight><highlight class="comment">//<sp/>too<sp/>many<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="350"><highlight class="comment">//@}</highlight></codeline>
<codeline lineno="351"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/quadprog.hxx"/>
  </compounddef>
</doxygen>
