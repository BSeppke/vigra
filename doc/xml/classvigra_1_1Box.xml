<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="classvigra_1_1Box" kind="class" prot="public">
    <compoundname>vigra::Box</compoundname>
    <includes refid="box_8hxx" local="no">vigra/box.hxx</includes>
    <templateparamlist>
      <param>
        <type>class VALUETYPE</type>
      </param>
      <param>
        <type>unsigned int</type>
        <declname>DIMENSION</declname>
        <defname>DIMENSION</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classvigra_1_1Box_1adf764cbdea00d65edcd07bb9953ad2b7" prot="public" static="no">
        <name>@1</name>
        <enumvalue id="classvigra_1_1Box_1adf764cbdea00d65edcd07bb9953ad2b7a33cede6b934046a29e456d31efa91468" prot="public">
          <name>Dimension</name>
          <initializer> DIMENSION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="103" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="typedef" id="classvigra_1_1Box_1ad81add7f462b51d2bedbccd43c12e32a" prot="public" static="no">
        <type>VALUETYPE</type>
        <definition>typedef VALUETYPE value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>STL-compatible definition of coordinate valuetype </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="93" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" prot="public" static="no">
        <type><ref refid="classvigra_1_1TinyVector" kindref="compound">TinyVector</ref>&lt; VALUETYPE, DIMENSION &gt;</type>
        <definition>typedef TinyVector&lt;VALUETYPE, DIMENSION&gt; Vector</definition>
        <argsstring></argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vector type used for <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="101" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classvigra_1_1Box_1ab321b1775abba91d6b2198a7fbd65772" prot="public" static="no">
        <type>NumericTraits&lt; VALUETYPE &gt;::Promote</type>
        <definition>typedef NumericTraits&lt;VALUETYPE&gt;::Promote VolumeType</definition>
        <argsstring></argsstring>
        <name>VolumeType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Promoted coordinate valuetype, used for <ref refid="classvigra_1_1Box_1aefd8c9ee173950456851737d2a403b42" kindref="member">volume()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="97" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classvigra_1_1Box_1a3d5493241c593c33d0d7752519723ae7" prot="protected" static="no">
        <type>If&lt; typename NumericTraits&lt; VALUETYPE &gt;::isIntegral, detail::EndOutsidePolicy&lt; VALUETYPE &gt;, detail::EndInsidePolicy&lt; VALUETYPE &gt; &gt;::type</type>
        <definition>typedef If&lt;typename NumericTraits&lt;VALUETYPE&gt;::isIntegral, detail::EndOutsidePolicy&lt;VALUETYPE&gt;, detail::EndInsidePolicy&lt;VALUETYPE&gt; &gt;::type RangePolicy</definition>
        <argsstring></argsstring>
        <name>RangePolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Range policy (EndInsidePolicy/EndOutsidePolicy, depending on valuetype) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="112" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classvigra_1_1Box_1a9529bd9df9a6730302e7490dc4a61b03" prot="protected" static="no" mutable="no">
        <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref></type>
        <definition>Vector begin_</definition>
        <argsstring></argsstring>
        <name>begin_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="106" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classvigra_1_1Box_1a2b68976b2fae5f9f3c489d790790ddcd" prot="protected" static="no" mutable="no">
        <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref></type>
        <definition>Vector end_</definition>
        <argsstring></argsstring>
        <name>end_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="106" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvigra_1_1Box_1aee571effca1ebf48ab0fcfa28c9d5119" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void addBorder</definition>
        <argsstring>(VALUETYPE borderWidth)</argsstring>
        <name>addBorder</name>
        <param>
          <type>VALUETYPE</type>
          <declname>borderWidth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a border of the given width around the box. That means, <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref>&apos;s components are moved by -borderWidth and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>&apos;s by borderWidth. (If borderWidth is negative, the box will get smaller accordingly.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="261" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="260" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a40d04d5b7a119f977eb4a53752a07a58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void addSize</definition>
        <argsstring>(Vector const &amp;offset)</argsstring>
        <name>addSize</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increase the size of the box by the given offset. This will move <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> only. (If any of offset&apos;s components is negative, the box will get smaller accordingly.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="251" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1ab5ec0747e592aa60fde4d4c4ba393208" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
        <definition>Vector const&amp; begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get begin vector (i.e. smallest coordinates for each dimension). This is the first point (scan-order wise) which is considered to be &quot;in&quot; the box. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="144" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> &amp;</type>
        <definition>Vector&amp; begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access begin vector (i.e. smallest coordinates for each dimension). This is the first point (scan-order wise) which is considered to be &quot;in&quot; the box. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="153" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1adea1928c15ca1eb88b6619bc554911b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Box</definition>
        <argsstring>()</argsstring>
        <name>Box</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct an empty box (<ref refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" kindref="member">isEmpty()</ref> will return true). (Internally, this will initialize all dimensions with the empty range [1..0].) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="121" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1ad7522e67d11a7c0cf3a44f9fe1d3b2a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Box</definition>
        <argsstring>(Vector const &amp;begin, Vector const &amp;end)</argsstring>
        <name>Box</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a box representing the given range. Depending on the value type, <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> is considered to be outside the box (as in the STL, for integer types), or inside (for floating point types). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="130" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a6c657ccf8552821947ad1569a1039bbb" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Box</definition>
        <argsstring>(Vector const &amp;size)</argsstring>
        <name>Box</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a box of given size at the origin (i.e. <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> == <ref refid="classvigra_1_1Box_1a1c84c6eaf4e01d65c070547607cbeb8d" kindref="member">size()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="137" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a585852dcee4352858ae6e704a6a5c21e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool contains</definition>
        <argsstring>(Vector const &amp;p) const </argsstring>
        <name>contains</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this box contains the given point. That is, if the point lies within the range [begin, end] in each dimension (excluding <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> itself for integer valuetypes). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="302" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="301" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a7de8695fa94b9886d54a6cb878af63b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool contains</definition>
        <argsstring>(Box const &amp;r) const </argsstring>
        <name>contains</name>
        <param>
          <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this box contains the given one. <computeroutput>r1.contains(r2)</computeroutput> returns the same as <computeroutput>r1 == (r1|r2)</computeroutput> (but is of course more efficient). That also means, a box (even an empty one!) <ref refid="classvigra_1_1Box_1a585852dcee4352858ae6e704a6a5c21e" kindref="member">contains()</ref> any empty box. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="317" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="316" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1aefbbd52b29086bcae04a0b40178f2885" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
        <definition>Vector const&amp; end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get end vector (i.e. coordinates higher than <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> in each dimension for non-empty boxes). This is <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> + <ref refid="classvigra_1_1Box_1a1c84c6eaf4e01d65c070547607cbeb8d" kindref="member">size()</ref>, and depending on the valuetype (float/int), this is the last point within or the first point outside the box, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="164" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> &amp;</type>
        <definition>Vector&amp; end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access end vector (i.e. coordinates higher than <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> in each dimension for non-empty boxes). This is <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> + <ref refid="classvigra_1_1Box_1a1c84c6eaf4e01d65c070547607cbeb8d" kindref="member">size()</ref>, and depending on the valuetype (float/int), this is the last point within or the first point outside the box, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="175" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a4da74e8f66ac61d3cddc3f5c85060922" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool intersects</definition>
        <argsstring>(Box const &amp;r) const </argsstring>
        <name>intersects</name>
        <param>
          <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this box overlaps with the given one. <computeroutput>r1.intersects(r2)</computeroutput> returns the same as <computeroutput>!(r1&amp;r2).<ref refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" kindref="member">isEmpty()</ref></computeroutput> (but is of course much more efficient). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="334" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="333" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool isEmpty</definition>
        <argsstring>() const </argsstring>
        <name>isEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return whether this box is considered empty. It is non-empty if all <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> coordinates are greater than (or equal, for floating point valuetypes) the corresponding <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> coordinates. Uniting an empty box with something will return the bounding box of the &apos;something&apos;, and intersecting any box with an empty box will again yield an empty box. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="290" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="289" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1ad52cdab7078c100c0bcb821df9a8a89e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void moveBy</definition>
        <argsstring>(Vector const &amp;offset)</argsstring>
        <name>moveBy</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the whole box by the given offset. (Equivalent to operator+=) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="208" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1aa0c926963e1ba5b95c0f7303c5f15f16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void moveTo</definition>
        <argsstring>(Vector const &amp;newBegin)</argsstring>
        <name>moveTo</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>newBegin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move the whole box so that the given point will be <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> afterwards. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="199" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1afd00a79053e41a9f0a339e3cfd9174b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(Box const &amp;r) const </argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>inequality check </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="277" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1aea0abdf03177a7e2fa535c9e14b12196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box operator&amp;</definition>
        <argsstring>(Box const &amp;r) const </argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intersects this box with the given one. The result will be the maximal box contained in both original ones. Intersecting with an empty box will yield again an empty box. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="442" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="441" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1afa276aeac622f442089a1a763d8f1c23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>Box&amp; operator&amp;=</definition>
        <argsstring>(Box const &amp;r)</argsstring>
        <name>operator&amp;=</name>
        <param>
          <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this box by intersecting it with the given one. The result will be the maximal box contained in both original ones. Intersecting with an empty box will yield again an empty box. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="420" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="419" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a504f20ec4520e48eeb88677ba543f724" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box operator*</definition>
        <argsstring>(double scale)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return box scaled by given factor. The same scalar multiplication will be performed on both <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="465" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="464" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1ac252bdaec833df08dcffe2c0ad8abb57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>Box&amp; operator*=</definition>
        <argsstring>(double scale)</argsstring>
        <name>operator*=</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scale box by scalar multiply-assignment. The same scalar multiply-assignment operation will be performed on both <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="454" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="453" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a2e1cf44e9cc352a1d0569d599fcd3959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box operator+</definition>
        <argsstring>(const Vector &amp;offset)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Translate box by vector addition. The same vector addition operation will be performed on both <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="511" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="510" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1ab5fb79d7ed93aa59f5407e8c589d4110" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>Box&amp; operator+=</definition>
        <argsstring>(const Vector &amp;offset)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Translate box by vector addition-assignment. The same vector addition-assignment operation will be performed on both <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="500" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="499" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a4188aaf5ec750c8b162ae44f55432d6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box operator-</definition>
        <argsstring>(const Vector &amp;offset)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Translate box by vector subtract. The same vector subtract operation will be performed on both <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="534" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="533" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a354eb46e82c15f11f84c3385d08bf203" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>Box&amp; operator-=</definition>
        <argsstring>(const Vector &amp;offset)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Translate box by vector subtract-assignment. The same vector subtract-assignment operation will be performed on both <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="523" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="522" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a3c3238626521c8ae7d75d3ff32dc3698" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box operator/</definition>
        <argsstring>(double scale)</argsstring>
        <name>operator/</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return box scaled by inverse of given factor. The same scalar division will be performed on both <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="488" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="487" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1aed9b24303f4c51630eb1c122e26118c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>Box&amp; operator/=</definition>
        <argsstring>(double scale)</argsstring>
        <name>operator/=</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scale box by scalar divide-assignment. The same scalar divide-assignment operation will be performed on both <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> and <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="477" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="476" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a1f6b13f5d8fe121ede8602ed0d5951cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(Box const &amp;r) const </argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>equality check </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="271" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a6b2b5d92bafa9ed4c0aa47d0dc57ee04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box operator|</definition>
        <argsstring>(Vector const &amp;p) const </argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the union of this box and the given point. The result will be the bounding box of the box and the point. If <ref refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" kindref="member">isEmpty()</ref> returns true on the original box, the union will be a box containing only the given point. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="376" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="375" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a4f1c8779fcec2feb6bca2311ca7d0577" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box operator|</definition>
        <argsstring>(Box const &amp;r) const </argsstring>
        <name>operator|</name>
        <param>
          <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the union of this box and the given one. The result will be the bounding box of both boxs. If one of the boxes <ref refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" kindref="member">isEmpty()</ref>, the union will be the other one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="408" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a056e8550c09d2534db6faca78ea923d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>Box&amp; operator|=</definition>
        <argsstring>(Vector const &amp;p)</argsstring>
        <name>operator|=</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this box by including the given point. The result will be the bounding box of the box and the point. If <ref refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" kindref="member">isEmpty()</ref> returns true on the original box, the union will be a box containing only the given point. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="350" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="349" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a0dd90ec98c41cfb700b547598d9da070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>Box&amp; operator|=</definition>
        <argsstring>(Box const &amp;r)</argsstring>
        <name>operator|=</name>
        <param>
          <type><ref refid="classvigra_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this box by uniting it with the given one. The result will be the bounding box of both boxs. If one of the boxes <ref refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" kindref="member">isEmpty()</ref>, the union will be the other one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="387" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="386" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a18602c68427559df02f93556347a21b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setBegin</definition>
        <argsstring>(Vector const &amp;begin)</argsstring>
        <name>setBegin</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>begin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref> without changing <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref>, changing <ref refid="classvigra_1_1Box_1a1c84c6eaf4e01d65c070547607cbeb8d" kindref="member">size()</ref> accordingly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="183" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="182" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1afa3910c284041e0095196aec7f6ea33f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setEnd</definition>
        <argsstring>(Vector const &amp;end)</argsstring>
        <name>setEnd</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> without changing <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref>, which will change the <ref refid="classvigra_1_1Box_1a1c84c6eaf4e01d65c070547607cbeb8d" kindref="member">size()</ref> most probably. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="191" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a1f4aca421455bc43a2caf7418bd99c5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void setSize</definition>
        <argsstring>(Vector const &amp;size)</argsstring>
        <name>setSize</name>
        <param>
          <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref> const &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize this box to the given extents. This will change <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> only. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="241" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1a1c84c6eaf4e01d65c070547607cbeb8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" kindref="member">Vector</ref></type>
        <definition>Vector size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine and return the size of this box. The size might be zero or even negative in one or more dimensions, and if so, <ref refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" kindref="member">isEmpty()</ref> will return true. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="233" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classvigra_1_1Box_1aefd8c9ee173950456851737d2a403b42" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classvigra_1_1Box_1ab321b1775abba91d6b2198a7fbd65772" kindref="member">VolumeType</ref></type>
        <definition>VolumeType volume</definition>
        <argsstring>() const </argsstring>
        <name>volume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine and return the area of this box. That is, if this rect <ref refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" kindref="member">isEmpty()</ref>, returns zero, otherwise returns the product of the extents in each dimension. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="218" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="217" bodyend="226"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represent an n-dimensional box as a (begin, end) pair. Depending on the value type, <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> is considered to be outside the box (as in the STL, for integer types), or inside (for floating point types). <ref refid="classvigra_1_1Box_1a1c84c6eaf4e01d65c070547607cbeb8d" kindref="member">size()</ref> will always be <ref refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" kindref="member">end()</ref> - <ref refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" kindref="member">begin()</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="125">
        <label>TinyVector&lt; VALUETYPE, DIMENSION &gt;</label>
        <link refid="classvigra_1_1TinyVector"/>
        <childnode refid="126" relation="public-inheritance">
        </childnode>
      </node>
      <node id="126">
        <label>TinyVectorBase&lt; VALUETYPE, SIZE, VALUETYPE[SIZE], TinyVector&lt; VALUETYPE, SIZE &gt; &gt;</label>
        <link refid="classvigra_1_1TinyVectorBase"/>
      </node>
      <node id="124">
        <label>Box&lt; VALUETYPE, DIMENSION &gt;</label>
        <link refid="classvigra_1_1Box"/>
        <childnode refid="125" relation="usage">
          <edgelabel>end_</edgelabel>
          <edgelabel>begin_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" line="89" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/box.hxx" bodystart="88" bodyend="539"/>
    <listofallmembers>
      <member refid="classvigra_1_1Box_1aee571effca1ebf48ab0fcfa28c9d5119" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>addBorder</name></member>
      <member refid="classvigra_1_1Box_1a40d04d5b7a119f977eb4a53752a07a58" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>addSize</name></member>
      <member refid="classvigra_1_1Box_1ab5ec0747e592aa60fde4d4c4ba393208" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>begin</name></member>
      <member refid="classvigra_1_1Box_1a9ff7568951abbeeb1ca4497106b77b77" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>begin</name></member>
      <member refid="classvigra_1_1Box_1a9529bd9df9a6730302e7490dc4a61b03" prot="protected" virt="non-virtual"><scope>vigra::Box</scope><name>begin_</name></member>
      <member refid="classvigra_1_1Box_1adea1928c15ca1eb88b6619bc554911b5" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>Box</name></member>
      <member refid="classvigra_1_1Box_1ad7522e67d11a7c0cf3a44f9fe1d3b2a5" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>Box</name></member>
      <member refid="classvigra_1_1Box_1a6c657ccf8552821947ad1569a1039bbb" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>Box</name></member>
      <member refid="classvigra_1_1Box_1a585852dcee4352858ae6e704a6a5c21e" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>contains</name></member>
      <member refid="classvigra_1_1Box_1a7de8695fa94b9886d54a6cb878af63b7" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>contains</name></member>
      <member refid="classvigra_1_1Box_1adf764cbdea00d65edcd07bb9953ad2b7a33cede6b934046a29e456d31efa91468" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>Dimension</name></member>
      <member refid="classvigra_1_1Box_1aefbbd52b29086bcae04a0b40178f2885" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>end</name></member>
      <member refid="classvigra_1_1Box_1a1d60efdd2ef2dc80805ce6fd301e92b4" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>end</name></member>
      <member refid="classvigra_1_1Box_1a2b68976b2fae5f9f3c489d790790ddcd" prot="protected" virt="non-virtual"><scope>vigra::Box</scope><name>end_</name></member>
      <member refid="classvigra_1_1Box_1a4da74e8f66ac61d3cddc3f5c85060922" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>intersects</name></member>
      <member refid="classvigra_1_1Box_1a479432127ee77145cc19d6a2d1590821" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>isEmpty</name></member>
      <member refid="classvigra_1_1Box_1ad52cdab7078c100c0bcb821df9a8a89e" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>moveBy</name></member>
      <member refid="classvigra_1_1Box_1aa0c926963e1ba5b95c0f7303c5f15f16" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>moveTo</name></member>
      <member refid="classvigra_1_1Box_1afd00a79053e41a9f0a339e3cfd9174b9" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator!=</name></member>
      <member refid="classvigra_1_1Box_1aea0abdf03177a7e2fa535c9e14b12196" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator&amp;</name></member>
      <member refid="classvigra_1_1Box_1afa276aeac622f442089a1a763d8f1c23" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator&amp;=</name></member>
      <member refid="classvigra_1_1Box_1a504f20ec4520e48eeb88677ba543f724" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator*</name></member>
      <member refid="classvigra_1_1Box_1ac252bdaec833df08dcffe2c0ad8abb57" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator*=</name></member>
      <member refid="classvigra_1_1Box_1a2e1cf44e9cc352a1d0569d599fcd3959" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator+</name></member>
      <member refid="classvigra_1_1Box_1ab5fb79d7ed93aa59f5407e8c589d4110" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator+=</name></member>
      <member refid="classvigra_1_1Box_1a4188aaf5ec750c8b162ae44f55432d6c" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator-</name></member>
      <member refid="classvigra_1_1Box_1a354eb46e82c15f11f84c3385d08bf203" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator-=</name></member>
      <member refid="classvigra_1_1Box_1a3c3238626521c8ae7d75d3ff32dc3698" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator/</name></member>
      <member refid="classvigra_1_1Box_1aed9b24303f4c51630eb1c122e26118c8" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator/=</name></member>
      <member refid="classvigra_1_1Box_1a1f6b13f5d8fe121ede8602ed0d5951cb" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator==</name></member>
      <member refid="classvigra_1_1Box_1a6b2b5d92bafa9ed4c0aa47d0dc57ee04" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator|</name></member>
      <member refid="classvigra_1_1Box_1a4f1c8779fcec2feb6bca2311ca7d0577" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator|</name></member>
      <member refid="classvigra_1_1Box_1a056e8550c09d2534db6faca78ea923d1" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator|=</name></member>
      <member refid="classvigra_1_1Box_1a0dd90ec98c41cfb700b547598d9da070" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>operator|=</name></member>
      <member refid="classvigra_1_1Box_1a3d5493241c593c33d0d7752519723ae7" prot="protected" virt="non-virtual"><scope>vigra::Box</scope><name>RangePolicy</name></member>
      <member refid="classvigra_1_1Box_1a18602c68427559df02f93556347a21b1" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>setBegin</name></member>
      <member refid="classvigra_1_1Box_1afa3910c284041e0095196aec7f6ea33f" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>setEnd</name></member>
      <member refid="classvigra_1_1Box_1a1f4aca421455bc43a2caf7418bd99c5a" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>setSize</name></member>
      <member refid="classvigra_1_1Box_1a1c84c6eaf4e01d65c070547607cbeb8d" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>size</name></member>
      <member refid="classvigra_1_1Box_1ad81add7f462b51d2bedbccd43c12e32a" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>value_type</name></member>
      <member refid="classvigra_1_1Box_1ad14b2259fe268efc6a1679b6159741f8" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>Vector</name></member>
      <member refid="classvigra_1_1Box_1aefd8c9ee173950456851737d2a403b42" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>volume</name></member>
      <member refid="classvigra_1_1Box_1ab321b1775abba91d6b2198a7fbd65772" prot="public" virt="non-virtual"><scope>vigra::Box</scope><name>VolumeType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
