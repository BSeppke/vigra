<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="group__MultiPointoperators" kind="group">
    <compoundname>MultiPointoperators</compoundname>
    <title>Point operators for multi-dimensional arrays.</title>
    <innerclass refid="structvigra_1_1inspectMultiArray__binder" prot="public">vigra::inspectMultiArray_binder</innerclass>
    <innerclass refid="structvigra_1_1inspectTwoMultiArrays__binder" prot="public">vigra::inspectTwoMultiArrays_binder</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__MultiPointoperators_1ga55f661c630e9ddca7cfd416de4a8cb3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineThreeMultiArrays</definition>
        <argsstring>(...)</argsstring>
        <name>combineThreeMultiArrays</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Combine three multi-dimensional arrays into one using a ternary function or functor. </para>        </briefdescription>
        <detaileddescription>
<para>Except for the fact that it operates on three input arrays, this function is identical to <ref refid="group__MultiPointoperators_1ga14152b4ce55fee06cba896303ef0a539" kindref="member">combineTwoMultiArrays()</ref>.</para><para><bold> Declarations:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga55f661c630e9ddca7cfd416de4a8cb3c" kindref="member" tooltip="Combine three multi-dimensional arrays into one using a ternary function or functor.">combineThreeMultiArrays</ref>(SrcIterator1<sp/>s1,<sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>SrcAccessor1<sp/>src1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcIterator2<sp/>s2,<sp/>SrcAccessor2<sp/>src2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcIterator3<sp/>s3,<sp/>SrcAccessor3<sp/>src3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>d,<sp/>DestAccessor<sp/>dest,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator3,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga55f661c630e9ddca7cfd416de4a8cb3c" kindref="member" tooltip="Combine three multi-dimensional arrays into one using a ternary function or functor.">combineThreeMultiArrays</ref>(triple&lt;SrcIterator1,<sp/>SrcShape,<sp/>SrcAccessor1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;SrcIterator2,<sp/>SrcAccessor2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;SrcIterator3,<sp/>SrcAccessor3&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;DestIterator,<sp/>DestAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dest,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__pointoperators_8hxx_source" kindref="compound">vigra/multi_pointoperators.hxx</ref>&gt;<linebreak/>
 Namespace: vigra</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>plus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src1(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src2(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src3(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::combineThreeMultiArrays(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArrayRange(src1),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArray(src2),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArray(src3),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destMultiArray(dest),<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SomeThreeArgumentFunctor());</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1392"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga8f7bef89641b83325f34ff7d654d689e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class SrcIterator3</type>
          </param>
          <param>
            <type>class SrcAccessor3</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineThreeMultiArrays</definition>
        <argsstring>(SrcIterator1 s1, SrcShape const &amp;shape, SrcAccessor1 src1, SrcIterator2 s2, SrcAccessor2 src2, SrcIterator3 s3, SrcAccessor3 src3, DestIterator d, DestAccessor dest, Functor const &amp;f)</argsstring>
        <name>combineThreeMultiArrays</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>SrcIterator3</type>
          <declname>s3</declname>
        </param>
        <param>
          <type>SrcAccessor3</type>
          <declname>src3</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1404" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1400" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gaeb4f17db13c559b784704d0d4264453e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class SrcIterator3</type>
          </param>
          <param>
            <type>class SrcAccessor3</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineThreeMultiArrays</definition>
        <argsstring>(triple&lt; SrcIterator1, SrcShape, SrcAccessor1 &gt; const &amp;src1, pair&lt; SrcIterator2, SrcAccessor2 &gt; const &amp;src2, pair&lt; SrcIterator3, SrcAccessor3 &gt; const &amp;src3, pair&lt; DestIterator, DestAccessor &gt; const &amp;dest, Functor const &amp;f)</argsstring>
        <name>combineThreeMultiArrays</name>
        <param>
          <type>triple&lt; SrcIterator1, SrcShape, SrcAccessor1 &gt; const &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>pair&lt; SrcIterator2, SrcAccessor2 &gt; const &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>pair&lt; SrcIterator3, SrcAccessor3 &gt; const &amp;</type>
          <declname>src3</declname>
        </param>
        <param>
          <type>pair&lt; DestIterator, DestAccessor &gt; const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1419" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1415" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga0d06367988ffcc66d38265b6d91eed30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class SrcIterator3</type>
          </param>
          <param>
            <type>class SrcAccessor3</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineThreeMultiArraysImpl</definition>
        <argsstring>(SrcIterator1 s1, SrcShape const &amp;shape, SrcAccessor1 src1, SrcIterator2 s2, SrcAccessor2 src2, SrcIterator3 s3, SrcAccessor3 src3, DestIterator d, DestAccessor dest, Functor const &amp;f, MetaInt&lt; 0 &gt;)</argsstring>
        <name>combineThreeMultiArraysImpl</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>SrcIterator3</type>
          <declname>s3</declname>
        </param>
        <param>
          <type>SrcAccessor3</type>
          <declname>src3</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1301" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1297" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gaee6fb8d8f1cbbb603248db0f3fd28ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class SrcIterator3</type>
          </param>
          <param>
            <type>class SrcAccessor3</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineThreeMultiArraysImpl</definition>
        <argsstring>(SrcIterator1 s1, SrcShape const &amp;shape, SrcAccessor1 src1, SrcIterator2 s2, SrcAccessor2 src2, SrcIterator3 s3, SrcAccessor3 src3, DestIterator d, DestAccessor dest, Functor const &amp;f, MetaInt&lt; N &gt;)</argsstring>
        <name>combineThreeMultiArraysImpl</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>SrcIterator3</type>
          <declname>s3</declname>
        </param>
        <param>
          <type>SrcAccessor3</type>
          <declname>src3</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1316" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1311" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga14152b4ce55fee06cba896303ef0a539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArrays</definition>
        <argsstring>(...)</argsstring>
        <name>combineTwoMultiArrays</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Combine two multi-dimensional arrays into one using a binary function or functor. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be applied in three modes:</para><para><variablelist>
<varlistentry><term><bold>Standard Mode:</bold> </term></varlistentry>
<listitem><para>If the source and destination arrays have the same size, the transformation given by the functor is applied to every pair of corresponding source elements and the result written into the corresponding destination element. Binary functions, binary functors from the STL and the functors specifically defined in <ref refid="group__CombineFunctor" kindref="compound">Functors to Combine Images</ref> can be used in standard mode. Creation of new functors is easiest by using <ref refid="FunctorExpressions" kindref="compound">Functor Expressions</ref>. </para></listitem>
<varlistentry><term><bold>Expanding Mode:</bold> </term></varlistentry>
<listitem><para>If the source arrays have length 1 along some (or even all) dimensions, the source values at index 0 are used for all destination elements in those dimensions. In other words, the source index is not incremented along those dimensions, but the transformation functor is applied as usual. So, we can expand small arrays (e.g. a single row of data, column length is 1), into larger ones (e.g. a 2D image with the same width): the given values are simply reused as necessary (e.g. for every row of the destination image). It is not even necessary that the source array shapes are equal. For example, we can combine a small array with one that hase the same size as the destination array. The same functors as in standard mode can be applied. </para></listitem>
<varlistentry><term><bold>Reducing Mode:</bold> </term></varlistentry>
<listitem><para>If the destination array has length 1 along some (or even all) dimensions, the source values in these dimensions are reduced to single values by means of a suitable functor which supports two function call operators: one with two arguments to collect the values, and one without argument to obtain the final (reduced) result. This behavior is a multi-dimensional generalization of the C++ standard function <computeroutput>std::accumulate()</computeroutput>. </para></listitem>
</variablelist>
</para><para>The arrays must be represented by iterators compatible with <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref>, and the iteration range is specified by means of shape objects. If only a single source shape is given the destination array is assumed to have the same shape, and standard mode is applied. If three shapes are given, the size of corresponding dimensions must be either equal (standard copy), or the length of this dimension must be 1 in one or both source arrays (expand mode), or the destination length must be 1 (reduce mode). However, reduction and expansion cannot be executed at the same time, so the latter conditions are mutual exclusive, even if they apply to different dimensions.</para><para>The function uses accessors to access the data elements.</para><para><bold> Declarations:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__pointoperators_8hxx_source" kindref="compound">vigra/multi_pointoperators.hxx</ref>&gt;<linebreak/>
 Namespace: vigra</para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MultiPointoperators_1ga14152b4ce55fee06cba896303ef0a539" kindref="member" tooltip="Combine two multi-dimensional arrays into one using a binary function or functor.">combineTwoMultiArrays</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcIterator1<sp/>s1,<sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>SrcAccessor1<sp/>src1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcIterator2<sp/>s2,<sp/>SrcAccessor2<sp/>src2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>d,<sp/>DestAccessor<sp/>dest,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MultiPointoperators_1ga14152b4ce55fee06cba896303ef0a539" kindref="member" tooltip="Combine two multi-dimensional arrays into one using a binary function or functor.">combineTwoMultiArrays</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcIterator1<sp/>s1,<sp/>SrcShape1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sshape1,<sp/>SrcAccessor1<sp/>src1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcIterator2<sp/>s2,<sp/>SrcShape2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sshape2,<sp/>SrcAccessor2<sp/>src2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>d,<sp/>DestShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dshape,<sp/>DestAccessor<sp/>dest,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MultiPointoperators_1ga14152b4ce55fee06cba896303ef0a539" kindref="member" tooltip="Combine two multi-dimensional arrays into one using a binary function or functor.">combineTwoMultiArrays</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triple&lt;SrcIterator1,<sp/>SrcShape,<sp/>SrcAccessor1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;SrcIterator2,<sp/>SrcAccessor2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;DestIterator,<sp/>DestAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dest,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__MultiPointoperators_1ga14152b4ce55fee06cba896303ef0a539" kindref="member" tooltip="Combine two multi-dimensional arrays into one using a binary function or functor.">combineTwoMultiArrays</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triple&lt;SrcIterator1,<sp/>SrcShape1,<sp/>SrcAccessor1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triple&lt;SrcIterator2,<sp/>SrcShape2,<sp/>SrcAccessor2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triple&lt;DestIterator,<sp/>DestShape,<sp/>DestAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dest,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage - Standard Mode:</bold></para><para>Source and destination arrays have the same size.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::plus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src1(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src2(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::combineTwoMultiArrays(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArrayRange(src1),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArray(src2),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destMultiArray(dest),<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::plus&lt;int&gt;());</highlight></codeline>
</programlisting></para><para><bold> Usage - Expand Mode:</bold></para><para>One source array is only 2D (it has depth 1). This image will be added to every slice of the other source array, and the result if written into the corresponding destination slice. Note that the shapes of all arrays must be passed to the algorithm, so we use <computeroutput>srcMultiArrayRange()</computeroutput> and <computeroutput>destMultiArrayRange()</computeroutput> rather than <computeroutput>srcMultiArray()</computeroutput> and <computeroutput>destMultiArray()</computeroutput>.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::plus</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src1(Array::size_type(100,<sp/>200,<sp/>1)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src2(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::combineTwoMultiArrays(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArrayRange(src1),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArray(src2),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destMultiArray(dest),<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::plus&lt;int&gt;());</highlight></codeline>
</programlisting></para><para><bold> Usage - Reduce Mode:</bold></para><para>The destination array is only 1D (it&apos;s width and height are 1). Thus, it will contain accumulated data for every slice of the source volumes (or for every frame, if the sources are interpreted as image sequences). In the example, we use <ref refid="classvigra_1_1ReduceFunctor" kindref="compound">vigra::ReduceFunctor</ref> together with a functor expression (see <ref refid="FunctorExpressions" kindref="compound">Functor Expressions</ref>) to calculate the total absolute difference of the gray values in every pair of source slices. Note that the shapes of all arrays must be passed to the algorithm in order for the reduction to work, so we use <computeroutput>srcMultiArrayRange()</computeroutput> and <computeroutput>destMultiArrayRange()</computeroutput> rather than <computeroutput>srcMultiArray()</computeroutput> and <computeroutput>destMultiArray()</computeroutput>.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;vigra/functorexpression.hxx&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">vigra::functor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src1(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>src2(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(1,<sp/>1,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::combineTwoMultiArrays(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArrayRange(src1),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srcMultiArray(src2),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destMultiArray(dest),<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reduceFunctor(Arg1()<sp/>+<sp/><ref refid="group__FFTWComplexOperators_1ga6f4ef274842b6153923f02a6cd264576" kindref="member" tooltip="absolute value (= magnitude)">abs</ref>(Arg2()<sp/>-<sp/>Arg3()),<sp/>0)<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Arg1()<sp/>is<sp/>the<sp/>sum<sp/>accumulated<sp/>so<sp/>far,<sp/>initialized<sp/>with<sp/>0</highlight></codeline>
</programlisting></para><para>Note that the functor must define the appropriate traits described below in order to be recognized as a reduce functor. This is most easily achieved by deriving from <computeroutput>BinaryReduceFunctorTag</computeroutput> (see <ref refid="classvigra_1_1FunctorTraits" kindref="compound">vigra::FunctorTraits</ref>).</para><para><bold> Required Interface:</bold></para><para>In standard and expand mode, the functor must be a model of BinaryFunction (i.e. support function call with two arguments and a return value <computeroutput>res = functor(arg1, arg2)</computeroutput>):</para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>src1_begin,<sp/>src2_begin,<sp/>dest_begin;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SrcAccessor1<sp/>src1_accessor;</highlight></codeline>
<codeline><highlight class="normal">SrcAccessor2<sp/>src2_accessor;</highlight></codeline>
<codeline><highlight class="normal">DestAccessor<sp/>dest_accessor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Functor<sp/>functor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dest_accessor.set(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>functor(src1_accessor(src1_begin),<sp/>src2_accessor(src2_begin)),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest_begin);</highlight></codeline>
</programlisting></para><para>In reduce mode, it must be a model of BinaryAnalyser (i.e. support function call with two arguments and no return value <computeroutput>functor(arg1, arg2)</computeroutput>) and Initializer (i.e. support function call with no argument, but return value <computeroutput>res = functor()</computeroutput>). Internally, such functors are recognized by the meta functions <computeroutput>FunctorTraits&lt;FUNCTOR&gt;::isBinaryAnalyser</computeroutput> and <computeroutput>FunctorTraits&lt;FUNCTOR&gt;::isInitializer</computeroutput> which must both yield <computeroutput>VigraTrueType</computeroutput>. Make sure that your functor correctly defines <computeroutput><ref refid="classvigra_1_1FunctorTraits" kindref="compound">FunctorTraits</ref></computeroutput> because otherwise reduce mode will not work. This is most easily achieved by deriving the functor from <computeroutput>BinaryReduceFunctorTag</computeroutput> (see <ref refid="classvigra_1_1FunctorTraits" kindref="compound">vigra::FunctorTraits</ref>). In addition, the functor must be copy constructible in order to start each reduction with a fresh functor.</para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>src1_begin,<sp/>src2_begin,<sp/>dest_begin;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SrcAccessor1<sp/>src1_accessor;</highlight></codeline>
<codeline><highlight class="normal">SrcAccessor2<sp/>src2_accessor;</highlight></codeline>
<codeline><highlight class="normal">DestAccessor<sp/>dest_accessor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FUNCTOR<sp/>initial_functor,<sp/>functor(initial_functor);</highlight></codeline>
<codeline><highlight class="normal">assert(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(FunctorTraits&lt;FUNCTOR&gt;::isInitializer)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VigraTrueType));</highlight></codeline>
<codeline><highlight class="normal">assert(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(FunctorTraits&lt;FUNCTOR&gt;::isBinaryAnalyser)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VigraTrueType));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">functor(src1_accessor(src1_begin),<sp/>src2_accessor(src2_begin));</highlight></codeline>
<codeline><highlight class="normal">dest_accessor.set(functor(),<sp/>dest_begin);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1218"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga9c8ed56cee0b0dcf8662cb97dd49b33c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArrays</definition>
        <argsstring>(SrcIterator1 s1, SrcShape const &amp;shape, SrcAccessor1 src1, SrcIterator2 s2, SrcAccessor2 src2, DestIterator d, DestAccessor dest, Functor const &amp;f)</argsstring>
        <name>combineTwoMultiArrays</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1228" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1225" bodyend="1231"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gad1723d4462daa8a500d05de127b4f676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArrays</definition>
        <argsstring>(triple&lt; SrcIterator1, SrcShape, SrcAccessor1 &gt; const &amp;src1, pair&lt; SrcIterator2, SrcAccessor2 &gt; const &amp;src2, pair&lt; DestIterator, DestAccessor &gt; const &amp;dest, Functor const &amp;f)</argsstring>
        <name>combineTwoMultiArrays</name>
        <param>
          <type>triple&lt; SrcIterator1, SrcShape, SrcAccessor1 &gt; const &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>pair&lt; SrcIterator2, SrcAccessor2 &gt; const &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>pair&lt; DestIterator, DestAccessor &gt; const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1240" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1237" bodyend="1245"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga67a6246efa21792f9821381a8aa986f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape1</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcShape2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArrays</definition>
        <argsstring>(SrcIterator1 s1, SrcShape1 const &amp;sshape1, SrcAccessor1 src1, SrcIterator2 s2, SrcShape2 const &amp;sshape2, SrcAccessor2 src2, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f)</argsstring>
        <name>combineTwoMultiArrays</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape1 const &amp;</type>
          <declname>sshape1</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcShape2 const &amp;</type>
          <declname>sshape2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1257" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1252" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga5809f1f25abd1b005c3ada7283a93b2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape1</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcShape2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArrays</definition>
        <argsstring>(triple&lt; SrcIterator1, SrcShape1, SrcAccessor1 &gt; const &amp;src1, triple&lt; SrcIterator2, SrcShape2, SrcAccessor2 &gt; const &amp;src2, triple&lt; DestIterator, DestShape, DestAccessor &gt; const &amp;dest, Functor const &amp;f)</argsstring>
        <name>combineTwoMultiArrays</name>
        <param>
          <type>triple&lt; SrcIterator1, SrcShape1, SrcAccessor1 &gt; const &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>triple&lt; SrcIterator2, SrcShape2, SrcAccessor2 &gt; const &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>triple&lt; DestIterator, DestShape, DestAccessor &gt; const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1279" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1274" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gabcd11c2afac92ac8128d1ee672b4af41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape1</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcShape2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArraysExpandImpl</definition>
        <argsstring>(SrcIterator1 s1, SrcShape1 const &amp;sshape1, SrcAccessor1 src1, SrcIterator2 s2, SrcShape2 const &amp;sshape2, SrcAccessor2 src2, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f, MetaInt&lt; 0 &gt;)</argsstring>
        <name>combineTwoMultiArraysExpandImpl</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape1 const &amp;</type>
          <declname>sshape1</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcShape2 const &amp;</type>
          <declname>sshape2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="909" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="904" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gaff6f87736e3ab61228640b28a3d1adaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape1</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcShape2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArraysExpandImpl</definition>
        <argsstring>(SrcIterator1 s1, SrcShape1 const &amp;sshape1, SrcAccessor1 src1, SrcIterator2 s2, SrcShape2 const &amp;sshape2, SrcAccessor2 src2, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f, MetaInt&lt; N &gt;)</argsstring>
        <name>combineTwoMultiArraysExpandImpl</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape1 const &amp;</type>
          <declname>sshape1</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcShape2 const &amp;</type>
          <declname>sshape2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="943" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="938" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga2f84367e7df456c98938cace69504d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape1</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcShape2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArraysImpl</definition>
        <argsstring>(SrcIterator1 s1, SrcShape1 const &amp;sshape1, SrcAccessor1 src1, SrcIterator2 s2, SrcShape2 const &amp;sshape2, SrcAccessor2 src2, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f, VigraTrueType)</argsstring>
        <name>combineTwoMultiArraysImpl</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape1 const &amp;</type>
          <declname>sshape1</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcShape2 const &amp;</type>
          <declname>sshape2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>VigraTrueType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="880" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="875" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga5ba4dae6bde86155ea4562f9fc85db79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape1</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcShape2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArraysImpl</definition>
        <argsstring>(SrcIterator1 s1, SrcShape1 const &amp;sshape1, SrcAccessor1 src1, SrcIterator2 s2, SrcShape2 const &amp;sshape2, SrcAccessor2 src2, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f, VigraFalseType)</argsstring>
        <name>combineTwoMultiArraysImpl</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape1 const &amp;</type>
          <declname>sshape1</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcShape2 const &amp;</type>
          <declname>sshape2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>VigraFalseType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="970" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="965" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gaf748d530e2dc0b0ba43d7d2e2d780743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArraysReduceImpl</definition>
        <argsstring>(SrcIterator1 s1, SrcShape const &amp;, SrcAccessor1 src1, SrcIterator2 s2, SrcAccessor2 src2, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, SrcShape const &amp;reduceShape, Functor const &amp;ff, MetaInt&lt; 0 &gt;)</argsstring>
        <name>combineTwoMultiArraysReduceImpl</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>reduceShape</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="839" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="833" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga4d44eae51878ee3b641ade83c67e0930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator1</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor1</type>
          </param>
          <param>
            <type>class SrcIterator2</type>
          </param>
          <param>
            <type>class SrcAccessor2</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::combineTwoMultiArraysReduceImpl</definition>
        <argsstring>(SrcIterator1 s1, SrcShape const &amp;sshape, SrcAccessor1 src1, SrcIterator2 s2, SrcAccessor2 src2, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, SrcShape const &amp;reduceShape, Functor const &amp;f, MetaInt&lt; N &gt;)</argsstring>
        <name>combineTwoMultiArraysReduceImpl</name>
        <param>
          <type>SrcIterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor1</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>SrcIterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>SrcAccessor2</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>reduceShape</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="860" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="854" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga98ce45d5407d2db807cf88ecc9494555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::copyMultiArray</definition>
        <argsstring>(...)</argsstring>
        <name>copyMultiArray</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Copy a multi-dimensional array. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be applied in two modes:</para><para><variablelist>
<varlistentry><term><bold>Standard Mode:</bold> </term></varlistentry>
<listitem><para>If the source and destination arrays have the same size, the corresponding array elements are simply copied. If necessary, type conversion takes place. </para></listitem>
<varlistentry><term><bold>Expanding Mode:</bold> </term></varlistentry>
<listitem><para>If the source array has length 1 along some (or even all) dimensions, the source value at index 0 is used for all destination elements in those dimensions. For example, if we have single row of data (column length is 1), we can copy it into a 2D image of the same width: The given row is automatically repeated for every row of the destination image. Again, type conversion os performed if necessary. </para></listitem>
</variablelist>
</para><para>The arrays must be represented by iterators compatible with <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref>, and the iteration range is specified by means of shape objects. If only the source shape is given the destination array is assumed to have the same shape, and standard mode is applied. If two shapes are given, the size of corresponding dimensions must be either equal (standard copy), or the source length must be 1 (expanding copy). The function uses accessors to access the data elements.</para><para><bold> Declarations:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__pointoperators_8hxx_source" kindref="compound">vigra/multi_pointoperators.hxx</ref>&gt;<linebreak/>
 Namespace: vigra</para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga98ce45d5407d2db807cf88ecc9494555" kindref="member" tooltip="Copy a multi-dimensional array.">copyMultiArray</ref>(SrcIterator<sp/>s,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>SrcAccessor<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>d,<sp/>DestAccessor<sp/>dest);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga98ce45d5407d2db807cf88ecc9494555" kindref="member" tooltip="Copy a multi-dimensional array.">copyMultiArray</ref>(SrcIterator<sp/>s,<sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sshape,<sp/>SrcAccessor<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>d,<sp/>DestShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dshape,<sp/>DestAccessor<sp/>dest);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga98ce45d5407d2db807cf88ecc9494555" kindref="member" tooltip="Copy a multi-dimensional array.">copyMultiArray</ref>(triple&lt;SrcIterator,<sp/>SrcShape,<sp/>SrcAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;DestIterator,<sp/>DestAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dest);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga98ce45d5407d2db807cf88ecc9494555" kindref="member" tooltip="Copy a multi-dimensional array.">copyMultiArray</ref>(triple&lt;SrcIterator,<sp/>SrcShape,<sp/>SrcAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triple&lt;DestIterator,<sp/>DestShape,<sp/>DestAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dest);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage - Standard Mode:</bold></para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::copyMultiArray(srcMultiArrayRange(src),<sp/>destMultiArray(dest));</highlight></codeline>
</programlisting></para><para><bold> Usage - Expanding Mode:</bold></para><para>The source array is only 2D (it has depth 1). Thus, the destination will contain 50 identical copies of this image. Note that the destination shape must be passed to the algorithm for the expansion to work, so we use <computeroutput>destMultiArrayRange()</computeroutput> rather than <computeroutput>destMultiArray()</computeroutput>.</para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src(Array::size_type(100,<sp/>200,<sp/>1)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::copyMultiArray(srcMultiArrayRange(src),<sp/>destMultiArrayRange(dest));</highlight></codeline>
</programlisting></para><para><bold> Required Interface:</bold></para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>src_begin,<sp/>dest_begin;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SrcAccessor<sp/>src_accessor;</highlight></codeline>
<codeline><highlight class="normal">DestAccessor<sp/>dest_accessor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dest_accessor.set(src_accessor(src_begin),<sp/>dest_begin);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="391"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga31937a3a4904480dacb00e59baa53544" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::copyMultiArray</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;shape, SrcAccessor src, DestIterator d, DestAccessor dest)</argsstring>
        <name>copyMultiArray</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="399" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="396" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga982fd93db9aac786bd7578953cdd6576" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::copyMultiArray</definition>
        <argsstring>(triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; const &amp;src, pair&lt; DestIterator, DestAccessor &gt; const &amp;dest)</argsstring>
        <name>copyMultiArray</name>
        <param>
          <type>triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>pair&lt; DestIterator, DestAccessor &gt; const &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="408" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="406" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gaec71ef87eebb5896bd9a7154161fa8cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::copyMultiArray</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest)</argsstring>
        <name>copyMultiArray</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="418" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="416" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga460e966405a496ec4dcacf367ef9c536" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::copyMultiArray</definition>
        <argsstring>(triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; const &amp;src, triple&lt; DestIterator, DestShape, DestAccessor &gt; const &amp;dest)</argsstring>
        <name>copyMultiArray</name>
        <param>
          <type>triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>triple&lt; DestIterator, DestShape, DestAccessor &gt; const &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="434" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="432" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga55ac49e4fb1b9bec0e127cd2078d6abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::copyMultiArrayImpl</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, MetaInt&lt; 0 &gt;)</argsstring>
        <name>copyMultiArrayImpl</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="248" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="246" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gadcdfc0e830f4b70a9d0083d2c3a6da79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::copyMultiArrayImpl</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, MetaInt&lt; N &gt;)</argsstring>
        <name>copyMultiArrayImpl</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="264" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="262" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga67ea3b211a208ad10866c127f93860c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::initMultiArray</definition>
        <argsstring>(...)</argsstring>
        <name>initMultiArray</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Write a value to every pixel in a multi-dimensional array. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used to init the array which must be represented by a pair of iterators compatible to <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref>. It uses an accessor to access the data elements. Note that the iterator range must be specified by a shape object, because otherwise we could not control the range simultaneously in all dimensions (this is a necessary consequence of the <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref> design).</para><para>The initial value can either be a constant of appropriate type (compatible with the destination&apos;s value_type), or a functor with compatible result_type. These two cases are automatically distinguished when <computeroutput>FunctorTraits&lt;FUNCTOR&gt;::isInitializer</computeroutput> yields <computeroutput>VigraTrueType</computeroutput>. Since the functor is passed by <computeroutput>const</computeroutput> reference, its <computeroutput>operator()</computeroutput> must be const, and its internal state may need to be <computeroutput>mutable</computeroutput>.</para><para><bold> Declarations:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUETYPE&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga67ea3b211a208ad10866c127f93860c8" kindref="member" tooltip="Write a value to every pixel in a multi-dimensional array.">initMultiArray</ref>(Iterator<sp/>s,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>Accessor<sp/>a,<sp/><sp/>VALUETYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FUNCTOR&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga67ea3b211a208ad10866c127f93860c8" kindref="member" tooltip="Write a value to every pixel in a multi-dimensional array.">initMultiArray</ref>(Iterator<sp/>s,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>Accessor<sp/>a,<sp/><sp/>FUNCTOR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>VALUETYPE&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga67ea3b211a208ad10866c127f93860c8" kindref="member" tooltip="Write a value to every pixel in a multi-dimensional array.">initMultiArray</ref>(triple&lt;Iterator,<sp/>Shape,<sp/>Accessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s,<sp/>VALUETYPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FUNCTOR&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga67ea3b211a208ad10866c127f93860c8" kindref="member" tooltip="Write a value to every pixel in a multi-dimensional array.">initMultiArray</ref>(triple&lt;Iterator,<sp/>Shape,<sp/>Accessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s,<sp/>FUNCTOR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__pointoperators_8hxx_source" kindref="compound">vigra/multi_pointoperators.hxx</ref>&gt;<linebreak/>
 Namespace: vigra</para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>array(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>zero<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiPointoperators_1ga67ea3b211a208ad10866c127f93860c8" kindref="member" tooltip="Write a value to every pixel in a multi-dimensional array.">vigra::initMultiArray</ref>(destMultiArrayRange(array),<sp/>0);</highlight></codeline>
</programlisting></para><para><bold> Required Interface:</bold></para><para>The function accepts either a value that is copied into every destination element:</para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>begin;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Accessor<sp/>accessor;</highlight></codeline>
<codeline><highlight class="normal">VALUETYPE<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">accessor.set(v,<sp/>begin);<sp/></highlight></codeline>
</programlisting></para><para>or a functor that is called (without argument) at every location, and the result is written into the current element. Internally, functors are recognized by the meta function <computeroutput>FunctorTraits&lt;FUNCTOR&gt;::isInitializer</computeroutput> yielding <computeroutput>VigraTrueType</computeroutput>. Make sure that your functor correctly defines <computeroutput><ref refid="classvigra_1_1FunctorTraits" kindref="compound">FunctorTraits</ref></computeroutput> because otherwise the code will not compile.</para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>begin;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">Accessor<sp/>accessor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FUNCTOR<sp/>f;</highlight></codeline>
<codeline><highlight class="normal">assert(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(FunctorTraits&lt;FUNCTOR&gt;::isInitializer)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VigraTrueType));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">accessor.set(f(),<sp/>begin);<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="182"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga55d0a9ee2ef73ef7725919b3cf13895a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class VALUETYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::initMultiArray</definition>
        <argsstring>(Iterator s, Shape const &amp;shape, Accessor a, VALUETYPE const &amp;v)</argsstring>
        <name>initMultiArray</name>
        <param>
          <type>Iterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor</type>
          <declname>a</declname>
        </param>
        <param>
          <type>VALUETYPE const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="187" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga1c4dea9edb3bf91bd8cc3e165fa4e3c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class VALUETYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::initMultiArray</definition>
        <argsstring>(triple&lt; Iterator, Shape, Accessor &gt; const &amp;s, VALUETYPE const &amp;v)</argsstring>
        <name>initMultiArray</name>
        <param>
          <type>triple&lt; Iterator, Shape, Accessor &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>VALUETYPE const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="195" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga766b335fc483cd4ccef288fa854ee170" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Diff_type</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class VALUETYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::initMultiArrayBorder</definition>
        <argsstring>(Iterator upperleft, Diff_type shape, Accessor a, int border_width, VALUETYPE v)</argsstring>
        <name>initMultiArrayBorder</name>
        <param>
          <type>Iterator</type>
          <declname>upperleft</declname>
        </param>
        <param>
          <type>Diff_type</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>border_width</declname>
        </param>
        <param>
          <type>VALUETYPE</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Write value to the specified border values in the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="210" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="208" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga6df29cf782964b596619c4f27a08275e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Diff_type</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class VALUETYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::initMultiArrayBorder</definition>
        <argsstring>(triple&lt; Iterator, Diff_type, Accessor &gt; multiArray, int border_width, VALUETYPE v)</argsstring>
        <name>initMultiArrayBorder</name>
        <param>
          <type>triple&lt; Iterator, Diff_type, Accessor &gt;</type>
          <declname>multiArray</declname>
        </param>
        <param>
          <type>int</type>
          <declname>border_width</declname>
        </param>
        <param>
          <type>VALUETYPE</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="232" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="230" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gac4a5bcb7029050c1a29fd9fa95fe0af8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class VALUETYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::initMultiArrayImpl</definition>
        <argsstring>(Iterator s, Shape const &amp;shape, Accessor a, VALUETYPE const &amp;v, MetaInt&lt; 0 &gt;)</argsstring>
        <name>initMultiArrayImpl</name>
        <param>
          <type>Iterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor</type>
          <declname>a</declname>
        </param>
        <param>
          <type>VALUETYPE const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="75" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga5e9f12b624df34b9d3b9038852c198aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class VALUETYPE</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::initMultiArrayImpl</definition>
        <argsstring>(Iterator s, Shape const &amp;shape, Accessor a, VALUETYPE const &amp;v, MetaInt&lt; N &gt;)</argsstring>
        <name>initMultiArrayImpl</name>
        <param>
          <type>Iterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor</type>
          <declname>a</declname>
        </param>
        <param>
          <type>VALUETYPE const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="84" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga40ad7d2006bb841fd422b2f3a28447c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectMultiArray</definition>
        <argsstring>(...)</argsstring>
        <name>inspectMultiArray</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Call an analyzing functor at every element of a multi-dimensional array. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used to collect statistics of the array etc. The results must be stored in the functor, which serves as a return value. The arrays must be represented by iterators compatible with <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref>. The function uses an accessor to access the pixel data. Note that the iterator range must be specified by a shape object, because otherwise we could not control the range simultaneously in all dimensions (this is a necessary consequence of the <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref> design).</para><para><bold> Declarations:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga40ad7d2006bb841fd422b2f3a28447c6" kindref="member" tooltip="Call an analyzing functor at every element of a multi-dimensional array.">inspectMultiArray</ref>(Iterator<sp/>s,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>Accessor<sp/>a,<sp/><sp/>Functor<sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga40ad7d2006bb841fd422b2f3a28447c6" kindref="member" tooltip="Call an analyzing functor at every element of a multi-dimensional array.">inspectMultiArray</ref>(triple&lt;Iterator,<sp/>Shape,<sp/>Accessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s,<sp/>Functor<sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__pointoperators_8hxx_source" kindref="compound">vigra/multi_pointoperators.hxx</ref>&gt;<linebreak/>
 Namespace: vigra</para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>array(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>init<sp/>functor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classvigra_1_1FindMinMax" kindref="compound" tooltip="Find the minimum and maximum pixel value in an image or ROI.">vigra::FindMinMax&lt;int&gt;</ref><sp/>minmax;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiPointoperators_1ga40ad7d2006bb841fd422b2f3a28447c6" kindref="member" tooltip="Call an analyzing functor at every element of a multi-dimensional array.">vigra::inspectMultiArray</ref>(srcMultiArrayRange(array),<sp/>minmax);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Min:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>minmax.<ref refid="classvigra_1_1FindMinMax_1a0ae3408e83fa258f08ece61e194251a9" kindref="member">min</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Max:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>minmax.<ref refid="classvigra_1_1FindMinMax_1a7a6d5ee26475974260562366c1a71b01" kindref="member">max</ref>;</highlight></codeline>
</programlisting></para><para><bold> Required Interface:</bold></para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>src_begin;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Accessor<sp/>accessor;</highlight></codeline>
<codeline><highlight class="normal">Functor<sp/>functor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">functor(accessor(src_begin));<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1511"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga9475ae4adf30f9522631511a42547844" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectMultiArray</definition>
        <argsstring>(Iterator s, Shape const &amp;shape, Accessor a, Functor &amp;f)</argsstring>
        <name>inspectMultiArray</name>
        <param>
          <type>Iterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Functor &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1531" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1530" bodyend="1534"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga58c00cf9ff5541b7ceb402aa9aed3e58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectMultiArray</definition>
        <argsstring>(triple&lt; Iterator, Shape, Accessor &gt; const &amp;s, Functor &amp;f)</argsstring>
        <name>inspectMultiArray</name>
        <param>
          <type>triple&lt; Iterator, Shape, Accessor &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Functor &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1539" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1538" bodyend="1541"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga4e416f2f9c2f6b3cd598014fc6ad8bd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectMultiArrayImpl</definition>
        <argsstring>(Iterator s, Shape const &amp;shape, Accessor a, Functor &amp;f, MetaInt&lt; 0 &gt;)</argsstring>
        <name>inspectMultiArrayImpl</name>
        <param>
          <type>Iterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Functor &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1435" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1434" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga4236f6558d53ab01b77fa548523cce4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectMultiArrayImpl</definition>
        <argsstring>(Iterator s, Shape const &amp;shape, Accessor a, Functor &amp;f, MetaInt&lt; N &gt;)</argsstring>
        <name>inspectMultiArrayImpl</name>
        <param>
          <type>Iterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Functor &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1442" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1441" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga35f8cd56d1be02745894e61cfcc096e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectTwoMultiArrays</definition>
        <argsstring>(...)</argsstring>
        <name>inspectTwoMultiArrays</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Call an analyzing functor at all corresponding elements of two multi-dimensional arrays. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be used to collect statistics of the array etc. The results must be stored in the functor, which serves as a return value. The arrays must be represented by iterators compatible with <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref>. The function uses an accessor to access the pixel data. Note that the iterator range must be specified by a shape object, because otherwise we could not control the range simultaneously in all dimensions (this is a necessary consequence of the <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref> design).</para><para><bold> Declarations:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Iterator1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Shape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Accessor1,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Iterator2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Accessor2,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga35f8cd56d1be02745894e61cfcc096e9" kindref="member" tooltip="Call an analyzing functor at all corresponding elements of two multi-dimensional arrays.">inspectTwoMultiArrays</ref>(Iterator1<sp/>s1,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>Accessor1<sp/>a1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator2<sp/>s2,<sp/>Accessor2<sp/>a2,<sp/>Functor<sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Iterator1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="group__MultiIteratorGroup_1gaf6799170bf47f30c42a3f164f6ccf8ce" kindref="member" tooltip="shape type for MultiArray&amp;lt;1, T&amp;gt;">Shape1</ref>,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Accessor1,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Iterator2,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Accessor2,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga35f8cd56d1be02745894e61cfcc096e9" kindref="member" tooltip="Call an analyzing functor at all corresponding elements of two multi-dimensional arrays.">inspectTwoMultiArrays</ref>(triple&lt;Iterator1,<sp/>Shape1,<sp/>Accessor1&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s1,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;Iterator2,<sp/>Accessor2&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s2,<sp/>Functor<sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__pointoperators_8hxx_source" kindref="compound">vigra/multi_pointoperators.hxx</ref>&gt;<linebreak/>
 Namespace: vigra</para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, int&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>array1(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>array2(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>init<sp/>functor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SomeStatisticsFunctor<sp/>stats(..);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiPointoperators_1ga35f8cd56d1be02745894e61cfcc096e9" kindref="member" tooltip="Call an analyzing functor at all corresponding elements of two multi-dimensional arrays.">vigra::inspectTwoMultiArrays</ref>(srcMultiArrayRange(array1),<sp/>srcMultiArray(array2),<sp/>stats);</highlight></codeline>
</programlisting></para><para><bold> Required Interface:</bold></para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>src1_begin,<sp/>src2_begin;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">Accessor<sp/>a1,<sp/>a2;</highlight></codeline>
<codeline><highlight class="normal">Functor<sp/>functor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">functor(a1(src1_begin),<sp/>a2(src2_begin));<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1643"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga8d0a215b87028906b7576857506cc280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator1</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor1</type>
          </param>
          <param>
            <type>class Iterator2</type>
          </param>
          <param>
            <type>class Accessor2</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectTwoMultiArrays</definition>
        <argsstring>(Iterator1 s1, Shape const &amp;shape, Accessor1 a1, Iterator2 s2, Accessor2 a2, Functor &amp;f)</argsstring>
        <name>inspectTwoMultiArrays</name>
        <param>
          <type>Iterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>Accessor2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Functor &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1671" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1669" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gad495b1505cbce88cfc68465635585d12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator1</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor1</type>
          </param>
          <param>
            <type>class Iterator2</type>
          </param>
          <param>
            <type>class Accessor2</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectTwoMultiArrays</definition>
        <argsstring>(triple&lt; Iterator1, Shape, Accessor1 &gt; const &amp;s1, pair&lt; Iterator2, Accessor2 &gt; const &amp;s2, Functor &amp;f)</argsstring>
        <name>inspectTwoMultiArrays</name>
        <param>
          <type>triple&lt; Iterator1, Shape, Accessor1 &gt; const &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>pair&lt; Iterator2, Accessor2 &gt; const &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>Functor &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1685" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1683" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga285a0908d7158de37c5be9b1d3daa11a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator1</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor1</type>
          </param>
          <param>
            <type>class Iterator2</type>
          </param>
          <param>
            <type>class Accessor2</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectTwoMultiArraysImpl</definition>
        <argsstring>(Iterator1 s1, Shape const &amp;shape, Accessor1 a1, Iterator2 s2, Accessor2 a2, Functor &amp;f, MetaInt&lt; 0 &gt;)</argsstring>
        <name>inspectTwoMultiArraysImpl</name>
        <param>
          <type>Iterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>Accessor2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Functor &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1556" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1553" bodyend="1558"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga874c0bfc10bd137e40ccc95f3498b0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator1</type>
          </param>
          <param>
            <type>class Shape</type>
          </param>
          <param>
            <type>class Accessor1</type>
          </param>
          <param>
            <type>class Iterator2</type>
          </param>
          <param>
            <type>class Accessor2</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::inspectTwoMultiArraysImpl</definition>
        <argsstring>(Iterator1 s1, Shape const &amp;shape, Accessor1 a1, Iterator2 s2, Accessor2 a2, Functor &amp;f, MetaInt&lt; N &gt;)</argsstring>
        <name>inspectTwoMultiArraysImpl</name>
        <param>
          <type>Iterator1</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>Shape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Accessor1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Iterator2</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>Accessor2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Functor &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="1567" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="1564" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga50a97001588cdbec053d23d1d99079eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorDeterminantMultiArray</definition>
        <argsstring>(...)</argsstring>
        <name>tensorDeterminantMultiArray</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Calculate the tensor determinant for every element of a ND tensor array. </para>        </briefdescription>
        <detaileddescription>
<para>This function turns a N-D tensor (whose value_type is a vector of length N*(N+1)/2, see <ref refid="group__MultiPointoperators_1gad869b7b263b104e005a1ddc66b5c1f80" kindref="member">vectorToTensorMultiArray()</ref>) representing the upper triangular part of a symmetric tensor into the a scalar array holding the tensor determinant.</para><para>Currently, <computeroutput>N &lt;= 3</computeroutput> is required.</para><para><bold> Declarations:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga50a97001588cdbec053d23d1d99079eb" kindref="member" tooltip="Calculate the tensor determinant for every element of a ND tensor array.">tensorDeterminantMultiArray</ref>(SrcIterator<sp/>si,<sp/><sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>SrcAccessor<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>di,<sp/>DestAccessor<sp/>dest);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga50a97001588cdbec053d23d1d99079eb" kindref="member" tooltip="Calculate the tensor determinant for every element of a ND tensor array.">tensorDeterminantMultiArray</ref>(triple&lt;SrcIterator,<sp/>SrcShape,<sp/>SrcAccessor&gt;<sp/>s,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;DestIterator,<sp/>DestAccessor&gt;<sp/>d);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__tensorutilities_8hxx_source" kindref="compound">vigra/multi_tensorutilities.hxx</ref>&gt;</para><para><programlisting><codeline><highlight class="normal">MultiArray&lt;3,<sp/>float&gt;<sp/>vol(shape);</highlight></codeline>
<codeline><highlight class="normal">MultiArray&lt;3,<sp/>TinyVector&lt;float,<sp/>6&gt;<sp/>&gt;<sp/>hessian(shape);</highlight></codeline>
<codeline><highlight class="normal">MultiArray&lt;3,<sp/>float&gt;<sp/><ref refid="group__MatrixAlgebra_1ga15edf238753abafb705497c01e38112c" kindref="member">determinant</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1gae419814e55fb3191a87e7b75f505d4da" kindref="member" tooltip="Calculate Hessian matrix of a N-dimensional arrays using Gaussian derivative filters.">hessianOfGaussianMultiArray</ref>(srcMultiArrayRange(vol),<sp/>destMultiArray(hessian),<sp/>2.0);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiPointoperators_1ga50a97001588cdbec053d23d1d99079eb" kindref="member" tooltip="Calculate the tensor determinant for every element of a ND tensor array.">tensorDeterminantMultiArray</ref>(srcMultiArrayRange(hessian),<sp/>destMultiArray(<ref refid="group__MatrixAlgebra_1ga15edf238753abafb705497c01e38112c" kindref="member">determinant</ref>));</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="502"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga5680c2929f2d41cf4558d49591104745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorDeterminantMultiArray</definition>
        <argsstring>(SrcIterator si, SrcShape const &amp;shape, SrcAccessor src, DestIterator di, DestAccessor dest)</argsstring>
        <name>tensorDeterminantMultiArray</name>
        <param>
          <type>SrcIterator</type>
          <declname>si</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>di</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="509" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" bodystart="507" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gad2eba1503c67f9f3e5cf1a7cd3d3ed56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorDeterminantMultiArray</definition>
        <argsstring>(triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; s, pair&lt; DestIterator, DestAccessor &gt; d)</argsstring>
        <name>tensorDeterminantMultiArray</name>
        <param>
          <type>triple&lt; SrcIterator, SrcShape, SrcAccessor &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>pair&lt; DestIterator, DestAccessor &gt;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="531" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" bodystart="529" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gacc06f88a0cd7dcdb73f0c4af5b0e0312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorEigenvaluesMultiArray</definition>
        <argsstring>(...)</argsstring>
        <name>tensorEigenvaluesMultiArray</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Calculate the tensor eigenvalues for every element of a N-D tensor array. </para>        </briefdescription>
        <detaileddescription>
<para>This function turns a N-D tensor (whose value_type is a vector of length N*(N+1)/2, see <ref refid="group__MultiPointoperators_1gad869b7b263b104e005a1ddc66b5c1f80" kindref="member">vectorToTensorMultiArray()</ref>) representing the upper triangular part of a symmetric tensor into a vector-valued array holding the tensor eigenvalues (thus, the destination value_type must be vectors of length N).</para><para>Currently, <computeroutput>N &lt;= 3</computeroutput> is required.</para><para><bold> Declarations:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1gacc06f88a0cd7dcdb73f0c4af5b0e0312" kindref="member" tooltip="Calculate the tensor eigenvalues for every element of a N-D tensor array.">tensorEigenvaluesMultiArray</ref>(SrcIterator<sp/>si,<sp/><sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>SrcAccessor<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>di,<sp/>DestAccessor<sp/>dest);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1gacc06f88a0cd7dcdb73f0c4af5b0e0312" kindref="member" tooltip="Calculate the tensor eigenvalues for every element of a N-D tensor array.">tensorEigenvaluesMultiArray</ref>(triple&lt;SrcIterator,<sp/>SrcShape,<sp/>SrcAccessor&gt;<sp/>s,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;DestIterator,<sp/>DestAccessor&gt;<sp/>d);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__tensorutilities_8hxx_source" kindref="compound">vigra/multi_tensorutilities.hxx</ref>&gt;</para><para><programlisting><codeline><highlight class="normal">MultiArray&lt;3,<sp/>float&gt;<sp/>vol(shape);</highlight></codeline>
<codeline><highlight class="normal">MultiArray&lt;3,<sp/>TinyVector&lt;float,<sp/>6&gt;<sp/>&gt;<sp/>hessian(shape);</highlight></codeline>
<codeline><highlight class="normal">MultiArray&lt;3,<sp/>TinyVector&lt;float,<sp/>3&gt;<sp/>&gt;<sp/>eigenvalues(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1gae419814e55fb3191a87e7b75f505d4da" kindref="member" tooltip="Calculate Hessian matrix of a N-dimensional arrays using Gaussian derivative filters.">hessianOfGaussianMultiArray</ref>(srcMultiArrayRange(vol),<sp/>destMultiArray(hessian),<sp/>2.0);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiPointoperators_1gacc06f88a0cd7dcdb73f0c4af5b0e0312" kindref="member" tooltip="Calculate the tensor eigenvalues for every element of a N-D tensor array.">tensorEigenvaluesMultiArray</ref>(srcMultiArrayRange(hessian),<sp/>destMultiArray(eigenvalues));</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="413"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga4942e6f564bcf4706ac1a4581e0160f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorEigenvaluesMultiArray</definition>
        <argsstring>(SrcIterator si, SrcShape const &amp;shape, SrcAccessor src, DestIterator di, DestAccessor dest)</argsstring>
        <name>tensorEigenvaluesMultiArray</name>
        <param>
          <type>SrcIterator</type>
          <declname>si</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>di</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="420" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" bodystart="418" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gacf4ae124465843152acd556bf65e9f4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorEigenvaluesMultiArray</definition>
        <argsstring>(triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; s, pair&lt; DestIterator, DestAccessor &gt; d)</argsstring>
        <name>tensorEigenvaluesMultiArray</name>
        <param>
          <type>triple&lt; SrcIterator, SrcShape, SrcAccessor &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>pair&lt; DestIterator, DestAccessor &gt;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="445" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" bodystart="443" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga0e407a39a189369be86f6e2a9a4a1415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorTraceMultiArray</definition>
        <argsstring>(...)</argsstring>
        <name>tensorTraceMultiArray</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Calculate the tensor trace for every element of a N-D tensor array. </para>        </briefdescription>
        <detaileddescription>
<para>This function turns a N-D tensor (whose value_type is a vector of length N*(N+1)/2, see <ref refid="group__MultiPointoperators_1gad869b7b263b104e005a1ddc66b5c1f80" kindref="member">vectorToTensorMultiArray()</ref>) representing the upper triangular part of a symmetric tensor into a scalar array holding the tensor trace.</para><para>Currently, <computeroutput>N &lt;= 3</computeroutput> is required.</para><para><bold> Declarations:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga0e407a39a189369be86f6e2a9a4a1415" kindref="member" tooltip="Calculate the tensor trace for every element of a N-D tensor array.">tensorTraceMultiArray</ref>(SrcIterator<sp/>si,<sp/><sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>SrcAccessor<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>di,<sp/>DestAccessor<sp/>dest);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga0e407a39a189369be86f6e2a9a4a1415" kindref="member" tooltip="Calculate the tensor trace for every element of a N-D tensor array.">tensorTraceMultiArray</ref>(triple&lt;SrcIterator,<sp/>SrcShape,<sp/>SrcAccessor&gt;<sp/>s,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;DestIterator,<sp/>DestAccessor&gt;<sp/>d);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__tensorutilities_8hxx_source" kindref="compound">vigra/multi_tensorutilities.hxx</ref>&gt;</para><para><programlisting><codeline><highlight class="normal">MultiArray&lt;3,<sp/>float&gt;<sp/>vol(shape);</highlight></codeline>
<codeline><highlight class="normal">MultiArray&lt;3,<sp/>TinyVector&lt;float,<sp/>6&gt;<sp/>&gt;<sp/>hessian(shape);</highlight></codeline>
<codeline><highlight class="normal">MultiArray&lt;3,<sp/>float&gt;<sp/><ref refid="group__LinearAlgebraFunctions_1ga0dc9d4f009147f671d137888389568c7" kindref="member">trace</ref>(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1gae419814e55fb3191a87e7b75f505d4da" kindref="member" tooltip="Calculate Hessian matrix of a N-dimensional arrays using Gaussian derivative filters.">hessianOfGaussianMultiArray</ref>(srcMultiArrayRange(vol),<sp/>destMultiArray(hessian),<sp/>2.0);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiPointoperators_1ga0e407a39a189369be86f6e2a9a4a1415" kindref="member" tooltip="Calculate the tensor trace for every element of a N-D tensor array.">tensorTraceMultiArray</ref>(srcMultiArrayRange(hessian),<sp/>destMultiArray(<ref refid="group__LinearAlgebraFunctions_1ga0dc9d4f009147f671d137888389568c7" kindref="member">trace</ref>));</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="334"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga2c1edbbe15dd0d3ea27fc878e02140b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorTraceMultiArray</definition>
        <argsstring>(SrcIterator si, SrcShape const &amp;shape, SrcAccessor src, DestIterator di, DestAccessor dest)</argsstring>
        <name>tensorTraceMultiArray</name>
        <param>
          <type>SrcIterator</type>
          <declname>si</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>di</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="341" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" bodystart="339" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga951dbe7685790003395a966f0fd2dbaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::tensorTraceMultiArray</definition>
        <argsstring>(triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; s, pair&lt; DestIterator, DestAccessor &gt; d)</argsstring>
        <name>tensorTraceMultiArray</name>
        <param>
          <type>triple&lt; SrcIterator, SrcShape, SrcAccessor &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>pair&lt; DestIterator, DestAccessor &gt;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="354" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" bodystart="352" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga4e3f906de480f4a867340968da8a98dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArray</definition>
        <argsstring>(...)</argsstring>
        <name>transformMultiArray</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Transform a multi-dimensional array with a unary function or functor. </para>        </briefdescription>
        <detaileddescription>
<para>This function can be applied in three modes:</para><para><variablelist>
<varlistentry><term><bold>Standard Mode:</bold> </term></varlistentry>
<listitem><para>If the source and destination arrays have the same size, the transformation given by the functor is applied to every source element and the result written into the corresponding destination element. Unary functions, unary functors from the STL and the functors specifically defined in <ref refid="group__TransformFunctor" kindref="compound">Functors to Transform Images</ref> can be used in standard mode. Creation of new functors is easiest by using <ref refid="FunctorExpressions" kindref="compound">Functor Expressions</ref>. </para></listitem>
<varlistentry><term><bold>Expanding Mode:</bold> </term></varlistentry>
<listitem><para>If the source array has length 1 along some (or even all) dimensions, the source value at index 0 is used for all destination elements in those dimensions. In other words, the source index is not incremented along these dimensions, but the transformation functor is applied as usual. So, we can expand a small array (e.g. a single row of data, column length is 1), into a larger one (e.g. a 2D image with the same width): the given values are simply reused as necessary (e.g. for every row of the destination image). The same functors as in standard mode can be applied. </para></listitem>
<varlistentry><term><bold>Reducing Mode:</bold> </term></varlistentry>
<listitem><para>If the destination array has length 1 along some (or even all) dimensions, the source values in these dimensions are reduced to single values by means of a suitable functor (e.g. <ref refid="classvigra_1_1ReduceFunctor" kindref="compound">vigra::ReduceFunctor</ref>), which supports two function call operators: one with a single argument to collect the values, and without argument to obtain the final (reduced) result. This behavior is a multi-dimensional generalization of the C++ standard function <computeroutput>std::accumulate()</computeroutput>. </para></listitem>
</variablelist>
</para><para>The arrays must be represented by iterators compatible with <ref refid="classvigra_1_1MultiIterator" kindref="compound">vigra::MultiIterator</ref>, and the iteration range is specified by means of shape objects. If only the source shape is given the destination array is assumed to have the same shape, and standard mode is applied. If two shapes are given, the size of corresponding dimensions must be either equal (standard copy), or the source length must be 1 (expand mode), or the destination length must be 1 (reduce mode). However, reduction and expansion cannot be executed at the same time, so the latter conditions are mutual exclusive, even if they apply to different dimensions.</para><para>The function uses accessors to access the data elements.</para><para><bold> Declarations:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__pointoperators_8hxx_source" kindref="compound">vigra/multi_pointoperators.hxx</ref>&gt;<linebreak/>
 Namespace: vigra</para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga4e3f906de480f4a867340968da8a98dd" kindref="member" tooltip="Transform a multi-dimensional array with a unary function or functor.">transformMultiArray</ref>(SrcIterator<sp/>s,<sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>SrcAccessor<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>d,<sp/>DestAccessor<sp/>dest,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga4e3f906de480f4a867340968da8a98dd" kindref="member" tooltip="Transform a multi-dimensional array with a unary function or functor.">transformMultiArray</ref>(SrcIterator<sp/>s,<sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sshape,<sp/>SrcAccessor<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>d,<sp/>DestShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dshape,<sp/>DestAccessor<sp/>dest,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga4e3f906de480f4a867340968da8a98dd" kindref="member" tooltip="Transform a multi-dimensional array with a unary function or functor.">transformMultiArray</ref>(triple&lt;SrcIterator,<sp/>SrcShape,<sp/>SrcAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;DestIterator,<sp/>DestAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dest,<sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1ga4e3f906de480f4a867340968da8a98dd" kindref="member" tooltip="Transform a multi-dimensional array with a unary function or functor.">transformMultiArray</ref>(triple&lt;SrcIterator,<sp/>SrcShape,<sp/>SrcAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triple&lt;DestIterator,<sp/>DestShape,<sp/>DestAccessor&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>dest,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>f)</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage - Standard Mode:</bold></para><para>Source and destination array have the same size.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>sqrt()</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, float&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::transformMultiArray(srcMultiArrayRange(src),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destMultiArray(dest),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(*)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">))&amp;<ref refid="group__FixedPointOperations_1ga22d75753836176f3d172f58be11ecc4c" kindref="member" tooltip="square root.">std::sqrt</ref><sp/>);</highlight></codeline>
</programlisting></para><para><bold> Usage - Expand Mode:</bold></para><para>The source array is only 2D (it has depth 1). Thus, the destination will contain 50 identical copies of the transformed source array. Note that the destination shape must be passed to the algorithm for the expansion to work, so we use <computeroutput>destMultiArrayRange()</computeroutput> rather than <computeroutput>destMultiArray()</computeroutput>.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>sqrt()</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, float&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src(Array::size_type(100,<sp/>200,<sp/>1)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(100,<sp/>200,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::transformMultiArray(srcMultiArrayRange(src),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destMultiArrayRange(dest),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(*)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">))&amp;std::sqrt<sp/>);</highlight></codeline>
</programlisting></para><para><bold> Usage - Reduce Mode:</bold></para><para>The destination array is only 1D (it&apos;s width and height are 1). Thus, it will contain accumulated data for every slice of the source volume (or for every frame, if the source is interpreted as an image sequence). In the example, we use the functor <ref refid="classvigra_1_1FindAverage" kindref="compound">vigra::FindAverage</ref> to calculate the average gray value of every slice. Note that the destination shape must also be passed for the reduction to work, so we use <computeroutput>destMultiArrayRange()</computeroutput> rather than <computeroutput>destMultiArray()</computeroutput>.</para><para><programlisting><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classvigra_1_1MultiArray" kindref="compound" tooltip="Main MultiArray class containing the memory management.">vigra::MultiArray&lt;3, float&gt;</ref><sp/>Array;</highlight></codeline>
<codeline><highlight class="normal">Array<sp/>src(Array::size_type(100,<sp/>200,<sp/>50)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dest(Array::size_type(1,<sp/>1,<sp/>50));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vigra::transformMultiArray(srcMultiArrayRange(src),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destMultiArrayRange(dest),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvigra_1_1FindAverage" kindref="compound" tooltip="Find the average pixel value in an image or ROI.">vigra::FindAverage&lt;float&gt;</ref>()<sp/>);</highlight></codeline>
</programlisting></para><para>Note that the functor must define the appropriate traits described below in order to be recognized as a reduce functor. This is most easily achieved by deriving from <computeroutput>UnaryReduceFunctorTag</computeroutput> (see <ref refid="classvigra_1_1FunctorTraits" kindref="compound">vigra::FunctorTraits</ref>).</para><para><bold> Required Interface:</bold></para><para>In standard and expand mode, the functor must be a model of UnaryFunction (i.e. support function call with one argument and a return value <computeroutput>res = functor(arg)</computeroutput>):</para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>src_begin,<sp/>src_end,<sp/>dest_begin;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SrcAccessor<sp/>src_accessor;</highlight></codeline>
<codeline><highlight class="normal">DestAccessor<sp/>dest_accessor;</highlight></codeline>
<codeline><highlight class="normal">Functor<sp/>functor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dest_accessor.set(functor(src_accessor(src_begin)),<sp/>dest_begin);</highlight></codeline>
</programlisting></para><para>In reduce mode, it must be a model of UnaryAnalyser (i.e. support function call with one argument and no return value <computeroutput>functor(arg)</computeroutput>) and Initializer (i.e. support function call with no argument, but return value <computeroutput>res = functor()</computeroutput>). Internally, such functors are recognized by the meta functions <computeroutput>FunctorTraits&lt;FUNCTOR&gt;::isUnaryAnalyser</computeroutput> and <computeroutput>FunctorTraits&lt;FUNCTOR&gt;::isInitializer</computeroutput> which must both yield <computeroutput>VigraTrueType</computeroutput>. Make sure that your functor correctly defines <computeroutput><ref refid="classvigra_1_1FunctorTraits" kindref="compound">FunctorTraits</ref></computeroutput> because otherwise reduce mode will not work. This is most easily achieved by deriving the functor from <computeroutput>UnaryReduceFunctorTag</computeroutput> (see <ref refid="classvigra_1_1FunctorTraits" kindref="compound">vigra::FunctorTraits</ref>). In addition, the functor must be copy constructible in order to start each reduction with a fresh functor.</para><para><programlisting><codeline><highlight class="normal">MultiIterator<sp/>src_begin,<sp/>src_end,<sp/>dest_begin;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SrcAccessor<sp/>src_accessor;</highlight></codeline>
<codeline><highlight class="normal">DestAccessor<sp/>dest_accessor;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FUNCTOR<sp/>initial_functor,<sp/>functor(initial_functor);</highlight></codeline>
<codeline><highlight class="normal">assert(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(FunctorTraits&lt;FUNCTOR&gt;::isInitializer)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VigraTrueType));</highlight></codeline>
<codeline><highlight class="normal">assert(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(FunctorTraits&lt;FUNCTOR&gt;::isUnaryAnalyser)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(VigraTrueType));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">functor(src_accessor(src_begin));</highlight></codeline>
<codeline><highlight class="normal">dest_accessor.set(functor(),<sp/>dest_begin);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="767"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga2abf6f2b32f2e22c43682bad58e2c6bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArray</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;shape, SrcAccessor src, DestIterator d, DestAccessor dest, Functor const &amp;f)</argsstring>
        <name>transformMultiArray</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="775" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="773" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga314deb218eb23b1011066da4ec3fb05c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArray</definition>
        <argsstring>(triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; const &amp;src, pair&lt; DestIterator, DestAccessor &gt; const &amp;dest, Functor const &amp;f)</argsstring>
        <name>transformMultiArray</name>
        <param>
          <type>triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>pair&lt; DestIterator, DestAccessor &gt; const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="786" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="784" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga29abfa03de546787be50cd4388bcf3ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArray</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f)</argsstring>
        <name>transformMultiArray</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="799" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="796" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gacbdebef2c7c8b1b33a84920d1bcef1fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArray</definition>
        <argsstring>(triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; const &amp;src, triple&lt; DestIterator, DestShape, DestAccessor &gt; const &amp;dest, Functor const &amp;f)</argsstring>
        <name>transformMultiArray</name>
        <param>
          <type>triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>triple&lt; DestIterator, DestShape, DestAccessor &gt; const &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="817" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="814" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gabcdb44c8c6ab165755871553db185474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArrayExpandImpl</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f, MetaInt&lt; 0 &gt;)</argsstring>
        <name>transformMultiArrayExpandImpl</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="510" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="507" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga9c085b1cbf7bb4e7d58d40f351a16f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArrayExpandImpl</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f, MetaInt&lt; N &gt;)</argsstring>
        <name>transformMultiArrayExpandImpl</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="528" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="525" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gaeaee882b8862af77e28d5c4898e314f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArrayImpl</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f, VigraTrueType)</argsstring>
        <name>transformMultiArrayImpl</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>VigraTrueType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="487" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="484" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gad79360f908eb4d1ef663dd319b0c117f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArrayImpl</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, Functor const &amp;f, VigraFalseType)</argsstring>
        <name>transformMultiArrayImpl</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>VigraFalseType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="555" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="552" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gacf4c4d6dfef712b1515e17a1d04c8b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArrayReduceImpl</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, SrcShape const &amp;reduceShape, Functor const &amp;ff, MetaInt&lt; 0 &gt;)</argsstring>
        <name>transformMultiArrayReduceImpl</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>reduceShape</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type>MetaInt&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="453" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="449" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gac368f0f8de53fcb6f3c8ec4436a9d49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestShape</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
          <param>
            <type>class Functor</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::transformMultiArrayReduceImpl</definition>
        <argsstring>(SrcIterator s, SrcShape const &amp;sshape, SrcAccessor src, DestIterator d, DestShape const &amp;dshape, DestAccessor dest, SrcShape const &amp;reduceShape, Functor const &amp;f, MetaInt&lt; N &gt;)</argsstring>
        <name>transformMultiArrayReduceImpl</name>
        <param>
          <type>SrcIterator</type>
          <declname>s</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>sshape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>d</declname>
        </param>
        <param>
          <type>DestShape const &amp;</type>
          <declname>dshape</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>reduceShape</declname>
        </param>
        <param>
          <type>Functor const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>MetaInt&lt; N &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" line="471" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_pointoperators.hxx" bodystart="467" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1gad869b7b263b104e005a1ddc66b5c1f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::vectorToTensorMultiArray</definition>
        <argsstring>(...)</argsstring>
        <name>vectorToTensorMultiArray</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Calculate the tensor (outer) product of a N-D vector with itself. </para>        </briefdescription>
        <detaileddescription>
<para>This function is useful to transform vector arrays into a tensor representation that can be used as input to tensor based processing and analysis functions (e.g. tensor smoothing). When the input array has N dimensions, the input value_type must be a vector of length N, whereas the output value_type mus be vectors of length N*(N-1)/2 which will represent the upper triangular part of the resulting (symmetric) tensor. That is, for 2D arrays the output contains the elements <computeroutput>[t11, t12 == t21, t22]</computeroutput> in this order, whereas it contains the elements <computeroutput>[t11, t12, t13, t22, t23, t33]</computeroutput> for 3D arrays.</para><para>Currently, <computeroutput>N &lt;= 3</computeroutput> is required.</para><para><bold> Declarations:</bold></para><para>pass arguments explicitly: <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1gad869b7b263b104e005a1ddc66b5c1f80" kindref="member" tooltip="Calculate the tensor (outer) product of a N-D vector with itself.">vectorToTensorMultiArray</ref>(SrcIterator<sp/><sp/>si,<sp/>SrcShape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>SrcAccessor<sp/>src,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DestIterator<sp/>di,<sp/>DestAccessor<sp/>dest);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>use argument objects in conjunction with <ref refid="ArgumentObjectFactories" kindref="compound">Argument Object Factories</ref> : <programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcShape,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SrcAccessor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestIterator,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DestAccessor&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__MultiPointoperators_1gad869b7b263b104e005a1ddc66b5c1f80" kindref="member" tooltip="Calculate the tensor (outer) product of a N-D vector with itself.">vectorToTensorMultiArray</ref>(triple&lt;SrcIterator,<sp/>SrcShape,<sp/>SrcAccessor&gt;<sp/>s,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pair&lt;DestIterator,<sp/>DestAccessor&gt;<sp/>d);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold> Usage:</bold></para><para><bold>#include</bold> &lt;<ref refid="multi__tensorutilities_8hxx_source" kindref="compound">vigra/multi_tensorutilities.hxx</ref>&gt;</para><para><programlisting><codeline><highlight class="normal">MultiArray&lt;3,<sp/>float&gt;<sp/>vol(shape);</highlight></codeline>
<codeline><highlight class="normal">MultiArray&lt;3,<sp/>TinyVector&lt;float,<sp/>3&gt;<sp/>&gt;<sp/>gradient(shape);</highlight></codeline>
<codeline><highlight class="normal">MultiArray&lt;3,<sp/>TinyVector&lt;float,<sp/>6&gt;<sp/>&gt;<sp/>tensor(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiArrayConvolutionFilters_1ga4d5e9021732f13248ca3a0fe1b7c0552" kindref="member" tooltip="Calculate Gaussian gradient of a multi-dimensional arrays.">gaussianGradientMultiArray</ref>(srcMultiArrayRange(vol),<sp/>destMultiArray(gradient),<sp/>2.0);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__MultiPointoperators_1gad869b7b263b104e005a1ddc66b5c1f80" kindref="member" tooltip="Calculate the tensor (outer) product of a N-D vector with itself.">vectorToTensorMultiArray</ref>(srcMultiArrayRange(gradient),<sp/>destMultiArray(tensor));</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="245"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga6d31c11bcad74a7751a81ad50e21e335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::vectorToTensorMultiArray</definition>
        <argsstring>(SrcIterator si, SrcShape const &amp;shape, SrcAccessor src, DestIterator di, DestAccessor dest)</argsstring>
        <name>vectorToTensorMultiArray</name>
        <param>
          <type>SrcIterator</type>
          <declname>si</declname>
        </param>
        <param>
          <type>SrcShape const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>SrcAccessor</type>
          <declname>src</declname>
        </param>
        <param>
          <type>DestIterator</type>
          <declname>di</declname>
        </param>
        <param>
          <type>DestAccessor</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="252" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" bodystart="250" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="group__MultiPointoperators_1ga0fb80a4b6a9c54351384e018d74c2c7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class SrcIterator</type>
          </param>
          <param>
            <type>class SrcShape</type>
          </param>
          <param>
            <type>class SrcAccessor</type>
          </param>
          <param>
            <type>class DestIterator</type>
          </param>
          <param>
            <type>class DestAccessor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vigra::vectorToTensorMultiArray</definition>
        <argsstring>(triple&lt; SrcIterator, SrcShape, SrcAccessor &gt; s, pair&lt; DestIterator, DestAccessor &gt; d)</argsstring>
        <name>vectorToTensorMultiArray</name>
        <param>
          <type>triple&lt; SrcIterator, SrcShape, SrcAccessor &gt;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>pair&lt; DestIterator, DestAccessor &gt;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" line="277" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_tensorutilities.hxx" bodystart="275" bodyend="279"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Copy, transform, and inspect arbitrary dimensional arrays which are represented by iterators compatible to <ref refid="MultiIteratorPage" kindref="compound">Multi-dimensional Array Iterators</ref>. Note that are range is here specified by a pair: an iterator referring to the first point of the array and a shape object specifying the size of the (rectangular) ROI.</para><para><bold>#include</bold> &lt;<ref refid="multi__pointoperators_8hxx_source" kindref="compound">vigra/multi_pointoperators.hxx</ref>&gt; </para>    </detaileddescription>
  </compounddef>
</doxygen>
