<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.1.2">
  <compounddef id="multi__math_8hxx" kind="file">
    <compoundname>multi_math.hxx</compoundname>
    <includes refid="multi__array_8hxx" local="yes">multi_array.hxx</includes>
    <includes refid="tinyvector_8hxx" local="yes">tinyvector.hxx</includes>
    <includes refid="rgbvalue_8hxx" local="yes">rgbvalue.hxx</includes>
    <includes refid="mathutil_8hxx" local="yes">mathutil.hxx</includes>
    <includes local="no">complex</includes>
    <includedby refid="tv__filter_8hxx" local="yes">vigra/tv_filter.hxx</includedby>
    <incdepgraph>
      <node id="5163">
        <label>functional</label>
      </node>
      <node id="5144">
        <label>limits</label>
      </node>
      <node id="5148">
        <label>sized_int.hxx</label>
        <link refid="sized__int_8hxx_source"/>
        <childnode refid="5139" relation="include">
        </childnode>
        <childnode refid="5144" relation="include">
        </childnode>
      </node>
      <node id="5164">
        <label>iterator</label>
      </node>
      <node id="5135">
        <label>multi_array.hxx</label>
        <link refid="multi__array_8hxx_source"/>
        <childnode refid="5136" relation="include">
        </childnode>
        <childnode refid="5137" relation="include">
        </childnode>
        <childnode refid="5138" relation="include">
        </childnode>
        <childnode refid="5152" relation="include">
        </childnode>
        <childnode refid="5170" relation="include">
        </childnode>
        <childnode refid="5172" relation="include">
        </childnode>
        <childnode refid="5173" relation="include">
        </childnode>
        <childnode refid="5145" relation="include">
        </childnode>
        <childnode refid="5177" relation="include">
        </childnode>
        <childnode refid="5139" relation="include">
        </childnode>
        <childnode refid="5160" relation="include">
        </childnode>
      </node>
      <node id="5162">
        <label>inspector_passes.hxx</label>
        <link refid="inspector__passes_8hxx_source"/>
        <childnode refid="5139" relation="include">
        </childnode>
      </node>
      <node id="5149">
        <label>promote_traits.hxx</label>
        <link refid="promote__traits_8hxx_source"/>
      </node>
      <node id="5175">
        <label>initimage.hxx</label>
        <link refid="initimage_8hxx_source"/>
        <childnode refid="5174" relation="include">
        </childnode>
        <childnode refid="5167" relation="include">
        </childnode>
        <childnode refid="5176" relation="include">
        </childnode>
      </node>
      <node id="5161">
        <label>algorithm.hxx</label>
        <link refid="algorithm_8hxx_source"/>
        <childnode refid="5148" relation="include">
        </childnode>
        <childnode refid="5145" relation="include">
        </childnode>
        <childnode refid="5162" relation="include">
        </childnode>
        <childnode refid="5137" relation="include">
        </childnode>
        <childnode refid="5163" relation="include">
        </childnode>
        <childnode refid="5164" relation="include">
        </childnode>
      </node>
      <node id="5153">
        <label>cmath</label>
      </node>
      <node id="5142">
        <label>stdexcept</label>
      </node>
      <node id="5176">
        <label>functortraits.hxx</label>
        <link refid="functortraits_8hxx_source"/>
        <childnode refid="5163" relation="include">
        </childnode>
        <childnode refid="5139" relation="include">
        </childnode>
      </node>
      <node id="5166">
        <label>iteratortags.hxx</label>
        <link refid="iteratortags_8hxx_source"/>
        <childnode refid="5164" relation="include">
        </childnode>
      </node>
      <node id="5158">
        <label>string</label>
      </node>
      <node id="5172">
        <label>basicimageview.hxx</label>
        <link refid="basicimageview_8hxx_source"/>
        <childnode refid="5173" relation="include">
        </childnode>
        <childnode refid="5175" relation="include">
        </childnode>
      </node>
      <node id="5167">
        <label>iteratortraits.hxx</label>
        <link refid="iteratortraits_8hxx_source"/>
        <childnode refid="5138" relation="include">
        </childnode>
        <childnode refid="5168" relation="include">
        </childnode>
      </node>
      <node id="5146">
        <label>cfloat</label>
      </node>
      <node id="5134">
        <label>vigra/multi_math.hxx</label>
        <link refid="multi_math.hxx"/>
        <childnode refid="5135" relation="include">
        </childnode>
        <childnode refid="5152" relation="include">
        </childnode>
        <childnode refid="5170" relation="include">
        </childnode>
        <childnode refid="5160" relation="include">
        </childnode>
        <childnode refid="5147" relation="include">
        </childnode>
      </node>
      <node id="5174">
        <label>utilities.hxx</label>
        <link refid="utilities_8hxx_source"/>
        <childnode refid="5140" relation="include">
        </childnode>
        <childnode refid="5156" relation="include">
        </childnode>
        <childnode refid="5139" relation="include">
        </childnode>
        <childnode refid="5150" relation="include">
        </childnode>
        <childnode refid="5165" relation="include">
        </childnode>
        <childnode refid="5160" relation="include">
        </childnode>
        <childnode refid="5158" relation="include">
        </childnode>
        <childnode refid="5157" relation="include">
        </childnode>
      </node>
      <node id="5141">
        <label>vigra/configVersion.hxx</label>
        <link refid="configVersion_8hxx_source"/>
      </node>
      <node id="5150">
        <label>tuple.hxx</label>
        <link refid="tuple_8hxx_source"/>
        <childnode refid="5151" relation="include">
        </childnode>
      </node>
      <node id="5152">
        <label>tinyvector.hxx</label>
        <link refid="tinyvector_8hxx_source"/>
        <childnode refid="5153" relation="include">
        </childnode>
        <childnode refid="5154" relation="include">
        </childnode>
        <childnode refid="5155" relation="include">
        </childnode>
        <childnode refid="5137" relation="include">
        </childnode>
        <childnode refid="5140" relation="include">
        </childnode>
        <childnode refid="5156" relation="include">
        </childnode>
        <childnode refid="5139" relation="include">
        </childnode>
        <childnode refid="5145" relation="include">
        </childnode>
        <childnode refid="5159" relation="include">
        </childnode>
        <childnode refid="5160" relation="include">
        </childnode>
        <childnode refid="5165" relation="include">
        </childnode>
      </node>
      <node id="5178">
        <label>sys/types.h</label>
      </node>
      <node id="5160">
        <label>mathutil.hxx</label>
        <link refid="mathutil_8hxx_source"/>
        <childnode refid="5153" relation="include">
        </childnode>
        <childnode refid="5154" relation="include">
        </childnode>
        <childnode refid="5147" relation="include">
        </childnode>
        <childnode refid="5140" relation="include">
        </childnode>
        <childnode refid="5156" relation="include">
        </childnode>
        <childnode refid="5150" relation="include">
        </childnode>
        <childnode refid="5148" relation="include">
        </childnode>
        <childnode refid="5145" relation="include">
        </childnode>
        <childnode refid="5161" relation="include">
        </childnode>
      </node>
      <node id="5140">
        <label>config.hxx</label>
        <link refid="config_8hxx_source"/>
        <childnode refid="5141" relation="include">
        </childnode>
        <childnode refid="5142" relation="include">
        </childnode>
      </node>
      <node id="5145">
        <label>numerictraits.hxx</label>
        <link refid="numerictraits_8hxx_source"/>
        <childnode refid="5143" relation="include">
        </childnode>
        <childnode refid="5144" relation="include">
        </childnode>
        <childnode refid="5146" relation="include">
        </childnode>
        <childnode refid="5147" relation="include">
        </childnode>
        <childnode refid="5139" relation="include">
        </childnode>
        <childnode refid="5148" relation="include">
        </childnode>
        <childnode refid="5149" relation="include">
        </childnode>
      </node>
      <node id="5173">
        <label>imageiterator.hxx</label>
        <link refid="imageiterator_8hxx_source"/>
        <childnode refid="5174" relation="include">
        </childnode>
        <childnode refid="5138" relation="include">
        </childnode>
        <childnode refid="5167" relation="include">
        </childnode>
        <childnode refid="5139" relation="include">
        </childnode>
      </node>
      <node id="5169">
        <label>iteratoradapter.hxx</label>
        <link refid="iteratoradapter_8hxx_source"/>
      </node>
      <node id="5168">
        <label>imageiteratoradapter.hxx</label>
        <link refid="imageiteratoradapter_8hxx_source"/>
        <childnode refid="5164" relation="include">
        </childnode>
      </node>
      <node id="5151">
        <label>utility</label>
      </node>
      <node id="5157">
        <label>sstream</label>
      </node>
      <node id="5170">
        <label>rgbvalue.hxx</label>
        <link refid="rgbvalue_8hxx_source"/>
        <childnode refid="5153" relation="include">
        </childnode>
        <childnode refid="5154" relation="include">
        </childnode>
        <childnode refid="5140" relation="include">
        </childnode>
        <childnode refid="5145" relation="include">
        </childnode>
        <childnode refid="5138" relation="include">
        </childnode>
        <childnode refid="5152" relation="include">
        </childnode>
        <childnode refid="5171" relation="include">
        </childnode>
      </node>
      <node id="5165">
        <label>diff2d.hxx</label>
        <link refid="diff2d_8hxx_source"/>
        <childnode refid="5153" relation="include">
        </childnode>
        <childnode refid="5155" relation="include">
        </childnode>
        <childnode refid="5140" relation="include">
        </childnode>
        <childnode refid="5166" relation="include">
        </childnode>
        <childnode refid="5167" relation="include">
        </childnode>
        <childnode refid="5169" relation="include">
        </childnode>
        <childnode refid="5150" relation="include">
        </childnode>
      </node>
      <node id="5156">
        <label>error.hxx</label>
        <link refid="error_8hxx_source"/>
        <childnode refid="5142" relation="include">
        </childnode>
        <childnode refid="5157" relation="include">
        </childnode>
        <childnode refid="5158" relation="include">
        </childnode>
        <childnode refid="5140" relation="include">
        </childnode>
      </node>
      <node id="5171">
        <label>static_assert.hxx</label>
        <link refid="static__assert_8hxx_source"/>
      </node>
      <node id="5155">
        <label>iosfwd</label>
      </node>
      <node id="5154">
        <label>cstdlib</label>
      </node>
      <node id="5177">
        <label>multi_iterator.hxx</label>
        <link refid="multi__iterator_8hxx_source"/>
        <childnode refid="5178" relation="include">
        </childnode>
        <childnode refid="5152" relation="include">
        </childnode>
        <childnode refid="5166" relation="include">
        </childnode>
      </node>
      <node id="5143">
        <label>climits</label>
      </node>
      <node id="5139">
        <label>metaprogramming.hxx</label>
        <link refid="metaprogramming_8hxx_source"/>
        <childnode refid="5140" relation="include">
        </childnode>
        <childnode refid="5143" relation="include">
        </childnode>
        <childnode refid="5144" relation="include">
        </childnode>
        <childnode refid="5137" relation="include">
        </childnode>
      </node>
      <node id="5147">
        <label>complex</label>
      </node>
      <node id="5137">
        <label>algorithm</label>
      </node>
      <node id="5159">
        <label>memory.hxx</label>
        <link refid="memory_8hxx_source"/>
        <childnode refid="5139" relation="include">
        </childnode>
      </node>
      <node id="5138">
        <label>accessor.hxx</label>
        <link refid="accessor_8hxx_source"/>
        <childnode refid="5139" relation="include">
        </childnode>
        <childnode refid="5145" relation="include">
        </childnode>
        <childnode refid="5150" relation="include">
        </childnode>
      </node>
      <node id="5136">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5179">
        <label>vigra/multi_math.hxx</label>
        <link refid="multi_math.hxx"/>
        <childnode refid="5180" relation="include">
        </childnode>
      </node>
      <node id="5180">
        <label>vigra/tv_filter.hxx</label>
        <link refid="tv__filter_8hxx_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structvigra_1_1multi__math_1_1MultiMathBinaryOperator" prot="public">vigra::multi_math::MultiMathBinaryOperator</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1detail_1_1MultiMathExec" prot="public">vigra::multi_math::detail::MultiMathExec</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1detail_1_1MultiMathExec_3_011_00_01Assign_01_4" prot="public">vigra::multi_math::detail::MultiMathExec&lt; 1, Assign &gt;</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1MultiMathOperand" prot="public">vigra::multi_math::MultiMathOperand</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1MultiMathOperand_3_01MultiArray_3_01N_00_01T_00_01A_01_4_01_4" prot="public">vigra::multi_math::MultiMathOperand&lt; MultiArray&lt; N, T, A &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1MultiMathOperand_3_01MultiArrayView_3_01N_00_01T_00_01C_01_4_01_4" prot="public">vigra::multi_math::MultiMathOperand&lt; MultiArrayView&lt; N, T, C &gt; &gt;</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1detail_1_1MultiMathReduce" prot="public">vigra::multi_math::detail::MultiMathReduce</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1detail_1_1MultiMathReduce_3_011_00_01Assign_01_4" prot="public">vigra::multi_math::detail::MultiMathReduce&lt; 1, Assign &gt;</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1detail_1_1MultiMathReduceAll" prot="public">vigra::multi_math::detail::MultiMathReduceAll</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1detail_1_1MultiMathReduceAny" prot="public">vigra::multi_math::detail::MultiMathReduceAny</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1MultiMathScalarOperand" prot="public">vigra::multi_math::MultiMathScalarOperand</innerclass>
    <innerclass refid="structvigra_1_1multi__math_1_1MultiMathUnaryOperator" prot="public">vigra::multi_math::MultiMathUnaryOperator</innerclass>
    <innernamespace refid="namespacevigra">vigra</innernamespace>
    <innernamespace refid="namespacevigra_1_1multi__math">vigra::multi_math</innernamespace>
    <innernamespace refid="namespacevigra_1_1multi__math_1_1detail">vigra::multi_math::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="multi__math_8hxx_1aea6a1ff841a81fdf1cc34301ea3ec9f8" prot="public" static="no">
        <name>VIGRA_COMMA</name>
        <initializer>,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="637" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1afed04b3e6cec7c0968b8822e42a02435" prot="public" static="no">
        <name>VIGRA_CONSTANT_OPERAND</name>
        <param><defname>template_dcl</defname></param>
        <param><defname>type</defname></param>
        <initializer>template template_dcl \
struct MultiMathOperand&lt;type &gt; \
: MultiMathScalarOperand&lt;type &gt; \
{ \
    MultiMathOperand(type const &amp; v) \
    : MultiMathScalarOperand&lt;type &gt;(v) \
    {} \
};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="272" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1aaebd9718c2e2ab83513394279dae374b" prot="public" static="no">
        <name>VIGRA_MULTIMATH_ASSIGN</name>
        <param><defname>NAME</defname></param>
        <param><defname>OP</defname></param>
        <initializer>struct MultiMath##NAME \
{ \
    template &lt;class T, class Expression&gt; \
    static void assign(T * data, Expression const &amp; e) \
    { \
        *data OP vigra::detail::RequiresExplicitCast&lt;T&gt;::cast(*e); \
    } \
}; \
 \
template &lt;unsigned int N, class T, class C, class Expression&gt; \
void NAME(MultiArrayView&lt;N, T, C&gt; a, MultiMathOperand&lt;Expression&gt; const &amp; e) \
{ \
    typename MultiArrayShape&lt;N&gt;::type shape(a.shape()); \
     \
    vigra_precondition(e.checkShape(shape), \
       &quot;multi_math: shape mismatch in expression.&quot;); \
        \
    MultiMathExec&lt;N, MultiMath##NAME&gt;::exec(a.data(), a.shape(), a.stride(), \
                                            a.strideOrdering(), e); \
} \
 \
template &lt;unsigned int N, class T, class A, class Expression&gt; \
void NAME##OrResize(MultiArray&lt;N, T, A&gt; &amp; a, MultiMathOperand&lt;Expression&gt; const &amp; e) \
{ \
    typename MultiArrayShape&lt;N&gt;::type shape(a.shape()); \
     \
    vigra_precondition(e.checkShape(shape), \
       &quot;multi_math: shape mismatch in expression.&quot;); \
        \
    if(a.size() == 0) \
        a.reshape(shape); \
         \
    MultiMathExec&lt;N, MultiMath##NAME&gt;::exec(a.data(), a.shape(), a.stride(), \
                                            a.strideOrdering(), e); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="756" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1ae46a1a121582fa5fdfac0c916e359153" prot="public" static="no">
        <name>VIGRA_MULTIMATH_BINARY_OPERATOR</name>
        <param><defname>NAME</defname></param>
        <param><defname>FCT</defname></param>
        <param><defname>OPNAME</defname></param>
        <param><defname>SEP</defname></param>
        <param><defname>RESTYPE</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="634" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1a3826c98443da2cf01e0f860eca2ab5a9" prot="public" static="no">
        <name>VIGRA_MULTIMATH_UNARY_OPERATOR</name>
        <param><defname>NAME</defname></param>
        <param><defname>FCT</defname></param>
        <param><defname>OPNAME</defname></param>
        <param><defname>RESTYPE</defname></param>
        <initializer>namespace detail { \
struct NAME \
{ \
    template &lt;class T&gt; \
    struct Result \
    { \
        typedef RESTYPE type; \
    }; \
     \
    template &lt;class T&gt; \
    typename Result&lt;T&gt;::type \
    operator()(T const &amp; t) const \
    { \
        return FCT(t); \
    } \
}; \
} \
 \
template &lt;unsigned int N, class T, class C&gt; \
MultiMathOperand&lt;MultiMathUnaryOperator&lt;MultiMathOperand&lt;MultiArrayView&lt;N, T, C&gt; &gt;, \
                                        detail::NAME&gt; &gt; \
OPNAME(MultiArrayView&lt;N, T, C&gt; const &amp; v) \
{ \
    typedef MultiMathOperand&lt;MultiArrayView&lt;N, T, C&gt; &gt; O; \
    typedef MultiMathUnaryOperator&lt;O, detail::NAME&gt; OP; \
    return MultiMathOperand&lt;OP&gt;(OP(v)); \
} \
 \
template &lt;unsigned int N, class T, class A&gt; \
MultiMathOperand&lt;MultiMathUnaryOperator&lt;MultiMathOperand&lt;MultiArray&lt;N, T, A&gt; &gt;, \
                                        detail::NAME&gt; &gt; \
OPNAME(MultiArray&lt;N, T, A&gt; const &amp; v) \
{ \
    typedef MultiMathOperand&lt;MultiArray&lt;N, T, A&gt; &gt; O; \
    typedef MultiMathUnaryOperator&lt;O, detail::NAME&gt; OP; \
    return MultiMathOperand&lt;OP&gt;(OP(v)); \
} \
 \
template &lt;class T&gt; \
MultiMathOperand&lt;MultiMathUnaryOperator&lt;MultiMathOperand&lt;T&gt;, \
                                        detail::NAME&gt; &gt; \
OPNAME(MultiMathOperand&lt;T&gt; const &amp; v) \
{ \
    typedef MultiMathOperand&lt;T&gt; O; \
    typedef MultiMathUnaryOperator&lt;O, detail::NAME&gt; OP; \
    return MultiMathOperand&lt;OP&gt;(OP(v)); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="393" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1aea7ed2096097157e0dfaae47a5406e4d" prot="public" static="no">
        <name>VIGRA_NOTHING</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="636" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1a83cb235b82463cfce3badbe31e5810ab" prot="public" static="no">
        <name>VIGRA_PROMOTE</name>
        <initializer>typename PromoteTraits&lt;T1, T2&gt;::Promote</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="638" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1a89e6090255c6008f9d7dd112d3d25c3d" prot="public" static="no">
        <name>VIGRA_REALPROMOTE</name>
        <initializer>typename NumericTraits&lt;T&gt;::RealPromote</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="395" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1a89e6090255c6008f9d7dd112d3d25c3d" prot="public" static="no">
        <name>VIGRA_REALPROMOTE</name>
        <initializer>typename PromoteTraits&lt;typename NumericTraits&lt;T1&gt;::RealPromote, \
                                                 typename NumericTraits&lt;T2&gt;::RealPromote&gt;::Promote</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="640" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="639" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1aa847f8914ab32c92e02965ef506b5d65" prot="public" static="no">
        <name>VIGRA_RGBVALUE_ARGS</name>
        <initializer>&lt;class V, unsigned int R, unsigned int G, unsigned int B&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="295" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1aa5057d9c0b3e2099873391d8206f014c" prot="public" static="no">
        <name>VIGRA_RGBVALUE_DECL</name>
        <initializer>RGBValue&lt;V, R, G, B&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="296" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1a04cc161ceb6be43351a92a4845cdfecc" prot="public" static="no">
        <name>VIGRA_TINYVECTOR_ARGS</name>
        <initializer>&lt;class T, int N&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="289" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="multi__math_8hxx_1afdd4a5b6c9d253b52df2964e7860e63b" prot="public" static="no">
        <name>VIGRA_TINYVECTOR_DECL</name>
        <initializer>TinyVector&lt;T, N&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" line="290" bodyfile="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx" bodystart="290" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2010-2011<sp/>by<sp/>Ullrich<sp/>Koethe<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VIGRA<sp/>computer<sp/>vision<sp/>library.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>VIGRA<sp/>Website<sp/>is<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://hci.iwr.uni-heidelberg.de/vigra/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Please<sp/>direct<sp/>questions,<sp/>bug<sp/>reports,<sp/>and<sp/>contributions<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ullrich.koethe@iwr.uni-heidelberg.de<sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vigra@informatik.uni-hamburg.de<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>conditions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>Software.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND<sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VIGRA_MULTI_MATH_HXX</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_MULTI_MATH_HXX</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;multi_array.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tinyvector.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rgbvalue.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mathutil.hxx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">vigra<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">/**<sp/>\defgroup<sp/>MultiMathModule<sp/>vigra::multi_math</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace<sp/>&lt;tt&gt;vigra::multi_math&lt;/tt&gt;<sp/>holds<sp/>VIGRA&apos;s<sp/>support<sp/>for<sp/>efficient<sp/>arithmetic<sp/>and<sp/>algebraic<sp/>functions<sp/>on<sp/>multi-dimensional<sp/>arrays<sp/>(that<sp/>is,<sp/>\ref<sp/>MultiArrayView<sp/>and<sp/>its<sp/>subclasses).<sp/>All<sp/>&lt;tt&gt;multi_math&lt;/tt&gt;<sp/>functions<sp/>operate<sp/>element-wise.<sp/>If<sp/>you<sp/>need<sp/>matrix<sp/>multiplication,<sp/>use<sp/>\ref<sp/>LinearAlgebraModule<sp/>instead.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>In<sp/>order<sp/>to<sp/>avoid<sp/>overload<sp/>ambiguities,<sp/>multi-array<sp/>arithmetic<sp/>must<sp/>be<sp/>explicitly<sp/>activated<sp/>by</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>vigra::multi_math;</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>(this<sp/>should<sp/>not<sp/>be<sp/>done<sp/>globally,<sp/>but<sp/>only<sp/>in<sp/>the<sp/>scope<sp/>where<sp/>the<sp/>functionality<sp/>is<sp/>actually<sp/>used).</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>You<sp/>can<sp/>then<sp/>use<sp/>the<sp/>standard<sp/>operators<sp/>in<sp/>the<sp/>expected<sp/>way:</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>float&gt;<sp/>i(Shape2(100,<sp/>100)),<sp/>j(Shape2(100,<sp/>100));</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/>MultiArray&lt;2,<sp/>float&gt;<sp/>h<sp/><sp/>=<sp/>i<sp/>+<sp/>4.0<sp/>*<sp/>j;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>(i.transpose()<sp/>-<sp/>j)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>etc.<sp/>(supported<sp/>operators<sp/>are<sp/>&lt;tt&gt;+<sp/>-<sp/>*<sp/>/<sp/>!<sp/>~<sp/>%<sp/>&amp;&amp;<sp/>||<sp/>==<sp/>!=<sp/>&amp;lt;<sp/>&amp;lt;=<sp/>&amp;gt;<sp/>&amp;gt;=<sp/>&amp;lt;&amp;lt;<sp/>&amp;gt;&amp;gt;<sp/>&amp;<sp/>|<sp/>^<sp/>=<sp/>+=<sp/>-=<sp/>*=<sp/>/=&lt;/tt&gt;,<sp/>with<sp/>both<sp/>scalar<sp/>and<sp/>array<sp/>arguments).<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/>Algebraic<sp/>functions<sp/>are<sp/>available<sp/>as<sp/>well:</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>h<sp/><sp/>=<sp/>exp(-(sq(i)<sp/>+<sp/>sq(j)));</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>h<sp/>*=<sp/>atan2(-i,<sp/>j);</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>following<sp/>functions<sp/>are<sp/>implemented:<sp/>&lt;tt&gt;abs,<sp/>erf,<sp/>even,<sp/>odd,<sp/>sign,<sp/>signi,<sp/>round,<sp/>roundi,<sp/>sqrt,<sp/>sqrti,<sp/>sq,<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>norm,<sp/>squaredNorm,<sp/>gamma,<sp/>loggamma,<sp/>exp,<sp/>log,<sp/>log10,<sp/>sin,<sp/>sin_pi,<sp/>cos,<sp/>cos_pi,<sp/>asin,<sp/>acos,<sp/>tan,<sp/>atan,<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>floor,<sp/>ceil,<sp/>conj,<sp/>real,<sp/>imag,<sp/>arg,<sp/>atan2,<sp/>pow,<sp/>fmod,<sp/>min,<sp/>max&lt;/tt&gt;,<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>provided<sp/>the<sp/>array&apos;s<sp/>element<sp/>type<sp/>supports<sp/>the<sp/>respective<sp/>function.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/>Supported<sp/>element<sp/>types<sp/>currently<sp/>include<sp/>the<sp/>built-in<sp/>numeric<sp/>types,<sp/>\ref<sp/>TinyVector,<sp/>\ref<sp/>RGBValue,<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;tt&gt;std::complex&lt;/tt&gt;,<sp/>and<sp/>\ref<sp/>FFTWComplex.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/>In<sp/>addition,<sp/>&lt;tt&gt;multi_math&lt;/tt&gt;<sp/>supports<sp/>a<sp/>number<sp/>of<sp/>functions<sp/>that<sp/>reduce<sp/>arrays<sp/>to<sp/>scalars:</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>\code</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>s<sp/>=<sp/>sum&lt;double&gt;(i);<sp/><sp/>//<sp/>compute<sp/>the<sp/>sum<sp/>of<sp/>the<sp/>elements,<sp/>using<sp/>&apos;double&apos;<sp/>as<sp/>accumulator<sp/>type</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>p<sp/>=<sp/>product&lt;double&gt;(abs(i));<sp/><sp/>//<sp/>compute<sp/>the<sp/>product<sp/>of<sp/>the<sp/>elements&apos;<sp/>absolute<sp/>values</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>a<sp/>=<sp/>any(i<sp/>&lt;<sp/>0.0);<sp/><sp/>//<sp/>check<sp/>if<sp/>any<sp/>element<sp/>of<sp/>i<sp/>is<sp/>negative</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>b<sp/>=<sp/>all(i<sp/>&gt;<sp/>0.0);<sp/><sp/>//<sp/>check<sp/>if<sp/>all<sp/>elements<sp/>of<sp/>i<sp/>are<sp/>positive</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>\endcode</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>Expressions<sp/>are<sp/>expanded<sp/>so<sp/>that<sp/>no<sp/>temporary<sp/>arrays<sp/>have<sp/>to<sp/>be<sp/>created.<sp/>To<sp/>optimize<sp/>cache<sp/>locality,</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/>loops<sp/>are<sp/>executed<sp/>in<sp/>the<sp/>stride<sp/>ordering<sp/>of<sp/>the<sp/>left-hand-side<sp/>array.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;b&gt;\#include&lt;/b&gt;<sp/>\&lt;vigra/multi_math.hxx\&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/>Namespace:<sp/>vigra::multi_math</highlight></codeline>
<codeline lineno="94"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">multi_math<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ARG&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathOperand</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ARG::result_type<sp/>result_type;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>ARG::ndim;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiMathOperand(ARG<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>arg_(a)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>all<sp/>arrays<sp/>involved<sp/>in<sp/>the<sp/>expression<sp/>have<sp/>compatible<sp/>shapes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(including<sp/>transparent<sp/>expansion<sp/>of<sp/>singleton<sp/>axes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;s&apos;<sp/>is<sp/>the<sp/>shape<sp/>of<sp/>the<sp/>LHS<sp/>array.<sp/>If<sp/>&apos;s&apos;<sp/>is<sp/>zero<sp/>(i.e.<sp/>the<sp/>LHS<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>yet<sp/>initialized),<sp/>it<sp/>is<sp/>set<sp/>to<sp/>the<sp/>maximal<sp/>RHS<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SHAPE&gt;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkShape(SHAPE<sp/>&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="115"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg_.checkShape(s);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increment<sp/>the<sp/>pointer<sp/>of<sp/>all<sp/>RHS<sp/>arrays<sp/>along<sp/>the<sp/>given<sp/>&apos;axis&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="121"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.inc(axis);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>the<sp/>pointer<sp/>of<sp/>all<sp/>RHS<sp/>arrays<sp/>along<sp/>the<sp/>given<sp/>&apos;axis&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="127"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_.reset(axis);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>expression<sp/>at<sp/>the<sp/>current<sp/>pointer<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>result_type<sp/>operator*()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="133"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*arg_;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the<sp/>expression<sp/>at<sp/>an<sp/>offset<sp/>of<sp/>the<sp/>current<sp/>pointer<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SHAPE&gt;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>result_type<sp/>operator[](SHAPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="140"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg_[s];</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ARG<sp/>arg_;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MultiMathOperand<sp/>AllowOverload;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;N&gt;::type<sp/>Shape;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>result_type;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>(int)N;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiMathOperand(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>p_(a.data()),</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape_(a.shape()),</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strides_(a.stride())</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allow<sp/>for<sp/>transparent<sp/>expansion<sp/>of<sp/>singleton<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;N;<sp/>++k)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shape_[k]<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides_[k]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkShape(Shape<sp/>&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="169"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>support:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>transparent<sp/>expansion<sp/>of<sp/>singleton<sp/>dimensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>determining<sp/>LHS<sp/>shape<sp/>in<sp/>a<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k=0;<sp/>k&lt;N;<sp/>++k)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shape_[k]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s[k]<sp/>&lt;=<sp/>1)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[k]<sp/>=<sp/>shape_[k];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shape_[k]<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>shape_[k]<sp/>!=<sp/>s[k])</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator[](Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="192"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_[<ref refid="group__RGBValueOperators_1gaabe9d910ba7a54cbf606254a81e409e6" kindref="member" tooltip="dot product">dot</ref>(s,<sp/>strides_)];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="197"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_<sp/>+=<sp/>strides_[axis];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="202"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_<sp/>-=<sp/>shape_[axis]*strides_[axis];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>result_type<sp/>operator*()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="207"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*p_;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>Shape<sp/>shape_,<sp/>strides_;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathOperand&lt;MultiArray&lt;N,<sp/>T,<sp/>A&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T,<sp/>UnstridedArrayTag&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MultiMathOperand<sp/>AllowOverload;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiMathOperand(MultiArray&lt;N,<sp/>T,<sp/>A&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>a)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T,<sp/>UnstridedArrayTag&gt;<sp/>&gt;(a)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="224"><highlight class="normal">};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathScalarOperand</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>MultiMathOperand&lt;T&gt;<sp/>AllowOverload;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>result_type;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiMathScalarOperand(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>v_(v)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SHAPE&gt;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkShape(SHAPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="240"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SHAPE&gt;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator[](SHAPE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="246"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v_;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>axis<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="251"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>axis<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="254"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>operator*()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="257"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v_;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>v_;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_CONSTANT_OPERAND(template_dcl,<sp/>type)<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor">template<sp/>template_dcl<sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor">struct<sp/>MultiMathOperand&lt;type<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor">:<sp/>MultiMathScalarOperand&lt;type<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MultiMathOperand(type<sp/>const<sp/>&amp;<sp/>v)<sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>:<sp/>MultiMathScalarOperand&lt;type<sp/>&gt;(v)<sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{}<sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor">};</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="276"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;&gt;,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">VIGRA_CONSTANT_OPERAND(&lt;class<sp/>T&gt;,<sp/>std::complex&lt;T&gt;)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_TINYVECTOR_ARGS<sp/>&lt;class<sp/>T,<sp/>int<sp/>N&gt;</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_TINYVECTOR_DECL<sp/>TinyVector&lt;T,<sp/>N&gt;</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"></highlight><highlight class="normal">VIGRA_CONSTANT_OPERAND(VIGRA_TINYVECTOR_ARGS,<sp/>VIGRA_TINYVECTOR_DECL)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_TINYVECTOR_ARGS</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_TINYVECTOR_DECL</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_RGBVALUE_ARGS<sp/>&lt;class<sp/>V,<sp/>unsigned<sp/>int<sp/>R,<sp/>unsigned<sp/>int<sp/>G,<sp/>unsigned<sp/>int<sp/>B&gt;</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_RGBVALUE_DECL<sp/>RGBValue&lt;V,<sp/>R,<sp/>G,<sp/>B&gt;</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"></highlight><highlight class="normal">VIGRA_CONSTANT_OPERAND(VIGRA_RGBVALUE_ARGS,<sp/>VIGRA_RGBVALUE_DECL)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_RGBVALUE_ARGS</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_RGBVALUE_DECL</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_CONSTANT_OPERAND</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>O,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathUnaryOperator</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F::template<sp/>Result&lt;typename<sp/>O::result_type&gt;::type<sp/>result_type;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>O::ndim;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiMathUnaryOperator(O<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>o)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>o_(o)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SHAPE&gt;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkShape(SHAPE<sp/>&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="316"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o_.checkShape(s);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="322"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o_.inc(axis);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="327"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o_.reset(axis);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>POINT&gt;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>result_type<sp/>operator[](POINT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="333"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(o_[p]);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>result_type<sp/>operator*()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="338"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(*o_);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>O<sp/>o_;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/>f_;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">};</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_MULTIMATH_UNARY_OPERATOR(NAME,<sp/>FCT,<sp/>OPNAME,<sp/>RESTYPE)<sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor">namespace<sp/>detail<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor">struct<sp/>NAME<sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Result<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>RESTYPE<sp/>type;<sp/>\</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>Result&lt;T&gt;::type<sp/>\</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>operator()(T<sp/>const<sp/>&amp;<sp/>t)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FCT(t);<sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor">};<sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T,<sp/>class<sp/>C&gt;<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathUnaryOperator&lt;MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor">OPNAME(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>const<sp/>&amp;<sp/>v)<sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>&gt;<sp/>O;<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathUnaryOperator&lt;O,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v));<sp/>\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T,<sp/>class<sp/>A&gt;<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathUnaryOperator&lt;MultiMathOperand&lt;MultiArray&lt;N,<sp/>T,<sp/>A&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor">OPNAME(MultiArray&lt;N,<sp/>T,<sp/>A&gt;<sp/>const<sp/>&amp;<sp/>v)<sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArray&lt;N,<sp/>T,<sp/>A&gt;<sp/>&gt;<sp/>O;<sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathUnaryOperator&lt;O,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v));<sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathUnaryOperator&lt;MultiMathOperand&lt;T&gt;,<sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor">OPNAME(MultiMathOperand&lt;T&gt;<sp/>const<sp/>&amp;<sp/>v)<sp/>\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T&gt;<sp/>O;<sp/>\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathUnaryOperator&lt;O,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v));<sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_REALPROMOTE<sp/>typename<sp/>NumericTraits&lt;T&gt;::RealPromote</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DOXYGEN<sp/><sp/>//<sp/>doxygen<sp/>gets<sp/>confused<sp/>by<sp/>these<sp/>macros</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Negate,<sp/>-,<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">-,<sp/>T)</highlight></codeline>
<codeline lineno="400"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Not,<sp/>!,<sp/>operator!,<sp/>T)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(BitwiseNot,<sp/>~,<sp/>operator~,<sp/>T)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">using<sp/>vigra::<ref refid="group__FFTWComplexOperators_1ga6f4ef274842b6153923f02a6cd264576" kindref="member" tooltip="absolute value (= magnitude)">abs</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Abs,<sp/>vigra::abs,<sp/>abs,<sp/>typename<sp/>NormTraits&lt;T&gt;::NormType)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">using<sp/>vigra::erf;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Erf,<sp/>vigra::erf,<sp/>erf,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Even,<sp/>vigra::<ref refid="group__MathFunctions_1ga3cf86b8d2300cd08b69024eb89f90115" kindref="member">even</ref>,<sp/>even,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Odd,<sp/>vigra::<ref refid="group__MathFunctions_1ga48f661149941ebaa90ddd99ee5eee145" kindref="member">odd</ref>,<sp/>odd,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Sign,<sp/>vigra::<ref refid="group__MathFunctions_1ga99756ca23b738bdc82afba3b0e49df74" kindref="member">sign</ref>,<sp/>sign,<sp/>T)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Signi,<sp/>vigra::<ref refid="group__MathFunctions_1ga2d6f0e128653deb42a47a8f379b4b9a0" kindref="member">signi</ref>,<sp/>signi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">using<sp/>vigra::<ref refid="group__FixedPointOperations_1gaddcb15f9b13ee9ba98ee1e5b8e228544" kindref="member" tooltip="rounding to the nearest integer.">round</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Round,<sp/>vigra::round,<sp/>round,<sp/>T)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Roundi,<sp/>vigra::<ref refid="group__FixedPoint16Operations_1ga2d7df7a7ce314097e5d4be827ecb18d9" kindref="member" tooltip="rounding to the nearest integer.">roundi</ref>,<sp/>roundi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Sqrti,<sp/>vigra::<ref refid="group__MathFunctions_1ga540e54c778be63996a0f61f7117c2903" kindref="member">sqrti</ref>,<sp/>sqrti,<sp/>T)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Sq,<sp/>vigra::<ref refid="group__MathFunctions_1ga5fe62e7b0dc6f379dd436c9c8338c93e" kindref="member">sq</ref>,<sp/>sq,<sp/>typename<sp/>NumericTraits&lt;T&gt;::Promote)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Norm,<sp/>vigra::<ref refid="group__FFTWComplexOperators_1ga396baa79e8bd78a178597d32d5152041" kindref="member" tooltip="norm (= magnitude)">norm</ref>,<sp/>norm,<sp/>typename<sp/>NormTraits&lt;T&gt;::NormType)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(SquaredNorm,<sp/>vigra::<ref refid="group__FFTWComplexOperators_1ga484df995dad9821aac02ec42cd58f7eb" kindref="member" tooltip="squared norm (= squared magnitude)">squaredNorm</ref>,<sp/>squaredNorm,<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>NormTraits&lt;T&gt;::SquaredNormType)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Sin_pi,<sp/>vigra::<ref refid="group__MathFunctions_1ga8fe78db7b7769819568aeafbfbc2ffd0" kindref="member">sin_pi</ref>,<sp/>sin_pi,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Cos_pi,<sp/>vigra::<ref refid="group__MathFunctions_1ga7ce9a27a70c7341a29c4637cddf26f8c" kindref="member">cos_pi</ref>,<sp/>cos_pi,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">using<sp/>vigra::<ref refid="group__MathFunctions_1ga441c9e4bf9f952c0fe94836634bcf976" kindref="member">gamma</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Gamma,<sp/>vigra::gamma,<sp/>gamma,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">using<sp/>vigra::<ref refid="group__MathFunctions_1gafc5038616b325ecfd12b4ef51318aa26" kindref="member">loggamma</ref>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Loggamma,<sp/>vigra::loggamma,<sp/>loggamma,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Sqrt,<sp/>std::<ref refid="group__FixedPointOperations_1ga22d75753836176f3d172f58be11ecc4c" kindref="member" tooltip="square root.">sqrt</ref>,<sp/>sqrt,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">using<sp/>vigra::<ref refid="group__LinearAlgebraFunctions_1ga2a9e01ae7ae7b39a618e9f4a6afaee5b" kindref="member">exp</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Exp,<sp/>vigra::exp,<sp/>exp,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Log,<sp/>std::<ref refid="group__LinearAlgebraFunctions_1ga51ba49a20a6057642664f5be8521ec39" kindref="member">log</ref>,<sp/>log,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Log10,<sp/>std::<ref refid="group__LinearAlgebraFunctions_1ga0b0034496cb2c48cdbb6d0d0b0c9fe3b" kindref="member">log10</ref>,<sp/>log10,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Sin,<sp/>std::<ref refid="group__LinearAlgebraFunctions_1ga9db90484f9146df72b800bab7fecdd4b" kindref="member">sin</ref>,<sp/>sin,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Asin,<sp/>std::<ref refid="group__LinearAlgebraFunctions_1ga5babf8d2f2bf4f98519a6cf3d6fcc88f" kindref="member">asin</ref>,<sp/>asin,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Cos,<sp/>std::<ref refid="group__LinearAlgebraFunctions_1ga05727ffc201ac332c0e4158a2267c08c" kindref="member">cos</ref>,<sp/>cos,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Acos,<sp/>std::<ref refid="group__LinearAlgebraFunctions_1gacabb81744a32c18598f2a0ab8a1ac24a" kindref="member">acos</ref>,<sp/>acos,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Tan,<sp/>std::<ref refid="group__LinearAlgebraFunctions_1gaff59c596812d1553c8e681e708b9a14f" kindref="member">tan</ref>,<sp/>tan,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Atan,<sp/>std::<ref refid="group__LinearAlgebraFunctions_1ga9746dede2b434f7c812ad557c1694db1" kindref="member">atan</ref>,<sp/>atan,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Floor,<sp/>std::<ref refid="group__FixedPointOperations_1gaf8fe85520fc0bc2d77ec8e6cf26f3c5d" kindref="member" tooltip="rounding down.">floor</ref>,<sp/>floor,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Ceil,<sp/>std::<ref refid="group__FixedPointOperations_1ga14fe7b9ffa21e091c6ff4ede68717c30" kindref="member" tooltip="rounding up.">ceil</ref>,<sp/>ceil,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Conj,<sp/><ref refid="group__FFTWComplexOperators_1gae7a58f4547192b979f7f8cd565bdf45b" kindref="member" tooltip="complex conjugate">conj</ref>,<sp/>conj,<sp/>T)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Real,<sp/><ref refid="group__FFTWComplexOperators_1gafa8d2d7496e4bdd96c42026a0ecbde1c" kindref="member" tooltip="real part">real</ref>,<sp/>real,<sp/>typename<sp/>T::value_type)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Imag,<sp/><ref refid="group__FFTWComplexOperators_1ga8a3bba029e1ba026bd968786cfcf4546" kindref="member" tooltip="imaginary part">imag</ref>,<sp/>imag,<sp/>typename<sp/>T::value_type)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">VIGRA_MULTIMATH_UNARY_OPERATOR(Arg,<sp/><ref refid="group__FFTWComplexOperators_1gadde71f2f7d25b483924dedacc36b2b2d" kindref="member" tooltip="pahse">arg</ref>,<sp/>arg,<sp/>typename<sp/>T::value_type)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//DOXYGEN</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_REALPROMOTE</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_MULTIMATH_UNARY_OPERATOR</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>O1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>O2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathBinaryOperator</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F::template<sp/>Result&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>O1::result_type,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>O2::result_type&gt;::type<sp/>result_type;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>O1::ndim<sp/>&gt;<sp/>O2::ndim<sp/>?<sp/>O1::ndim<sp/>:<sp/>O2::ndim;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>MultiMathBinaryOperator(O1<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>o1,<sp/>O2<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>o2)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>o1_(o1),</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>o2_(o2)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SHAPE&gt;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkShape(SHAPE<sp/>&amp;<sp/>s)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="470"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o1_.checkShape(s)<sp/>&amp;&amp;<sp/>o2_.checkShape(s);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>POINT&gt;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>result_type<sp/>operator[](POINT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="476"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(o1_[p],<sp/>o2_[p]);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inc(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="481"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o1_.inc(axis);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o2_.inc(axis);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>axis)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="487"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o1_.reset(axis);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o2_.reset(axis);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>result_type<sp/>operator*()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="493"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f_(*o1_,<sp/>*o2_);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>O1<sp/>o1_;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>O2<sp/>o2_;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>F<sp/>f_;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">};</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>sequel,<sp/>the<sp/>nested<sp/>type<sp/>&apos;MultiMathOperand&lt;T&gt;::AllowOverload&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ensures<sp/>that<sp/>template<sp/>functions<sp/>only<sp/>participate<sp/>in<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>resolution<sp/>when<sp/>this<sp/>type<sp/>is<sp/>defined,<sp/>i.e.<sp/>when<sp/>T<sp/>is<sp/>a<sp/>number<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>array<sp/>type.<sp/>It<sp/>thus<sp/>prevents<sp/>&apos;ambiguous<sp/>overload&apos;<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_MULTIMATH_BINARY_OPERATOR(NAME,<sp/>FCT,<sp/>OPNAME,<sp/>SEP,<sp/>RESTYPE)<sp/>\</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor">namespace<sp/>detail<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor">struct<sp/>NAME<sp/>\</highlight></codeline>
<codeline lineno="512"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>Result<sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>RESTYPE<sp/>type;<sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>Result&lt;T1,<sp/>T2&gt;::type<sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>operator()(T1<sp/>const<sp/>&amp;<sp/>t1,<sp/>T2<sp/>const<sp/>&amp;<sp/>t2)<sp/>const<sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FCT(t1<sp/>SEP<sp/>t2);<sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor">};<sp/>\</highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="528"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T1,<sp/>class<sp/>A1,<sp/>class<sp/>T2,<sp/>class<sp/>A2&gt;<sp/>\</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T1&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T2&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor">OPNAME(MultiArray&lt;N,<sp/>T1,<sp/>A1&gt;<sp/>const<sp/>&amp;<sp/>v1,<sp/>MultiArray&lt;N,<sp/>T2,<sp/>A2&gt;<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T1&gt;<sp/>&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T2&gt;<sp/>&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP((MultiArrayView&lt;N,<sp/>T1&gt;<sp/>const<sp/>&amp;)v1,<sp/>(MultiArrayView&lt;N,<sp/>T2&gt;<sp/>const<sp/>&amp;)v2));<sp/>\</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T1,<sp/>class<sp/>C1,<sp/>class<sp/>T2,<sp/>class<sp/>C2&gt;<sp/>\</highlight></codeline>
<codeline lineno="541"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor">OPNAME(MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>const<sp/>&amp;<sp/>v1,<sp/>MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="546"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>C2&gt;<sp/>\</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;typename<sp/>MultiMathOperand&lt;T1&gt;::AllowOverload,<sp/>\</highlight></codeline>
<codeline lineno="554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor">OPNAME(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T1&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T1,<sp/>class<sp/>C1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="566"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>MultiMathOperand&lt;T2&gt;::AllowOverload,<sp/>\</highlight></codeline>
<codeline lineno="567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor">OPNAME(MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="571"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T2&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T1,<sp/>class<sp/>T2,<sp/>class<sp/>C2&gt;<sp/>\</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;MultiMathOperand&lt;T1&gt;,<sp/>\</highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor">OPNAME(MultiMathOperand&lt;T1&gt;<sp/>const<sp/>&amp;<sp/>v1,<sp/>MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T1&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="583"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T2,<sp/>C2&gt;<sp/>&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="587"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T1,<sp/>class<sp/>C1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="589"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>&gt;,<sp/>\</highlight></codeline>
<codeline lineno="590"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathOperand&lt;T2&gt;,<sp/>\</highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor">OPNAME(MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>const<sp/>&amp;<sp/>v1,<sp/>MultiMathOperand&lt;T2&gt;<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;MultiArrayView&lt;N,<sp/>T1,<sp/>C1&gt;<sp/>&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T2&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="597"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="598"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="599"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="600"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;MultiMathOperand&lt;T1&gt;,<sp/>\</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathOperand&lt;T2&gt;,<sp/>\</highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor">OPNAME(MultiMathOperand&lt;T1&gt;<sp/>const<sp/>&amp;<sp/>v1,<sp/>MultiMathOperand&lt;T2&gt;<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="606"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T1&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="607"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T2&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="608"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;typename<sp/>MultiMathOperand&lt;T1&gt;::AllowOverload,<sp/>\</highlight></codeline>
<codeline lineno="614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathOperand&lt;T2&gt;,<sp/>\</highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor">OPNAME(T1<sp/>const<sp/>&amp;<sp/>v1,<sp/>MultiMathOperand&lt;T2&gt;<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T1&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T2&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="620"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="623"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="624"><highlight class="preprocessor">template<sp/>&lt;class<sp/>T1,<sp/>class<sp/>T2&gt;<sp/>\</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor">MultiMathOperand&lt;MultiMathBinaryOperator&lt;MultiMathOperand&lt;T1&gt;,<sp/>\</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>MultiMathOperand&lt;T2&gt;::AllowOverload,<sp/>\</highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::NAME&gt;<sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor">OPNAME(MultiMathOperand&lt;T1&gt;<sp/>const<sp/>&amp;<sp/>v1,<sp/>T2<sp/>const<sp/>&amp;<sp/>v2)<sp/>\</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T1&gt;<sp/>O1;<sp/>\</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathOperand&lt;T2&gt;<sp/>O2;<sp/>\</highlight></codeline>
<codeline lineno="632"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>MultiMathBinaryOperator&lt;O1,<sp/>O2,<sp/>detail::NAME&gt;<sp/>OP;<sp/>\</highlight></codeline>
<codeline lineno="633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>MultiMathOperand&lt;OP&gt;(OP(v1,<sp/>v2));<sp/>\</highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_NOTHING</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_COMMA<sp/>,</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_PROMOTE<sp/>typename<sp/>PromoteTraits&lt;T1,<sp/>T2&gt;::Promote</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_REALPROMOTE<sp/>typename<sp/>PromoteTraits&lt;typename<sp/>NumericTraits&lt;T1&gt;::RealPromote,<sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>NumericTraits&lt;T2&gt;::RealPromote&gt;::Promote</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Plus,<sp/>VIGRA_NOTHING,<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">+,<sp/>+,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="643"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Minus,<sp/>VIGRA_NOTHING,<sp/>operator-,<sp/>-,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Multiplies,<sp/>VIGRA_NOTHING,<sp/>operator*,<sp/>*,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="645"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Divides,<sp/>VIGRA_NOTHING,<sp/>operator/,<sp/>/,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="646"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Modulo,<sp/>VIGRA_NOTHING,<sp/>operator%,<sp/>%,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="647"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(And,<sp/>VIGRA_NOTHING,<sp/>operator&amp;&amp;,<sp/>&amp;&amp;,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="648"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Or,<sp/>VIGRA_NOTHING,<sp/>operator||,<sp/>||,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="649"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Equal,<sp/>VIGRA_NOTHING,<sp/>operator==,<sp/>==,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(NotEqual,<sp/>VIGRA_NOTHING,<sp/>operator!=,<sp/>!=,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="651"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Less,<sp/>VIGRA_NOTHING,<sp/>operator&lt;,<sp/>&lt;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="652"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(LessEqual,<sp/>VIGRA_NOTHING,<sp/>operator&lt;=,<sp/>&lt;=,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="653"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Greater,<sp/>VIGRA_NOTHING,<sp/>operator&gt;,<sp/>&gt;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(GreaterEqual,<sp/>VIGRA_NOTHING,<sp/>operator&gt;=,<sp/>&gt;=,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Leftshift,<sp/>VIGRA_NOTHING,<sp/>operator&lt;&lt;,<sp/>&lt;&lt;,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="656"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Rightshift,<sp/>VIGRA_NOTHING,<sp/>operator&gt;&gt;,<sp/>&gt;&gt;,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="657"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(BitwiseAnd,<sp/>VIGRA_NOTHING,<sp/>operator&amp;,<sp/>&amp;,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(BitwiseOr,<sp/>VIGRA_NOTHING,<sp/>operator|,<sp/>|,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="659"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(BitwiseXor,<sp/>VIGRA_NOTHING,<sp/>operator^,<sp/>^,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Atan2,<sp/>std::<ref refid="group__FixedPoint16Operations_1gae83e1ae2e3dae6dc462c69a7c8175fc5" kindref="member" tooltip="Arctangent. Accuracy better than 1/3 degree (9 significant bits).">atan2</ref>,<sp/>atan2,<sp/>VIGRA_COMMA,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="662"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Pow,<sp/>std::pow,<sp/>pow,<sp/>VIGRA_COMMA,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="663"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Fmod,<sp/>std::fmod,<sp/>fmod,<sp/>VIGRA_COMMA,<sp/>VIGRA_REALPROMOTE)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Min,<sp/>std::<ref refid="group__TinyVectorOperators_1ga22d93f30188e8ad29c37bd614b26b510" kindref="member" tooltip="element-wise minimum">min</ref>,<sp/>min,<sp/>VIGRA_COMMA,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Max,<sp/>std::<ref refid="group__TinyVectorOperators_1ga5bc03ab0e1ce5b0a6560bcb19d6b3a66" kindref="member" tooltip="element-wise maximum">max</ref>,<sp/>max,<sp/>VIGRA_COMMA,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Minimum,<sp/>std::min,<sp/>minimum,<sp/>VIGRA_COMMA,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">VIGRA_MULTIMATH_BINARY_OPERATOR(Maximum,<sp/>std::max,<sp/>maximum,<sp/>VIGRA_COMMA,<sp/>VIGRA_PROMOTE)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_NOTHING</highlight></codeline>
<codeline lineno="670"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_COMMA</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_PROMOTE</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_REALPROMOTE</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_MULTIMATH_BINARY_OPERATOR</highlight></codeline>
<codeline lineno="674"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>pass<sp/>&apos;strideOrder&apos;<sp/>to<sp/>the<sp/>recursion<sp/>in<sp/>order<sp/>to<sp/>make<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>inner<sp/>loop<sp/>iterates<sp/>over<sp/>the<sp/>output&apos;s<sp/>major<sp/>axis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Of<sp/>course,<sp/>this<sp/>does<sp/>not<sp/>help<sp/>when<sp/>the<sp/>RHS<sp/>arrays<sp/>are<sp/>ordered<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>differently<sp/>--<sp/>maybe<sp/>it<sp/>is<sp/>better<sp/>to<sp/>find<sp/>the<sp/>most<sp/>common<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>among<sp/>all<sp/>arguments<sp/>(both<sp/>RHS<sp/>and<sp/>LHS)?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Assign&gt;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathExec</highlight></codeline>
<codeline lineno="685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>LEVEL<sp/>=<sp/>N-1<sp/>};</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expression&gt;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exec(T<sp/>*<sp/>data,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>strides,<sp/></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>strideOrder,<sp/>Expression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>axis<sp/>=<sp/>strideOrder[LEVEL];</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;shape[axis];<sp/>++k,<sp/>data<sp/>+=<sp/>strides[axis],<sp/>e.inc(axis))</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathExec&lt;N-1,<sp/>Assign&gt;::exec(data,<sp/>shape,<sp/>strides,<sp/>strideOrder,<sp/>e);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.reset(axis);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>-=<sp/>shape[axis]*strides[axis];</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal">};</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Assign&gt;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathExec&lt;1,<sp/>Assign&gt;</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>LEVEL<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expression&gt;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exec(T<sp/>*<sp/>data,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>strides,<sp/></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>strideOrder,<sp/>Expression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>axis<sp/>=<sp/>strideOrder[LEVEL];</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;shape[axis];<sp/>++k,<sp/>data<sp/>+=<sp/>strides[axis],<sp/>e.inc(axis))</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assign::assign(data,<sp/>e);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.reset(axis);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>-=<sp/>shape[axis]*strides[axis];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal">};</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIGRA_MULTIMATH_ASSIGN(NAME,<sp/>OP)<sp/>\</highlight></codeline>
<codeline lineno="722"><highlight class="preprocessor">struct<sp/>MultiMath##NAME<sp/>\</highlight></codeline>
<codeline lineno="723"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="724"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template<sp/>&lt;class<sp/>T,<sp/>class<sp/>Expression&gt;<sp/>\</highlight></codeline>
<codeline lineno="725"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>assign(T<sp/>*<sp/>data,<sp/>Expression<sp/>const<sp/>&amp;<sp/>e)<sp/>\</highlight></codeline>
<codeline lineno="726"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data<sp/>OP<sp/>vigra::detail::RequiresExplicitCast&lt;T&gt;::cast(*e);<sp/>\</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor">};<sp/>\</highlight></codeline>
<codeline lineno="730"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="731"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T,<sp/>class<sp/>C,<sp/>class<sp/>Expression&gt;<sp/>\</highlight></codeline>
<codeline lineno="732"><highlight class="preprocessor">void<sp/>NAME(MultiArrayView&lt;N,<sp/>T,<sp/>C&gt;<sp/>a,<sp/>MultiMathOperand&lt;Expression&gt;<sp/>const<sp/>&amp;<sp/>e)<sp/>\</highlight></codeline>
<codeline lineno="733"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>MultiArrayShape&lt;N&gt;::type<sp/>shape(a.shape());<sp/>\</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vigra_precondition(e.checkShape(shape),<sp/>\</highlight></codeline>
<codeline lineno="737"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;multi_math:<sp/>shape<sp/>mismatch<sp/>in<sp/>expression.&quot;);<sp/>\</highlight></codeline>
<codeline lineno="738"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MultiMathExec&lt;N,<sp/>MultiMath##NAME&gt;::exec(a.data(),<sp/>a.shape(),<sp/>a.stride(),<sp/>\</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.strideOrdering(),<sp/>e);<sp/>\</highlight></codeline>
<codeline lineno="741"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="742"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="743"><highlight class="preprocessor">template<sp/>&lt;unsigned<sp/>int<sp/>N,<sp/>class<sp/>T,<sp/>class<sp/>A,<sp/>class<sp/>Expression&gt;<sp/>\</highlight></codeline>
<codeline lineno="744"><highlight class="preprocessor">void<sp/>NAME##OrResize(MultiArray&lt;N,<sp/>T,<sp/>A&gt;<sp/>&amp;<sp/>a,<sp/>MultiMathOperand&lt;Expression&gt;<sp/>const<sp/>&amp;<sp/>e)<sp/>\</highlight></codeline>
<codeline lineno="745"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="746"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typename<sp/>MultiArrayShape&lt;N&gt;::type<sp/>shape(a.shape());<sp/>\</highlight></codeline>
<codeline lineno="747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vigra_precondition(e.checkShape(shape),<sp/>\</highlight></codeline>
<codeline lineno="749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;multi_math:<sp/>shape<sp/>mismatch<sp/>in<sp/>expression.&quot;);<sp/>\</highlight></codeline>
<codeline lineno="750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(a.size()<sp/>==<sp/>0)<sp/>\</highlight></codeline>
<codeline lineno="752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.reshape(shape);<sp/>\</highlight></codeline>
<codeline lineno="753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MultiMathExec&lt;N,<sp/>MultiMath##NAME&gt;::exec(a.data(),<sp/>a.shape(),<sp/>a.stride(),<sp/>\</highlight></codeline>
<codeline lineno="755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.strideOrdering(),<sp/>e);<sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal">VIGRA_MULTIMATH_ASSIGN(assign,<sp/>=)</highlight></codeline>
<codeline lineno="759"><highlight class="normal">VIGRA_MULTIMATH_ASSIGN(plusAssign,<sp/>+=)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">VIGRA_MULTIMATH_ASSIGN(minusAssign,<sp/>-=)</highlight></codeline>
<codeline lineno="761"><highlight class="normal">VIGRA_MULTIMATH_ASSIGN(multiplyAssign,<sp/>*=)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">VIGRA_MULTIMATH_ASSIGN(divideAssign,<sp/>/=)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>VIGRA_MULTIMATH_ASSIGN</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Assign&gt;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathReduce</highlight></codeline>
<codeline lineno="768"><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>LEVEL<sp/>=<sp/>N-1<sp/>};</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expression&gt;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exec(T<sp/>&amp;<sp/>t,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>Expression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;shape[LEVEL];<sp/>++k,<sp/>e.inc(LEVEL))</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiMathReduce&lt;N-1,<sp/>Assign&gt;::exec(t,<sp/>shape,<sp/>e);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.reset(LEVEL);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal">};</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Assign&gt;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathReduce&lt;1,<sp/>Assign&gt;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>LEVEL<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expression&gt;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exec(T<sp/>&amp;<sp/>t,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>shape,<sp/>Expression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="group__MultiIteratorGroup_1gac436173a0374e960a463a9186496ab70" kindref="member">MultiArrayIndex</ref><sp/>k=0;<sp/>k&lt;shape[0];<sp/>++k,<sp/>e.inc(0))</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assign::assign(&amp;t,<sp/>e);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.reset(0);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal">};</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathReduceAll</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expression&gt;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(T<sp/>*<sp/>data,<sp/>Expression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data<sp/>=<sp/>*data<sp/>&amp;&amp;<sp/>(*e<sp/>!=<sp/>NumericTraits&lt;typename<sp/>Expression::result_type&gt;::zero());</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal">};</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MultiMathReduceAny</highlight></codeline>
<codeline lineno="808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Expression&gt;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(T<sp/>*<sp/>data,<sp/>Expression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>e)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data<sp/>=<sp/>*data<sp/>||<sp/>(*e<sp/>!=<sp/>NumericTraits&lt;typename<sp/>Expression::result_type&gt;::zero());</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal">};</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">U</highlight></codeline>
<codeline lineno="821"><highlight class="normal">sum(MultiMathOperand&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v,<sp/>U<sp/>res<sp/>=<sp/>NumericTraits&lt;U&gt;::zero())<sp/></highlight></codeline>
<codeline lineno="822"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>MultiMathOperand&lt;T&gt;::ndim;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;ndim&gt;::type<sp/>shape;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>v.checkShape(shape);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::MultiMathReduce&lt;ndim,<sp/>detail::MultiMathplusAssign&gt;::exec(res,<sp/>shape,<sp/>v);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">U</highlight></codeline>
<codeline lineno="832"><highlight class="normal">sum(MultiArrayView&lt;N,<sp/>T,<sp/>S&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v,<sp/>U<sp/>res<sp/>=<sp/>NumericTraits&lt;U&gt;::zero())<sp/></highlight></codeline>
<codeline lineno="833"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.sum&lt;U&gt;()<sp/>+<sp/>res;</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="838"><highlight class="normal">U</highlight></codeline>
<codeline lineno="839"><highlight class="normal">product(MultiMathOperand&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v,<sp/>U<sp/>res<sp/>=<sp/>NumericTraits&lt;U&gt;::one())<sp/></highlight></codeline>
<codeline lineno="840"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>MultiMathOperand&lt;T&gt;::ndim;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;ndim&gt;::type<sp/>shape;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>v.checkShape(shape);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::MultiMathReduce&lt;ndim,<sp/>detail::MultiMathmultiplyAssign&gt;::exec(res,<sp/>shape,<sp/>v);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">U</highlight></codeline>
<codeline lineno="850"><highlight class="normal">product(MultiArrayView&lt;N,<sp/>T,<sp/>S&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v,<sp/>U<sp/>res<sp/>=<sp/>NumericTraits&lt;U&gt;::one())<sp/></highlight></codeline>
<codeline lineno="851"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.product&lt;U&gt;()<sp/>*<sp/>res;</highlight></codeline>
<codeline lineno="853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">all(MultiMathOperand&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/></highlight></codeline>
<codeline lineno="858"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>MultiMathOperand&lt;T&gt;::ndim;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;ndim&gt;::type<sp/>shape;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>v.checkShape(shape);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>res<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::MultiMathReduce&lt;ndim,<sp/>detail::MultiMathReduceAll&gt;::exec(res,<sp/>shape,<sp/>v);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal">any(MultiMathOperand&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>v)<sp/></highlight></codeline>
<codeline lineno="870"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>MultiMathOperand&lt;T&gt;::ndim;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MultiArrayShape&lt;ndim&gt;::type<sp/>shape;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>v.checkShape(shape);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>res<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::MultiMathReduce&lt;ndim,<sp/>detail::MultiMathReduceAny&gt;::exec(res,<sp/>shape,<sp/>v);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>vigra::multi_math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>VIGRA_MULTI_MATH_HXX</highlight></codeline>
    </programlisting>
    <location file="C:/Users/ukoethe/Arbeit/vigra-git/vigra/include/vigra/multi_math.hxx"/>
  </compounddef>
</doxygen>
