/*++++++++++++++++++++INCLUDES+and+Definitions++++++++++++++++++++++++*/

#include <vigra/matlab.hxx>
#include <string>




//this could be a typedef but if you want outType to be the same type as inType then you can just 
//set outType to T

#define vigraFunctor vigraDistance

using namespace vigra;



/*+++++++++++++++++++User data structure+++++++++++++++++++++++++++++*/
/* This is the structure which contains all user data and user Options. 
/*
/* Predefined fields.
/* numOfDim:			Number of Dimensions of the first parameter
/*					can be IMAG(2) or VOLUME(3) 
/* enum dim 			(IMAG =2 , VOLUME = 4)
/
/* in				BasicImageView that maps to inputs[0] in the 
/*					2D case. Uninitialised in 3D case.
/* in3D				MultiArrayViews that maps on to imputs[0] in 
/*					2D AND 3D case.
/* out				unitialised BasicImageView. Use one of the
/*					createOutput functions to create a suitible 
/*					Basic Image.
/* out3D				same as above only as MultiArrayView.
/* 
/* Predefined Macros:
/* declScalar
/* declMinMaxScalar
/* declCharConstr
/*
/* The constructor:
/*
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
template <class T>
struct data: public basedata<T>{
	declScalar()
	declMinMaxScalar()
	declCharConstr()
	
	data(matlab::OutputArray outputs, matlab::InputArray inputs)
	:			basedata(inputs),
				map(title), 
				map(title2)
	{
	//DO SOME HARDCORE PRECONDITION CHECKING.
	
	}
	
	
	
	
}
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/* This function does all the work
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
template <class T>
class vigraFunctor
{
	void exec(matlab::OutputArray outputs, matlab::InputArray inputs){
		//Default Options
		data<T>  o(outputs, inputs);
		
		o.outputs(normal)
		o.outputs(wierdsize);

		// contorPair maps 2 integers bijectively onto one dimension. (see Wikipedia Cantor pair Function) 
		switch(cantorPair(...)){
			case cP3<...>::value:
			default:
				mexErrMsgTxt("Something went wrong");
		}
		
		// Are there more than one output? nargout.
		
	}
}


/*+++++++++++++++++++++++MexEntryFunc++++++++++++++++++++++++++++++++*/
/* Gatewayfunction - see matlab.hxx for details.
/* if a certain class is NOT supported - you will have to copy the 
/* body of the callMexFunctor function and edit it here.
/* Supports (u)int[8|16|32|64], float and double.
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

void vigraMexFunction(matlab::OutputArray outputs, matlab::InputArray inputs){
	// 
	callMexFunctor<vigraFunctor>(outputs, inputs);
}

