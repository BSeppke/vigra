% [ Copyright © 2007 Ullrich Koethe - All rights reserved ]
%
% Based on make.m by Andrea Tagliasacchi
%
% SYNOPSIS
%	- buildVigraExtensions(OUTDIR, TARGET)
%	
% DESCRIPTION
%	- MAKEFILE that compiles all the VIGRA MEX functions in the specified OUTDIR
% 
% INPUT
%   - OUTDIR: directory to put compiled files to 
%   - TARGET: 
%	  - 'all':    builds all the files in the folder
%	  - 'clean':  remove all mex compiled files from the folder
%
function buildVigraExtensions(OUTDIR, TARGET)

if nargin == 0
	OUTDIR = '.';
end
if nargin < 2
	TARGET = 'all';
end

if exist('octave_config_info')
    isOctave = 1;
else
    isOctave = 0;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%          MAKE ALL            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if strcmp( TARGET, 'all' )

    if isdir(OUTDIR) == 0
         disp([OUTDIR ' does not exist. Creating.']);
         mkdir(OUTDIR)
    end
    
    if strcmp(OUTDIR, '.') == 0
        currentPath = pwd;
        cd(OUTDIR);
        disp(['Appending ' pwd ' to path']);
        path(path, pwd);
        cd(currentPath);
    end
    
    % by default source files have .cpp extension
	cpp_files = dir('./*.cpp');
	for i=1:length( cpp_files )
		
		% extract name
		cpp_file = cpp_files(i);
		cpp_filename = cpp_file.name;
        functionName = cpp_filename(1:end-4);
		
		% extract the mexfile name that would be generated by "mex ccp_filename"
        % NOTE: you can also use [pathstr, name, ext, versn] = fileparts(filename) 
		mex_filename = [OUTDIR '/' functionName '.' mexext ];
		mex_file     = dir( mex_filename );
		
		% file not already compiled OR file compiled is outdated
		ver = version;
        if str2double(ver(end- 5:end-2)) < 2008
            for 
            cpp_file.datenum = datenum(cpp_file.date);
            mex_file.datenum = datenum(mex_file.date);
        end
        if isempty( mex_file ) || ( cpp_file.datenum > mex_file.datenum )
			% compile
			disp(['compiling: ' cpp_filename ] );
			if isOctave
                eval(['mex -I../../include -o ' mex_filename ' ' cpp_filename]);
            else
                eval(['mex -O -I../../include -outdir ''' OUTDIR ''' ' cpp_filename]);
            end
            % create the associated .m documentation file
            if strcmp(OUTDIR, '.') ~= 0   % we are in the source directory
               continue;                  % do not care about documentation
            end
            
            m_filename = [functionName '.m' ];
            if isempty(dir(['./' m_filename])) == 0  % file exists
                disp(['copying: ' m_filename]);
                copyfile(['./' m_filename], [OUTDIR '/' m_filename]);  % => copy it
            else  % build documentation from C++ comment
                text = '';
                f = fopen(cpp_filename);
                line = fgetl(f);
                while ischar(line)
                    text = sprintf('%s\n%s', text, line);
                    line = fgetl(f);
                end
                fclose(f);
                [match comment] = regexp(text, '/\*\*\s*MATLAB\s*(.*?)\*/', 'match', 'tokens', 'ignorecase');
                if isempty(match)  % documentation string not found
                    disp(['No comment found, cannot create documentation for ' m_filename]);
                    continue;      % cannot create documentation
                end
                [match func] = regexp(comment{1}{1}, ['(^\s*function [^\n]*' functionName '[^\n]*)'], 'lineanchors', 'match', 'tokens');
                if isempty(match)  % 'function' line not found
                    disp(['No MATLAB function found, cannot create documentation for ' m_filename]);
                    continue;      % cannot create documentation
                end
                m_file = func{1}{1};
                lines = regexp(comment{1}{1}, '[^\n]*\n', 'match');
                for k=1:length(lines)
                    line = lines{k};
                    m_file = sprintf('%s\n%% %s', m_file, line(1:end-1));
                end
                m_file = sprintf('%s\n%% \n  %s', m_file, 'error(''mex-file missing. Call buildVigraExtensions(INSTALL_PATH) to create it.'')');
                disp(['creating: ' m_filename]);
                fopen([OUTDIR '/' m_filename], 'w');
                fprintf(f, '%s', m_file);
                fclose(f);
            end
		else
			continue;
		end
	end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%          MAKE CLEAN          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
elseif strcmp( TARGET, 'clean')
    % use mexext to determine for which architecture source have been built
    mex_files = dir( [OUTDIR '/*.' mexext]);
    
    % delete those files one by one and notify deletion
	for i=1:length( mex_files )
        mex_filename = [OUTDIR '/' mex_files(i).name];
        disp(['deleting ' mex_filename]);
        delete( mex_filename );
    end
end
	
disp('Make done!');
